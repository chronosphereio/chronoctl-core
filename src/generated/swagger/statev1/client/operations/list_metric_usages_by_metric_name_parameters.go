// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListMetricUsagesByMetricNameParams creates a new ListMetricUsagesByMetricNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListMetricUsagesByMetricNameParams() *ListMetricUsagesByMetricNameParams {
	return &ListMetricUsagesByMetricNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListMetricUsagesByMetricNameParamsWithTimeout creates a new ListMetricUsagesByMetricNameParams object
// with the ability to set a timeout on a request.
func NewListMetricUsagesByMetricNameParamsWithTimeout(timeout time.Duration) *ListMetricUsagesByMetricNameParams {
	return &ListMetricUsagesByMetricNameParams{
		timeout: timeout,
	}
}

// NewListMetricUsagesByMetricNameParamsWithContext creates a new ListMetricUsagesByMetricNameParams object
// with the ability to set a context for a request.
func NewListMetricUsagesByMetricNameParamsWithContext(ctx context.Context) *ListMetricUsagesByMetricNameParams {
	return &ListMetricUsagesByMetricNameParams{
		Context: ctx,
	}
}

// NewListMetricUsagesByMetricNameParamsWithHTTPClient creates a new ListMetricUsagesByMetricNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewListMetricUsagesByMetricNameParamsWithHTTPClient(client *http.Client) *ListMetricUsagesByMetricNameParams {
	return &ListMetricUsagesByMetricNameParams{
		HTTPClient: client,
	}
}

/*
ListMetricUsagesByMetricNameParams contains all the parameters to send to the API endpoint

	for the list metric usages by metric name operation.

	Typically these are written to a http.Request.
*/
type ListMetricUsagesByMetricNameParams struct {

	/* IncludeCountsByType.

	   If `true`, responses include the fields `reference_counts_by_type` and `query_execution_counts_by_type`. If `false`, these fields are returned empty.
	*/
	IncludeCountsByType *bool

	/* LookbackSecs.

	   Controls the time range over which query executions are included in usages. Defaults to `2592000` (30 days).

	   Format: int32
	*/
	LookbackSecs *int32

	/* MetricNameGlob.

	   Glob match string for filtering results by metric name.
	*/
	MetricNameGlob *string

	// OrderAscending.
	OrderAscending *bool

	// OrderBy.
	OrderBy *string

	/* PageMaxSize.

	     Page size preference (i.e. how many items are returned in the next
	page). If zero, the server will use a default. Regardless of what size
	is given, clients must never assume how many items will be returned.

	     Format: int64
	*/
	PageMaxSize *int64

	/* PageToken.

	     Opaque page token identifying which page to request. An empty token
	identifies the first page.
	*/
	PageToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list metric usages by metric name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListMetricUsagesByMetricNameParams) WithDefaults() *ListMetricUsagesByMetricNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list metric usages by metric name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListMetricUsagesByMetricNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) WithTimeout(timeout time.Duration) *ListMetricUsagesByMetricNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) WithContext(ctx context.Context) *ListMetricUsagesByMetricNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) WithHTTPClient(client *http.Client) *ListMetricUsagesByMetricNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeCountsByType adds the includeCountsByType to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) WithIncludeCountsByType(includeCountsByType *bool) *ListMetricUsagesByMetricNameParams {
	o.SetIncludeCountsByType(includeCountsByType)
	return o
}

// SetIncludeCountsByType adds the includeCountsByType to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) SetIncludeCountsByType(includeCountsByType *bool) {
	o.IncludeCountsByType = includeCountsByType
}

// WithLookbackSecs adds the lookbackSecs to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) WithLookbackSecs(lookbackSecs *int32) *ListMetricUsagesByMetricNameParams {
	o.SetLookbackSecs(lookbackSecs)
	return o
}

// SetLookbackSecs adds the lookbackSecs to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) SetLookbackSecs(lookbackSecs *int32) {
	o.LookbackSecs = lookbackSecs
}

// WithMetricNameGlob adds the metricNameGlob to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) WithMetricNameGlob(metricNameGlob *string) *ListMetricUsagesByMetricNameParams {
	o.SetMetricNameGlob(metricNameGlob)
	return o
}

// SetMetricNameGlob adds the metricNameGlob to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) SetMetricNameGlob(metricNameGlob *string) {
	o.MetricNameGlob = metricNameGlob
}

// WithOrderAscending adds the orderAscending to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) WithOrderAscending(orderAscending *bool) *ListMetricUsagesByMetricNameParams {
	o.SetOrderAscending(orderAscending)
	return o
}

// SetOrderAscending adds the orderAscending to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) SetOrderAscending(orderAscending *bool) {
	o.OrderAscending = orderAscending
}

// WithOrderBy adds the orderBy to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) WithOrderBy(orderBy *string) *ListMetricUsagesByMetricNameParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPageMaxSize adds the pageMaxSize to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) WithPageMaxSize(pageMaxSize *int64) *ListMetricUsagesByMetricNameParams {
	o.SetPageMaxSize(pageMaxSize)
	return o
}

// SetPageMaxSize adds the pageMaxSize to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) SetPageMaxSize(pageMaxSize *int64) {
	o.PageMaxSize = pageMaxSize
}

// WithPageToken adds the pageToken to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) WithPageToken(pageToken *string) *ListMetricUsagesByMetricNameParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the list metric usages by metric name params
func (o *ListMetricUsagesByMetricNameParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WriteToRequest writes these params to a swagger request
func (o *ListMetricUsagesByMetricNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeCountsByType != nil {

		// query param include_counts_by_type
		var qrIncludeCountsByType bool

		if o.IncludeCountsByType != nil {
			qrIncludeCountsByType = *o.IncludeCountsByType
		}
		qIncludeCountsByType := swag.FormatBool(qrIncludeCountsByType)
		if qIncludeCountsByType != "" {

			if err := r.SetQueryParam("include_counts_by_type", qIncludeCountsByType); err != nil {
				return err
			}
		}
	}

	if o.LookbackSecs != nil {

		// query param lookback_secs
		var qrLookbackSecs int32

		if o.LookbackSecs != nil {
			qrLookbackSecs = *o.LookbackSecs
		}
		qLookbackSecs := swag.FormatInt32(qrLookbackSecs)
		if qLookbackSecs != "" {

			if err := r.SetQueryParam("lookback_secs", qLookbackSecs); err != nil {
				return err
			}
		}
	}

	if o.MetricNameGlob != nil {

		// query param metric_name_glob
		var qrMetricNameGlob string

		if o.MetricNameGlob != nil {
			qrMetricNameGlob = *o.MetricNameGlob
		}
		qMetricNameGlob := qrMetricNameGlob
		if qMetricNameGlob != "" {

			if err := r.SetQueryParam("metric_name_glob", qMetricNameGlob); err != nil {
				return err
			}
		}
	}

	if o.OrderAscending != nil {

		// query param order.ascending
		var qrOrderAscending bool

		if o.OrderAscending != nil {
			qrOrderAscending = *o.OrderAscending
		}
		qOrderAscending := swag.FormatBool(qrOrderAscending)
		if qOrderAscending != "" {

			if err := r.SetQueryParam("order.ascending", qOrderAscending); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param order.by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order.by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.PageMaxSize != nil {

		// query param page.max_size
		var qrPageMaxSize int64

		if o.PageMaxSize != nil {
			qrPageMaxSize = *o.PageMaxSize
		}
		qPageMaxSize := swag.FormatInt64(qrPageMaxSize)
		if qPageMaxSize != "" {

			if err := r.SetQueryParam("page.max_size", qPageMaxSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param page.token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page.token", qPageToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
