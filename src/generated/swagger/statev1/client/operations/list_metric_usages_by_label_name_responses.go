// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/statev1/models"
)

// ListMetricUsagesByLabelNameReader is a Reader for the ListMetricUsagesByLabelName structure.
type ListMetricUsagesByLabelNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListMetricUsagesByLabelNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListMetricUsagesByLabelNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListMetricUsagesByLabelNameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListMetricUsagesByLabelNameOK creates a ListMetricUsagesByLabelNameOK with default headers values
func NewListMetricUsagesByLabelNameOK() *ListMetricUsagesByLabelNameOK {
	return &ListMetricUsagesByLabelNameOK{}
}

/*
ListMetricUsagesByLabelNameOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListMetricUsagesByLabelNameOK struct {
	Payload *models.Statev1ListMetricUsagesByLabelNameResponse
}

// IsSuccess returns true when this list metric usages by label name o k response has a 2xx status code
func (o *ListMetricUsagesByLabelNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list metric usages by label name o k response has a 3xx status code
func (o *ListMetricUsagesByLabelNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list metric usages by label name o k response has a 4xx status code
func (o *ListMetricUsagesByLabelNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list metric usages by label name o k response has a 5xx status code
func (o *ListMetricUsagesByLabelNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list metric usages by label name o k response a status code equal to that given
func (o *ListMetricUsagesByLabelNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list metric usages by label name o k response
func (o *ListMetricUsagesByLabelNameOK) Code() int {
	return 200
}

func (o *ListMetricUsagesByLabelNameOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/state/metric-usages-by-label-name][%d] listMetricUsagesByLabelNameOK  %+v", 200, o.Payload)
}

func (o *ListMetricUsagesByLabelNameOK) String() string {
	return fmt.Sprintf("[GET /api/v1/state/metric-usages-by-label-name][%d] listMetricUsagesByLabelNameOK  %+v", 200, o.Payload)
}

func (o *ListMetricUsagesByLabelNameOK) GetPayload() *models.Statev1ListMetricUsagesByLabelNameResponse {
	return o.Payload
}

func (o *ListMetricUsagesByLabelNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Statev1ListMetricUsagesByLabelNameResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListMetricUsagesByLabelNameDefault creates a ListMetricUsagesByLabelNameDefault with default headers values
func NewListMetricUsagesByLabelNameDefault(code int) *ListMetricUsagesByLabelNameDefault {
	return &ListMetricUsagesByLabelNameDefault{
		_statusCode: code,
	}
}

/*
ListMetricUsagesByLabelNameDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListMetricUsagesByLabelNameDefault struct {
	_statusCode int

	Payload *models.APIError
}

// IsSuccess returns true when this list metric usages by label name default response has a 2xx status code
func (o *ListMetricUsagesByLabelNameDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list metric usages by label name default response has a 3xx status code
func (o *ListMetricUsagesByLabelNameDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list metric usages by label name default response has a 4xx status code
func (o *ListMetricUsagesByLabelNameDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list metric usages by label name default response has a 5xx status code
func (o *ListMetricUsagesByLabelNameDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list metric usages by label name default response a status code equal to that given
func (o *ListMetricUsagesByLabelNameDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list metric usages by label name default response
func (o *ListMetricUsagesByLabelNameDefault) Code() int {
	return o._statusCode
}

func (o *ListMetricUsagesByLabelNameDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/state/metric-usages-by-label-name][%d] ListMetricUsagesByLabelName default  %+v", o._statusCode, o.Payload)
}

func (o *ListMetricUsagesByLabelNameDefault) String() string {
	return fmt.Sprintf("[GET /api/v1/state/metric-usages-by-label-name][%d] ListMetricUsagesByLabelName default  %+v", o._statusCode, o.Payload)
}

func (o *ListMetricUsagesByLabelNameDefault) GetPayload() *models.APIError {
	return o.Payload
}

func (o *ListMetricUsagesByLabelNameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
