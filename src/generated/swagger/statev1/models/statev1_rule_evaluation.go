// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Statev1RuleEvaluation statev1 rule evaluation
//
// swagger:model statev1RuleEvaluation
type Statev1RuleEvaluation struct {

	// Unique identifier of the rule.
	RuleSlug string `json:"rule_slug,omitempty"`

	// rule type
	RuleType RuleEvaluationRuleType `json:"rule_type,omitempty"`

	// Timestamp when the rule evaluation issues are detected.
	// Rule evaluations issues are aggregated over last 5 minute leading up to detected_at.
	// Format: date-time
	DetectedAt strfmt.DateTime `json:"detected_at,omitempty"`

	// The number of rule evaluation issues occurred over last 5 minutes.
	Count int32 `json:"count,omitempty"`

	// Detailed message related to rule evaluation issue. See "Admin > Evaluation failures" in the Chronosphere documentation for more information.
	Message string `json:"message,omitempty"`
}

// Validate validates this statev1 rule evaluation
func (m *Statev1RuleEvaluation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRuleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Statev1RuleEvaluation) validateRuleType(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleType) { // not required
		return nil
	}

	if err := m.RuleType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rule_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rule_type")
		}
		return err
	}

	return nil
}

func (m *Statev1RuleEvaluation) validateDetectedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DetectedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("detected_at", "body", "date-time", m.DetectedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this statev1 rule evaluation based on the context it is used
func (m *Statev1RuleEvaluation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRuleType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Statev1RuleEvaluation) contextValidateRuleType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RuleType) { // not required
		return nil
	}

	if err := m.RuleType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rule_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rule_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Statev1RuleEvaluation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Statev1RuleEvaluation) UnmarshalBinary(b []byte) error {
	var res Statev1RuleEvaluation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
