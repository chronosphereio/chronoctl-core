// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RuleEvaluationRuleType rule evaluation rule type
//
// swagger:model RuleEvaluationRuleType
type RuleEvaluationRuleType string

func NewRuleEvaluationRuleType(value RuleEvaluationRuleType) *RuleEvaluationRuleType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RuleEvaluationRuleType.
func (m RuleEvaluationRuleType) Pointer() *RuleEvaluationRuleType {
	return &m
}

const (

	// RuleEvaluationRuleTypeMONITOR captures enum value "MONITOR"
	RuleEvaluationRuleTypeMONITOR RuleEvaluationRuleType = "MONITOR"

	// RuleEvaluationRuleTypeRECORDING captures enum value "RECORDING"
	RuleEvaluationRuleTypeRECORDING RuleEvaluationRuleType = "RECORDING"
)

// for schema
var ruleEvaluationRuleTypeEnum []interface{}

func init() {
	var res []RuleEvaluationRuleType
	if err := json.Unmarshal([]byte(`["MONITOR","RECORDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ruleEvaluationRuleTypeEnum = append(ruleEvaluationRuleTypeEnum, v)
	}
}

func (m RuleEvaluationRuleType) validateRuleEvaluationRuleTypeEnum(path, location string, value RuleEvaluationRuleType) error {
	if err := validate.EnumCase(path, location, value, ruleEvaluationRuleTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this rule evaluation rule type
func (m RuleEvaluationRuleType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRuleEvaluationRuleTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this rule evaluation rule type based on context it is used
func (m RuleEvaluationRuleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
