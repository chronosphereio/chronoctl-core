// Code generated by MockGen. DO NOT EDIT.
// Source: ./generated/swagger/configv1/client/operations/operations_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	operations "github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/client/operations"
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// CreateBucket mocks base method.
func (m *MockClientService) CreateBucket(params *operations.CreateBucketParams, opts ...operations.ClientOption) (*operations.CreateBucketOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBucket", varargs...)
	ret0, _ := ret[0].(*operations.CreateBucketOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockClientServiceMockRecorder) CreateBucket(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockClientService)(nil).CreateBucket), varargs...)
}

// CreateClassicDashboard mocks base method.
func (m *MockClientService) CreateClassicDashboard(params *operations.CreateClassicDashboardParams, opts ...operations.ClientOption) (*operations.CreateClassicDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClassicDashboard", varargs...)
	ret0, _ := ret[0].(*operations.CreateClassicDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClassicDashboard indicates an expected call of CreateClassicDashboard.
func (mr *MockClientServiceMockRecorder) CreateClassicDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClassicDashboard", reflect.TypeOf((*MockClientService)(nil).CreateClassicDashboard), varargs...)
}

// CreateCollection mocks base method.
func (m *MockClientService) CreateCollection(params *operations.CreateCollectionParams, opts ...operations.ClientOption) (*operations.CreateCollectionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCollection", varargs...)
	ret0, _ := ret[0].(*operations.CreateCollectionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockClientServiceMockRecorder) CreateCollection(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockClientService)(nil).CreateCollection), varargs...)
}

// CreateDashboard mocks base method.
func (m *MockClientService) CreateDashboard(params *operations.CreateDashboardParams, opts ...operations.ClientOption) (*operations.CreateDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDashboard", varargs...)
	ret0, _ := ret[0].(*operations.CreateDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDashboard indicates an expected call of CreateDashboard.
func (mr *MockClientServiceMockRecorder) CreateDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboard", reflect.TypeOf((*MockClientService)(nil).CreateDashboard), varargs...)
}

// CreateDataset mocks base method.
func (m *MockClientService) CreateDataset(params *operations.CreateDatasetParams, opts ...operations.ClientOption) (*operations.CreateDatasetOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataset", varargs...)
	ret0, _ := ret[0].(*operations.CreateDatasetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockClientServiceMockRecorder) CreateDataset(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockClientService)(nil).CreateDataset), varargs...)
}

// CreateDerivedLabel mocks base method.
func (m *MockClientService) CreateDerivedLabel(params *operations.CreateDerivedLabelParams, opts ...operations.ClientOption) (*operations.CreateDerivedLabelOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDerivedLabel", varargs...)
	ret0, _ := ret[0].(*operations.CreateDerivedLabelOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDerivedLabel indicates an expected call of CreateDerivedLabel.
func (mr *MockClientServiceMockRecorder) CreateDerivedLabel(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDerivedLabel", reflect.TypeOf((*MockClientService)(nil).CreateDerivedLabel), varargs...)
}

// CreateDerivedMetric mocks base method.
func (m *MockClientService) CreateDerivedMetric(params *operations.CreateDerivedMetricParams, opts ...operations.ClientOption) (*operations.CreateDerivedMetricOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDerivedMetric", varargs...)
	ret0, _ := ret[0].(*operations.CreateDerivedMetricOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDerivedMetric indicates an expected call of CreateDerivedMetric.
func (mr *MockClientServiceMockRecorder) CreateDerivedMetric(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDerivedMetric", reflect.TypeOf((*MockClientService)(nil).CreateDerivedMetric), varargs...)
}

// CreateDropRule mocks base method.
func (m *MockClientService) CreateDropRule(params *operations.CreateDropRuleParams, opts ...operations.ClientOption) (*operations.CreateDropRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDropRule", varargs...)
	ret0, _ := ret[0].(*operations.CreateDropRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDropRule indicates an expected call of CreateDropRule.
func (mr *MockClientServiceMockRecorder) CreateDropRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDropRule", reflect.TypeOf((*MockClientService)(nil).CreateDropRule), varargs...)
}

// CreateGrafanaDashboard mocks base method.
func (m *MockClientService) CreateGrafanaDashboard(params *operations.CreateGrafanaDashboardParams, opts ...operations.ClientOption) (*operations.CreateGrafanaDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGrafanaDashboard", varargs...)
	ret0, _ := ret[0].(*operations.CreateGrafanaDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGrafanaDashboard indicates an expected call of CreateGrafanaDashboard.
func (mr *MockClientServiceMockRecorder) CreateGrafanaDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGrafanaDashboard", reflect.TypeOf((*MockClientService)(nil).CreateGrafanaDashboard), varargs...)
}

// CreateMappingRule mocks base method.
func (m *MockClientService) CreateMappingRule(params *operations.CreateMappingRuleParams, opts ...operations.ClientOption) (*operations.CreateMappingRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMappingRule", varargs...)
	ret0, _ := ret[0].(*operations.CreateMappingRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMappingRule indicates an expected call of CreateMappingRule.
func (mr *MockClientServiceMockRecorder) CreateMappingRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMappingRule", reflect.TypeOf((*MockClientService)(nil).CreateMappingRule), varargs...)
}

// CreateMonitor mocks base method.
func (m *MockClientService) CreateMonitor(params *operations.CreateMonitorParams, opts ...operations.ClientOption) (*operations.CreateMonitorOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMonitor", varargs...)
	ret0, _ := ret[0].(*operations.CreateMonitorOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitor indicates an expected call of CreateMonitor.
func (mr *MockClientServiceMockRecorder) CreateMonitor(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitor", reflect.TypeOf((*MockClientService)(nil).CreateMonitor), varargs...)
}

// CreateMutingRule mocks base method.
func (m *MockClientService) CreateMutingRule(params *operations.CreateMutingRuleParams, opts ...operations.ClientOption) (*operations.CreateMutingRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMutingRule", varargs...)
	ret0, _ := ret[0].(*operations.CreateMutingRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMutingRule indicates an expected call of CreateMutingRule.
func (mr *MockClientServiceMockRecorder) CreateMutingRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMutingRule", reflect.TypeOf((*MockClientService)(nil).CreateMutingRule), varargs...)
}

// CreateNotificationPolicy mocks base method.
func (m *MockClientService) CreateNotificationPolicy(params *operations.CreateNotificationPolicyParams, opts ...operations.ClientOption) (*operations.CreateNotificationPolicyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNotificationPolicy", varargs...)
	ret0, _ := ret[0].(*operations.CreateNotificationPolicyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotificationPolicy indicates an expected call of CreateNotificationPolicy.
func (mr *MockClientServiceMockRecorder) CreateNotificationPolicy(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotificationPolicy", reflect.TypeOf((*MockClientService)(nil).CreateNotificationPolicy), varargs...)
}

// CreateNotifier mocks base method.
func (m *MockClientService) CreateNotifier(params *operations.CreateNotifierParams, opts ...operations.ClientOption) (*operations.CreateNotifierOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNotifier", varargs...)
	ret0, _ := ret[0].(*operations.CreateNotifierOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotifier indicates an expected call of CreateNotifier.
func (mr *MockClientServiceMockRecorder) CreateNotifier(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotifier", reflect.TypeOf((*MockClientService)(nil).CreateNotifier), varargs...)
}

// CreateRecordingRule mocks base method.
func (m *MockClientService) CreateRecordingRule(params *operations.CreateRecordingRuleParams, opts ...operations.ClientOption) (*operations.CreateRecordingRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRecordingRule", varargs...)
	ret0, _ := ret[0].(*operations.CreateRecordingRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecordingRule indicates an expected call of CreateRecordingRule.
func (mr *MockClientServiceMockRecorder) CreateRecordingRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecordingRule", reflect.TypeOf((*MockClientService)(nil).CreateRecordingRule), varargs...)
}

// CreateResourcePools mocks base method.
func (m *MockClientService) CreateResourcePools(params *operations.CreateResourcePoolsParams, opts ...operations.ClientOption) (*operations.CreateResourcePoolsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResourcePools", varargs...)
	ret0, _ := ret[0].(*operations.CreateResourcePoolsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourcePools indicates an expected call of CreateResourcePools.
func (mr *MockClientServiceMockRecorder) CreateResourcePools(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourcePools", reflect.TypeOf((*MockClientService)(nil).CreateResourcePools), varargs...)
}

// CreateRollupRule mocks base method.
func (m *MockClientService) CreateRollupRule(params *operations.CreateRollupRuleParams, opts ...operations.ClientOption) (*operations.CreateRollupRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRollupRule", varargs...)
	ret0, _ := ret[0].(*operations.CreateRollupRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRollupRule indicates an expected call of CreateRollupRule.
func (mr *MockClientServiceMockRecorder) CreateRollupRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRollupRule", reflect.TypeOf((*MockClientService)(nil).CreateRollupRule), varargs...)
}

// CreateServiceAccount mocks base method.
func (m *MockClientService) CreateServiceAccount(params *operations.CreateServiceAccountParams, opts ...operations.ClientOption) (*operations.CreateServiceAccountOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceAccount", varargs...)
	ret0, _ := ret[0].(*operations.CreateServiceAccountOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAccount indicates an expected call of CreateServiceAccount.
func (mr *MockClientServiceMockRecorder) CreateServiceAccount(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccount", reflect.TypeOf((*MockClientService)(nil).CreateServiceAccount), varargs...)
}

// CreateTeam mocks base method.
func (m *MockClientService) CreateTeam(params *operations.CreateTeamParams, opts ...operations.ClientOption) (*operations.CreateTeamOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTeam", varargs...)
	ret0, _ := ret[0].(*operations.CreateTeamOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockClientServiceMockRecorder) CreateTeam(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockClientService)(nil).CreateTeam), varargs...)
}

// CreateTraceJaegerRemoteSamplingStrategy mocks base method.
func (m *MockClientService) CreateTraceJaegerRemoteSamplingStrategy(params *operations.CreateTraceJaegerRemoteSamplingStrategyParams, opts ...operations.ClientOption) (*operations.CreateTraceJaegerRemoteSamplingStrategyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTraceJaegerRemoteSamplingStrategy", varargs...)
	ret0, _ := ret[0].(*operations.CreateTraceJaegerRemoteSamplingStrategyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTraceJaegerRemoteSamplingStrategy indicates an expected call of CreateTraceJaegerRemoteSamplingStrategy.
func (mr *MockClientServiceMockRecorder) CreateTraceJaegerRemoteSamplingStrategy(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTraceJaegerRemoteSamplingStrategy", reflect.TypeOf((*MockClientService)(nil).CreateTraceJaegerRemoteSamplingStrategy), varargs...)
}

// CreateTraceMetricsRule mocks base method.
func (m *MockClientService) CreateTraceMetricsRule(params *operations.CreateTraceMetricsRuleParams, opts ...operations.ClientOption) (*operations.CreateTraceMetricsRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTraceMetricsRule", varargs...)
	ret0, _ := ret[0].(*operations.CreateTraceMetricsRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTraceMetricsRule indicates an expected call of CreateTraceMetricsRule.
func (mr *MockClientServiceMockRecorder) CreateTraceMetricsRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTraceMetricsRule", reflect.TypeOf((*MockClientService)(nil).CreateTraceMetricsRule), varargs...)
}

// CreateTraceTailSamplingRules mocks base method.
func (m *MockClientService) CreateTraceTailSamplingRules(params *operations.CreateTraceTailSamplingRulesParams, opts ...operations.ClientOption) (*operations.CreateTraceTailSamplingRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTraceTailSamplingRules", varargs...)
	ret0, _ := ret[0].(*operations.CreateTraceTailSamplingRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTraceTailSamplingRules indicates an expected call of CreateTraceTailSamplingRules.
func (mr *MockClientServiceMockRecorder) CreateTraceTailSamplingRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTraceTailSamplingRules", reflect.TypeOf((*MockClientService)(nil).CreateTraceTailSamplingRules), varargs...)
}

// DeleteBucket mocks base method.
func (m *MockClientService) DeleteBucket(params *operations.DeleteBucketParams, opts ...operations.ClientOption) (*operations.DeleteBucketOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucket", varargs...)
	ret0, _ := ret[0].(*operations.DeleteBucketOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucket indicates an expected call of DeleteBucket.
func (mr *MockClientServiceMockRecorder) DeleteBucket(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockClientService)(nil).DeleteBucket), varargs...)
}

// DeleteClassicDashboard mocks base method.
func (m *MockClientService) DeleteClassicDashboard(params *operations.DeleteClassicDashboardParams, opts ...operations.ClientOption) (*operations.DeleteClassicDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClassicDashboard", varargs...)
	ret0, _ := ret[0].(*operations.DeleteClassicDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClassicDashboard indicates an expected call of DeleteClassicDashboard.
func (mr *MockClientServiceMockRecorder) DeleteClassicDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClassicDashboard", reflect.TypeOf((*MockClientService)(nil).DeleteClassicDashboard), varargs...)
}

// DeleteCollection mocks base method.
func (m *MockClientService) DeleteCollection(params *operations.DeleteCollectionParams, opts ...operations.ClientOption) (*operations.DeleteCollectionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCollection", varargs...)
	ret0, _ := ret[0].(*operations.DeleteCollectionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockClientServiceMockRecorder) DeleteCollection(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockClientService)(nil).DeleteCollection), varargs...)
}

// DeleteDashboard mocks base method.
func (m *MockClientService) DeleteDashboard(params *operations.DeleteDashboardParams, opts ...operations.ClientOption) (*operations.DeleteDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDashboard", varargs...)
	ret0, _ := ret[0].(*operations.DeleteDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDashboard indicates an expected call of DeleteDashboard.
func (mr *MockClientServiceMockRecorder) DeleteDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboard", reflect.TypeOf((*MockClientService)(nil).DeleteDashboard), varargs...)
}

// DeleteDataset mocks base method.
func (m *MockClientService) DeleteDataset(params *operations.DeleteDatasetParams, opts ...operations.ClientOption) (*operations.DeleteDatasetOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataset", varargs...)
	ret0, _ := ret[0].(*operations.DeleteDatasetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockClientServiceMockRecorder) DeleteDataset(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockClientService)(nil).DeleteDataset), varargs...)
}

// DeleteDerivedLabel mocks base method.
func (m *MockClientService) DeleteDerivedLabel(params *operations.DeleteDerivedLabelParams, opts ...operations.ClientOption) (*operations.DeleteDerivedLabelOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDerivedLabel", varargs...)
	ret0, _ := ret[0].(*operations.DeleteDerivedLabelOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDerivedLabel indicates an expected call of DeleteDerivedLabel.
func (mr *MockClientServiceMockRecorder) DeleteDerivedLabel(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDerivedLabel", reflect.TypeOf((*MockClientService)(nil).DeleteDerivedLabel), varargs...)
}

// DeleteDerivedMetric mocks base method.
func (m *MockClientService) DeleteDerivedMetric(params *operations.DeleteDerivedMetricParams, opts ...operations.ClientOption) (*operations.DeleteDerivedMetricOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDerivedMetric", varargs...)
	ret0, _ := ret[0].(*operations.DeleteDerivedMetricOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDerivedMetric indicates an expected call of DeleteDerivedMetric.
func (mr *MockClientServiceMockRecorder) DeleteDerivedMetric(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDerivedMetric", reflect.TypeOf((*MockClientService)(nil).DeleteDerivedMetric), varargs...)
}

// DeleteDropRule mocks base method.
func (m *MockClientService) DeleteDropRule(params *operations.DeleteDropRuleParams, opts ...operations.ClientOption) (*operations.DeleteDropRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDropRule", varargs...)
	ret0, _ := ret[0].(*operations.DeleteDropRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDropRule indicates an expected call of DeleteDropRule.
func (mr *MockClientServiceMockRecorder) DeleteDropRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDropRule", reflect.TypeOf((*MockClientService)(nil).DeleteDropRule), varargs...)
}

// DeleteGrafanaDashboard mocks base method.
func (m *MockClientService) DeleteGrafanaDashboard(params *operations.DeleteGrafanaDashboardParams, opts ...operations.ClientOption) (*operations.DeleteGrafanaDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGrafanaDashboard", varargs...)
	ret0, _ := ret[0].(*operations.DeleteGrafanaDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGrafanaDashboard indicates an expected call of DeleteGrafanaDashboard.
func (mr *MockClientServiceMockRecorder) DeleteGrafanaDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGrafanaDashboard", reflect.TypeOf((*MockClientService)(nil).DeleteGrafanaDashboard), varargs...)
}

// DeleteMappingRule mocks base method.
func (m *MockClientService) DeleteMappingRule(params *operations.DeleteMappingRuleParams, opts ...operations.ClientOption) (*operations.DeleteMappingRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMappingRule", varargs...)
	ret0, _ := ret[0].(*operations.DeleteMappingRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMappingRule indicates an expected call of DeleteMappingRule.
func (mr *MockClientServiceMockRecorder) DeleteMappingRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMappingRule", reflect.TypeOf((*MockClientService)(nil).DeleteMappingRule), varargs...)
}

// DeleteMonitor mocks base method.
func (m *MockClientService) DeleteMonitor(params *operations.DeleteMonitorParams, opts ...operations.ClientOption) (*operations.DeleteMonitorOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMonitor", varargs...)
	ret0, _ := ret[0].(*operations.DeleteMonitorOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMonitor indicates an expected call of DeleteMonitor.
func (mr *MockClientServiceMockRecorder) DeleteMonitor(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitor", reflect.TypeOf((*MockClientService)(nil).DeleteMonitor), varargs...)
}

// DeleteMutingRule mocks base method.
func (m *MockClientService) DeleteMutingRule(params *operations.DeleteMutingRuleParams, opts ...operations.ClientOption) (*operations.DeleteMutingRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMutingRule", varargs...)
	ret0, _ := ret[0].(*operations.DeleteMutingRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMutingRule indicates an expected call of DeleteMutingRule.
func (mr *MockClientServiceMockRecorder) DeleteMutingRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMutingRule", reflect.TypeOf((*MockClientService)(nil).DeleteMutingRule), varargs...)
}

// DeleteNotificationPolicy mocks base method.
func (m *MockClientService) DeleteNotificationPolicy(params *operations.DeleteNotificationPolicyParams, opts ...operations.ClientOption) (*operations.DeleteNotificationPolicyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNotificationPolicy", varargs...)
	ret0, _ := ret[0].(*operations.DeleteNotificationPolicyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotificationPolicy indicates an expected call of DeleteNotificationPolicy.
func (mr *MockClientServiceMockRecorder) DeleteNotificationPolicy(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotificationPolicy", reflect.TypeOf((*MockClientService)(nil).DeleteNotificationPolicy), varargs...)
}

// DeleteNotifier mocks base method.
func (m *MockClientService) DeleteNotifier(params *operations.DeleteNotifierParams, opts ...operations.ClientOption) (*operations.DeleteNotifierOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNotifier", varargs...)
	ret0, _ := ret[0].(*operations.DeleteNotifierOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotifier indicates an expected call of DeleteNotifier.
func (mr *MockClientServiceMockRecorder) DeleteNotifier(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotifier", reflect.TypeOf((*MockClientService)(nil).DeleteNotifier), varargs...)
}

// DeleteRecordingRule mocks base method.
func (m *MockClientService) DeleteRecordingRule(params *operations.DeleteRecordingRuleParams, opts ...operations.ClientOption) (*operations.DeleteRecordingRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRecordingRule", varargs...)
	ret0, _ := ret[0].(*operations.DeleteRecordingRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecordingRule indicates an expected call of DeleteRecordingRule.
func (mr *MockClientServiceMockRecorder) DeleteRecordingRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecordingRule", reflect.TypeOf((*MockClientService)(nil).DeleteRecordingRule), varargs...)
}

// DeleteResourcePools mocks base method.
func (m *MockClientService) DeleteResourcePools(params *operations.DeleteResourcePoolsParams, opts ...operations.ClientOption) (*operations.DeleteResourcePoolsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePools", varargs...)
	ret0, _ := ret[0].(*operations.DeleteResourcePoolsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePools indicates an expected call of DeleteResourcePools.
func (mr *MockClientServiceMockRecorder) DeleteResourcePools(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePools", reflect.TypeOf((*MockClientService)(nil).DeleteResourcePools), varargs...)
}

// DeleteRollupRule mocks base method.
func (m *MockClientService) DeleteRollupRule(params *operations.DeleteRollupRuleParams, opts ...operations.ClientOption) (*operations.DeleteRollupRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRollupRule", varargs...)
	ret0, _ := ret[0].(*operations.DeleteRollupRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRollupRule indicates an expected call of DeleteRollupRule.
func (mr *MockClientServiceMockRecorder) DeleteRollupRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRollupRule", reflect.TypeOf((*MockClientService)(nil).DeleteRollupRule), varargs...)
}

// DeleteServiceAccount mocks base method.
func (m *MockClientService) DeleteServiceAccount(params *operations.DeleteServiceAccountParams, opts ...operations.ClientOption) (*operations.DeleteServiceAccountOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceAccount", varargs...)
	ret0, _ := ret[0].(*operations.DeleteServiceAccountOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockClientServiceMockRecorder) DeleteServiceAccount(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockClientService)(nil).DeleteServiceAccount), varargs...)
}

// DeleteTeam mocks base method.
func (m *MockClientService) DeleteTeam(params *operations.DeleteTeamParams, opts ...operations.ClientOption) (*operations.DeleteTeamOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTeam", varargs...)
	ret0, _ := ret[0].(*operations.DeleteTeamOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockClientServiceMockRecorder) DeleteTeam(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockClientService)(nil).DeleteTeam), varargs...)
}

// DeleteTraceJaegerRemoteSamplingStrategy mocks base method.
func (m *MockClientService) DeleteTraceJaegerRemoteSamplingStrategy(params *operations.DeleteTraceJaegerRemoteSamplingStrategyParams, opts ...operations.ClientOption) (*operations.DeleteTraceJaegerRemoteSamplingStrategyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTraceJaegerRemoteSamplingStrategy", varargs...)
	ret0, _ := ret[0].(*operations.DeleteTraceJaegerRemoteSamplingStrategyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTraceJaegerRemoteSamplingStrategy indicates an expected call of DeleteTraceJaegerRemoteSamplingStrategy.
func (mr *MockClientServiceMockRecorder) DeleteTraceJaegerRemoteSamplingStrategy(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTraceJaegerRemoteSamplingStrategy", reflect.TypeOf((*MockClientService)(nil).DeleteTraceJaegerRemoteSamplingStrategy), varargs...)
}

// DeleteTraceMetricsRule mocks base method.
func (m *MockClientService) DeleteTraceMetricsRule(params *operations.DeleteTraceMetricsRuleParams, opts ...operations.ClientOption) (*operations.DeleteTraceMetricsRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTraceMetricsRule", varargs...)
	ret0, _ := ret[0].(*operations.DeleteTraceMetricsRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTraceMetricsRule indicates an expected call of DeleteTraceMetricsRule.
func (mr *MockClientServiceMockRecorder) DeleteTraceMetricsRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTraceMetricsRule", reflect.TypeOf((*MockClientService)(nil).DeleteTraceMetricsRule), varargs...)
}

// DeleteTraceTailSamplingRules mocks base method.
func (m *MockClientService) DeleteTraceTailSamplingRules(params *operations.DeleteTraceTailSamplingRulesParams, opts ...operations.ClientOption) (*operations.DeleteTraceTailSamplingRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTraceTailSamplingRules", varargs...)
	ret0, _ := ret[0].(*operations.DeleteTraceTailSamplingRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTraceTailSamplingRules indicates an expected call of DeleteTraceTailSamplingRules.
func (mr *MockClientServiceMockRecorder) DeleteTraceTailSamplingRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTraceTailSamplingRules", reflect.TypeOf((*MockClientService)(nil).DeleteTraceTailSamplingRules), varargs...)
}

// ListBuckets mocks base method.
func (m *MockClientService) ListBuckets(params *operations.ListBucketsParams, opts ...operations.ClientOption) (*operations.ListBucketsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuckets", varargs...)
	ret0, _ := ret[0].(*operations.ListBucketsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuckets indicates an expected call of ListBuckets.
func (mr *MockClientServiceMockRecorder) ListBuckets(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuckets", reflect.TypeOf((*MockClientService)(nil).ListBuckets), varargs...)
}

// ListClassicDashboards mocks base method.
func (m *MockClientService) ListClassicDashboards(params *operations.ListClassicDashboardsParams, opts ...operations.ClientOption) (*operations.ListClassicDashboardsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClassicDashboards", varargs...)
	ret0, _ := ret[0].(*operations.ListClassicDashboardsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClassicDashboards indicates an expected call of ListClassicDashboards.
func (mr *MockClientServiceMockRecorder) ListClassicDashboards(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClassicDashboards", reflect.TypeOf((*MockClientService)(nil).ListClassicDashboards), varargs...)
}

// ListCollections mocks base method.
func (m *MockClientService) ListCollections(params *operations.ListCollectionsParams, opts ...operations.ClientOption) (*operations.ListCollectionsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollections", varargs...)
	ret0, _ := ret[0].(*operations.ListCollectionsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollections indicates an expected call of ListCollections.
func (mr *MockClientServiceMockRecorder) ListCollections(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollections", reflect.TypeOf((*MockClientService)(nil).ListCollections), varargs...)
}

// ListDashboards mocks base method.
func (m *MockClientService) ListDashboards(params *operations.ListDashboardsParams, opts ...operations.ClientOption) (*operations.ListDashboardsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDashboards", varargs...)
	ret0, _ := ret[0].(*operations.ListDashboardsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDashboards indicates an expected call of ListDashboards.
func (mr *MockClientServiceMockRecorder) ListDashboards(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDashboards", reflect.TypeOf((*MockClientService)(nil).ListDashboards), varargs...)
}

// ListDatasets mocks base method.
func (m *MockClientService) ListDatasets(params *operations.ListDatasetsParams, opts ...operations.ClientOption) (*operations.ListDatasetsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasets", varargs...)
	ret0, _ := ret[0].(*operations.ListDatasetsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasets indicates an expected call of ListDatasets.
func (mr *MockClientServiceMockRecorder) ListDatasets(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockClientService)(nil).ListDatasets), varargs...)
}

// ListDerivedLabels mocks base method.
func (m *MockClientService) ListDerivedLabels(params *operations.ListDerivedLabelsParams, opts ...operations.ClientOption) (*operations.ListDerivedLabelsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDerivedLabels", varargs...)
	ret0, _ := ret[0].(*operations.ListDerivedLabelsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDerivedLabels indicates an expected call of ListDerivedLabels.
func (mr *MockClientServiceMockRecorder) ListDerivedLabels(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDerivedLabels", reflect.TypeOf((*MockClientService)(nil).ListDerivedLabels), varargs...)
}

// ListDerivedMetrics mocks base method.
func (m *MockClientService) ListDerivedMetrics(params *operations.ListDerivedMetricsParams, opts ...operations.ClientOption) (*operations.ListDerivedMetricsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDerivedMetrics", varargs...)
	ret0, _ := ret[0].(*operations.ListDerivedMetricsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDerivedMetrics indicates an expected call of ListDerivedMetrics.
func (mr *MockClientServiceMockRecorder) ListDerivedMetrics(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDerivedMetrics", reflect.TypeOf((*MockClientService)(nil).ListDerivedMetrics), varargs...)
}

// ListDropRules mocks base method.
func (m *MockClientService) ListDropRules(params *operations.ListDropRulesParams, opts ...operations.ClientOption) (*operations.ListDropRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDropRules", varargs...)
	ret0, _ := ret[0].(*operations.ListDropRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDropRules indicates an expected call of ListDropRules.
func (mr *MockClientServiceMockRecorder) ListDropRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDropRules", reflect.TypeOf((*MockClientService)(nil).ListDropRules), varargs...)
}

// ListGrafanaDashboards mocks base method.
func (m *MockClientService) ListGrafanaDashboards(params *operations.ListGrafanaDashboardsParams, opts ...operations.ClientOption) (*operations.ListGrafanaDashboardsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGrafanaDashboards", varargs...)
	ret0, _ := ret[0].(*operations.ListGrafanaDashboardsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGrafanaDashboards indicates an expected call of ListGrafanaDashboards.
func (mr *MockClientServiceMockRecorder) ListGrafanaDashboards(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGrafanaDashboards", reflect.TypeOf((*MockClientService)(nil).ListGrafanaDashboards), varargs...)
}

// ListMappingRules mocks base method.
func (m *MockClientService) ListMappingRules(params *operations.ListMappingRulesParams, opts ...operations.ClientOption) (*operations.ListMappingRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMappingRules", varargs...)
	ret0, _ := ret[0].(*operations.ListMappingRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMappingRules indicates an expected call of ListMappingRules.
func (mr *MockClientServiceMockRecorder) ListMappingRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMappingRules", reflect.TypeOf((*MockClientService)(nil).ListMappingRules), varargs...)
}

// ListMonitors mocks base method.
func (m *MockClientService) ListMonitors(params *operations.ListMonitorsParams, opts ...operations.ClientOption) (*operations.ListMonitorsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMonitors", varargs...)
	ret0, _ := ret[0].(*operations.ListMonitorsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitors indicates an expected call of ListMonitors.
func (mr *MockClientServiceMockRecorder) ListMonitors(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitors", reflect.TypeOf((*MockClientService)(nil).ListMonitors), varargs...)
}

// ListMutingRules mocks base method.
func (m *MockClientService) ListMutingRules(params *operations.ListMutingRulesParams, opts ...operations.ClientOption) (*operations.ListMutingRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMutingRules", varargs...)
	ret0, _ := ret[0].(*operations.ListMutingRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMutingRules indicates an expected call of ListMutingRules.
func (mr *MockClientServiceMockRecorder) ListMutingRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMutingRules", reflect.TypeOf((*MockClientService)(nil).ListMutingRules), varargs...)
}

// ListNotificationPolicies mocks base method.
func (m *MockClientService) ListNotificationPolicies(params *operations.ListNotificationPoliciesParams, opts ...operations.ClientOption) (*operations.ListNotificationPoliciesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotificationPolicies", varargs...)
	ret0, _ := ret[0].(*operations.ListNotificationPoliciesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotificationPolicies indicates an expected call of ListNotificationPolicies.
func (mr *MockClientServiceMockRecorder) ListNotificationPolicies(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationPolicies", reflect.TypeOf((*MockClientService)(nil).ListNotificationPolicies), varargs...)
}

// ListNotifiers mocks base method.
func (m *MockClientService) ListNotifiers(params *operations.ListNotifiersParams, opts ...operations.ClientOption) (*operations.ListNotifiersOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotifiers", varargs...)
	ret0, _ := ret[0].(*operations.ListNotifiersOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotifiers indicates an expected call of ListNotifiers.
func (mr *MockClientServiceMockRecorder) ListNotifiers(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifiers", reflect.TypeOf((*MockClientService)(nil).ListNotifiers), varargs...)
}

// ListRecordingRules mocks base method.
func (m *MockClientService) ListRecordingRules(params *operations.ListRecordingRulesParams, opts ...operations.ClientOption) (*operations.ListRecordingRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecordingRules", varargs...)
	ret0, _ := ret[0].(*operations.ListRecordingRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecordingRules indicates an expected call of ListRecordingRules.
func (mr *MockClientServiceMockRecorder) ListRecordingRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordingRules", reflect.TypeOf((*MockClientService)(nil).ListRecordingRules), varargs...)
}

// ListRollupRules mocks base method.
func (m *MockClientService) ListRollupRules(params *operations.ListRollupRulesParams, opts ...operations.ClientOption) (*operations.ListRollupRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRollupRules", varargs...)
	ret0, _ := ret[0].(*operations.ListRollupRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRollupRules indicates an expected call of ListRollupRules.
func (mr *MockClientServiceMockRecorder) ListRollupRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRollupRules", reflect.TypeOf((*MockClientService)(nil).ListRollupRules), varargs...)
}

// ListServiceAccounts mocks base method.
func (m *MockClientService) ListServiceAccounts(params *operations.ListServiceAccountsParams, opts ...operations.ClientOption) (*operations.ListServiceAccountsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceAccounts", varargs...)
	ret0, _ := ret[0].(*operations.ListServiceAccountsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceAccounts indicates an expected call of ListServiceAccounts.
func (mr *MockClientServiceMockRecorder) ListServiceAccounts(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceAccounts", reflect.TypeOf((*MockClientService)(nil).ListServiceAccounts), varargs...)
}

// ListTeams mocks base method.
func (m *MockClientService) ListTeams(params *operations.ListTeamsParams, opts ...operations.ClientOption) (*operations.ListTeamsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTeams", varargs...)
	ret0, _ := ret[0].(*operations.ListTeamsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockClientServiceMockRecorder) ListTeams(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockClientService)(nil).ListTeams), varargs...)
}

// ListTraceJaegerRemoteSamplingStrategies mocks base method.
func (m *MockClientService) ListTraceJaegerRemoteSamplingStrategies(params *operations.ListTraceJaegerRemoteSamplingStrategiesParams, opts ...operations.ClientOption) (*operations.ListTraceJaegerRemoteSamplingStrategiesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTraceJaegerRemoteSamplingStrategies", varargs...)
	ret0, _ := ret[0].(*operations.ListTraceJaegerRemoteSamplingStrategiesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTraceJaegerRemoteSamplingStrategies indicates an expected call of ListTraceJaegerRemoteSamplingStrategies.
func (mr *MockClientServiceMockRecorder) ListTraceJaegerRemoteSamplingStrategies(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTraceJaegerRemoteSamplingStrategies", reflect.TypeOf((*MockClientService)(nil).ListTraceJaegerRemoteSamplingStrategies), varargs...)
}

// ListTraceMetricsRules mocks base method.
func (m *MockClientService) ListTraceMetricsRules(params *operations.ListTraceMetricsRulesParams, opts ...operations.ClientOption) (*operations.ListTraceMetricsRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTraceMetricsRules", varargs...)
	ret0, _ := ret[0].(*operations.ListTraceMetricsRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTraceMetricsRules indicates an expected call of ListTraceMetricsRules.
func (mr *MockClientServiceMockRecorder) ListTraceMetricsRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTraceMetricsRules", reflect.TypeOf((*MockClientService)(nil).ListTraceMetricsRules), varargs...)
}

// ReadBucket mocks base method.
func (m *MockClientService) ReadBucket(params *operations.ReadBucketParams, opts ...operations.ClientOption) (*operations.ReadBucketOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadBucket", varargs...)
	ret0, _ := ret[0].(*operations.ReadBucketOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBucket indicates an expected call of ReadBucket.
func (mr *MockClientServiceMockRecorder) ReadBucket(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBucket", reflect.TypeOf((*MockClientService)(nil).ReadBucket), varargs...)
}

// ReadClassicDashboard mocks base method.
func (m *MockClientService) ReadClassicDashboard(params *operations.ReadClassicDashboardParams, opts ...operations.ClientOption) (*operations.ReadClassicDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadClassicDashboard", varargs...)
	ret0, _ := ret[0].(*operations.ReadClassicDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadClassicDashboard indicates an expected call of ReadClassicDashboard.
func (mr *MockClientServiceMockRecorder) ReadClassicDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadClassicDashboard", reflect.TypeOf((*MockClientService)(nil).ReadClassicDashboard), varargs...)
}

// ReadCollection mocks base method.
func (m *MockClientService) ReadCollection(params *operations.ReadCollectionParams, opts ...operations.ClientOption) (*operations.ReadCollectionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadCollection", varargs...)
	ret0, _ := ret[0].(*operations.ReadCollectionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCollection indicates an expected call of ReadCollection.
func (mr *MockClientServiceMockRecorder) ReadCollection(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCollection", reflect.TypeOf((*MockClientService)(nil).ReadCollection), varargs...)
}

// ReadDashboard mocks base method.
func (m *MockClientService) ReadDashboard(params *operations.ReadDashboardParams, opts ...operations.ClientOption) (*operations.ReadDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadDashboard", varargs...)
	ret0, _ := ret[0].(*operations.ReadDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDashboard indicates an expected call of ReadDashboard.
func (mr *MockClientServiceMockRecorder) ReadDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDashboard", reflect.TypeOf((*MockClientService)(nil).ReadDashboard), varargs...)
}

// ReadDataset mocks base method.
func (m *MockClientService) ReadDataset(params *operations.ReadDatasetParams, opts ...operations.ClientOption) (*operations.ReadDatasetOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadDataset", varargs...)
	ret0, _ := ret[0].(*operations.ReadDatasetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDataset indicates an expected call of ReadDataset.
func (mr *MockClientServiceMockRecorder) ReadDataset(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDataset", reflect.TypeOf((*MockClientService)(nil).ReadDataset), varargs...)
}

// ReadDerivedLabel mocks base method.
func (m *MockClientService) ReadDerivedLabel(params *operations.ReadDerivedLabelParams, opts ...operations.ClientOption) (*operations.ReadDerivedLabelOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadDerivedLabel", varargs...)
	ret0, _ := ret[0].(*operations.ReadDerivedLabelOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDerivedLabel indicates an expected call of ReadDerivedLabel.
func (mr *MockClientServiceMockRecorder) ReadDerivedLabel(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDerivedLabel", reflect.TypeOf((*MockClientService)(nil).ReadDerivedLabel), varargs...)
}

// ReadDerivedMetric mocks base method.
func (m *MockClientService) ReadDerivedMetric(params *operations.ReadDerivedMetricParams, opts ...operations.ClientOption) (*operations.ReadDerivedMetricOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadDerivedMetric", varargs...)
	ret0, _ := ret[0].(*operations.ReadDerivedMetricOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDerivedMetric indicates an expected call of ReadDerivedMetric.
func (mr *MockClientServiceMockRecorder) ReadDerivedMetric(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDerivedMetric", reflect.TypeOf((*MockClientService)(nil).ReadDerivedMetric), varargs...)
}

// ReadDropRule mocks base method.
func (m *MockClientService) ReadDropRule(params *operations.ReadDropRuleParams, opts ...operations.ClientOption) (*operations.ReadDropRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadDropRule", varargs...)
	ret0, _ := ret[0].(*operations.ReadDropRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDropRule indicates an expected call of ReadDropRule.
func (mr *MockClientServiceMockRecorder) ReadDropRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDropRule", reflect.TypeOf((*MockClientService)(nil).ReadDropRule), varargs...)
}

// ReadGrafanaDashboard mocks base method.
func (m *MockClientService) ReadGrafanaDashboard(params *operations.ReadGrafanaDashboardParams, opts ...operations.ClientOption) (*operations.ReadGrafanaDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadGrafanaDashboard", varargs...)
	ret0, _ := ret[0].(*operations.ReadGrafanaDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGrafanaDashboard indicates an expected call of ReadGrafanaDashboard.
func (mr *MockClientServiceMockRecorder) ReadGrafanaDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGrafanaDashboard", reflect.TypeOf((*MockClientService)(nil).ReadGrafanaDashboard), varargs...)
}

// ReadMappingRule mocks base method.
func (m *MockClientService) ReadMappingRule(params *operations.ReadMappingRuleParams, opts ...operations.ClientOption) (*operations.ReadMappingRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadMappingRule", varargs...)
	ret0, _ := ret[0].(*operations.ReadMappingRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMappingRule indicates an expected call of ReadMappingRule.
func (mr *MockClientServiceMockRecorder) ReadMappingRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMappingRule", reflect.TypeOf((*MockClientService)(nil).ReadMappingRule), varargs...)
}

// ReadMonitor mocks base method.
func (m *MockClientService) ReadMonitor(params *operations.ReadMonitorParams, opts ...operations.ClientOption) (*operations.ReadMonitorOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadMonitor", varargs...)
	ret0, _ := ret[0].(*operations.ReadMonitorOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMonitor indicates an expected call of ReadMonitor.
func (mr *MockClientServiceMockRecorder) ReadMonitor(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMonitor", reflect.TypeOf((*MockClientService)(nil).ReadMonitor), varargs...)
}

// ReadMutingRule mocks base method.
func (m *MockClientService) ReadMutingRule(params *operations.ReadMutingRuleParams, opts ...operations.ClientOption) (*operations.ReadMutingRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadMutingRule", varargs...)
	ret0, _ := ret[0].(*operations.ReadMutingRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMutingRule indicates an expected call of ReadMutingRule.
func (mr *MockClientServiceMockRecorder) ReadMutingRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMutingRule", reflect.TypeOf((*MockClientService)(nil).ReadMutingRule), varargs...)
}

// ReadNotificationPolicy mocks base method.
func (m *MockClientService) ReadNotificationPolicy(params *operations.ReadNotificationPolicyParams, opts ...operations.ClientOption) (*operations.ReadNotificationPolicyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadNotificationPolicy", varargs...)
	ret0, _ := ret[0].(*operations.ReadNotificationPolicyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNotificationPolicy indicates an expected call of ReadNotificationPolicy.
func (mr *MockClientServiceMockRecorder) ReadNotificationPolicy(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNotificationPolicy", reflect.TypeOf((*MockClientService)(nil).ReadNotificationPolicy), varargs...)
}

// ReadNotifier mocks base method.
func (m *MockClientService) ReadNotifier(params *operations.ReadNotifierParams, opts ...operations.ClientOption) (*operations.ReadNotifierOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadNotifier", varargs...)
	ret0, _ := ret[0].(*operations.ReadNotifierOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNotifier indicates an expected call of ReadNotifier.
func (mr *MockClientServiceMockRecorder) ReadNotifier(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNotifier", reflect.TypeOf((*MockClientService)(nil).ReadNotifier), varargs...)
}

// ReadRecordingRule mocks base method.
func (m *MockClientService) ReadRecordingRule(params *operations.ReadRecordingRuleParams, opts ...operations.ClientOption) (*operations.ReadRecordingRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadRecordingRule", varargs...)
	ret0, _ := ret[0].(*operations.ReadRecordingRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRecordingRule indicates an expected call of ReadRecordingRule.
func (mr *MockClientServiceMockRecorder) ReadRecordingRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRecordingRule", reflect.TypeOf((*MockClientService)(nil).ReadRecordingRule), varargs...)
}

// ReadResourcePools mocks base method.
func (m *MockClientService) ReadResourcePools(params *operations.ReadResourcePoolsParams, opts ...operations.ClientOption) (*operations.ReadResourcePoolsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadResourcePools", varargs...)
	ret0, _ := ret[0].(*operations.ReadResourcePoolsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadResourcePools indicates an expected call of ReadResourcePools.
func (mr *MockClientServiceMockRecorder) ReadResourcePools(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadResourcePools", reflect.TypeOf((*MockClientService)(nil).ReadResourcePools), varargs...)
}

// ReadRollupRule mocks base method.
func (m *MockClientService) ReadRollupRule(params *operations.ReadRollupRuleParams, opts ...operations.ClientOption) (*operations.ReadRollupRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadRollupRule", varargs...)
	ret0, _ := ret[0].(*operations.ReadRollupRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRollupRule indicates an expected call of ReadRollupRule.
func (mr *MockClientServiceMockRecorder) ReadRollupRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRollupRule", reflect.TypeOf((*MockClientService)(nil).ReadRollupRule), varargs...)
}

// ReadService mocks base method.
func (m *MockClientService) ReadService(params *operations.ReadServiceParams, opts ...operations.ClientOption) (*operations.ReadServiceOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadService", varargs...)
	ret0, _ := ret[0].(*operations.ReadServiceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadService indicates an expected call of ReadService.
func (mr *MockClientServiceMockRecorder) ReadService(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadService", reflect.TypeOf((*MockClientService)(nil).ReadService), varargs...)
}

// ReadServiceAccount mocks base method.
func (m *MockClientService) ReadServiceAccount(params *operations.ReadServiceAccountParams, opts ...operations.ClientOption) (*operations.ReadServiceAccountOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadServiceAccount", varargs...)
	ret0, _ := ret[0].(*operations.ReadServiceAccountOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceAccount indicates an expected call of ReadServiceAccount.
func (mr *MockClientServiceMockRecorder) ReadServiceAccount(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceAccount", reflect.TypeOf((*MockClientService)(nil).ReadServiceAccount), varargs...)
}

// ReadTeam mocks base method.
func (m *MockClientService) ReadTeam(params *operations.ReadTeamParams, opts ...operations.ClientOption) (*operations.ReadTeamOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadTeam", varargs...)
	ret0, _ := ret[0].(*operations.ReadTeamOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTeam indicates an expected call of ReadTeam.
func (mr *MockClientServiceMockRecorder) ReadTeam(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTeam", reflect.TypeOf((*MockClientService)(nil).ReadTeam), varargs...)
}

// ReadTraceJaegerRemoteSamplingStrategy mocks base method.
func (m *MockClientService) ReadTraceJaegerRemoteSamplingStrategy(params *operations.ReadTraceJaegerRemoteSamplingStrategyParams, opts ...operations.ClientOption) (*operations.ReadTraceJaegerRemoteSamplingStrategyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadTraceJaegerRemoteSamplingStrategy", varargs...)
	ret0, _ := ret[0].(*operations.ReadTraceJaegerRemoteSamplingStrategyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTraceJaegerRemoteSamplingStrategy indicates an expected call of ReadTraceJaegerRemoteSamplingStrategy.
func (mr *MockClientServiceMockRecorder) ReadTraceJaegerRemoteSamplingStrategy(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTraceJaegerRemoteSamplingStrategy", reflect.TypeOf((*MockClientService)(nil).ReadTraceJaegerRemoteSamplingStrategy), varargs...)
}

// ReadTraceMetricsRule mocks base method.
func (m *MockClientService) ReadTraceMetricsRule(params *operations.ReadTraceMetricsRuleParams, opts ...operations.ClientOption) (*operations.ReadTraceMetricsRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadTraceMetricsRule", varargs...)
	ret0, _ := ret[0].(*operations.ReadTraceMetricsRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTraceMetricsRule indicates an expected call of ReadTraceMetricsRule.
func (mr *MockClientServiceMockRecorder) ReadTraceMetricsRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTraceMetricsRule", reflect.TypeOf((*MockClientService)(nil).ReadTraceMetricsRule), varargs...)
}

// ReadTraceTailSamplingRules mocks base method.
func (m *MockClientService) ReadTraceTailSamplingRules(params *operations.ReadTraceTailSamplingRulesParams, opts ...operations.ClientOption) (*operations.ReadTraceTailSamplingRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadTraceTailSamplingRules", varargs...)
	ret0, _ := ret[0].(*operations.ReadTraceTailSamplingRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTraceTailSamplingRules indicates an expected call of ReadTraceTailSamplingRules.
func (mr *MockClientServiceMockRecorder) ReadTraceTailSamplingRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTraceTailSamplingRules", reflect.TypeOf((*MockClientService)(nil).ReadTraceTailSamplingRules), varargs...)
}

// SetTransport mocks base method.
func (m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", transport)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockClientServiceMockRecorder) SetTransport(transport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), transport)
}

// UpdateBucket mocks base method.
func (m *MockClientService) UpdateBucket(params *operations.UpdateBucketParams, opts ...operations.ClientOption) (*operations.UpdateBucketOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBucket", varargs...)
	ret0, _ := ret[0].(*operations.UpdateBucketOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBucket indicates an expected call of UpdateBucket.
func (mr *MockClientServiceMockRecorder) UpdateBucket(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBucket", reflect.TypeOf((*MockClientService)(nil).UpdateBucket), varargs...)
}

// UpdateClassicDashboard mocks base method.
func (m *MockClientService) UpdateClassicDashboard(params *operations.UpdateClassicDashboardParams, opts ...operations.ClientOption) (*operations.UpdateClassicDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClassicDashboard", varargs...)
	ret0, _ := ret[0].(*operations.UpdateClassicDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClassicDashboard indicates an expected call of UpdateClassicDashboard.
func (mr *MockClientServiceMockRecorder) UpdateClassicDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassicDashboard", reflect.TypeOf((*MockClientService)(nil).UpdateClassicDashboard), varargs...)
}

// UpdateCollection mocks base method.
func (m *MockClientService) UpdateCollection(params *operations.UpdateCollectionParams, opts ...operations.ClientOption) (*operations.UpdateCollectionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCollection", varargs...)
	ret0, _ := ret[0].(*operations.UpdateCollectionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCollection indicates an expected call of UpdateCollection.
func (mr *MockClientServiceMockRecorder) UpdateCollection(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollection", reflect.TypeOf((*MockClientService)(nil).UpdateCollection), varargs...)
}

// UpdateDashboard mocks base method.
func (m *MockClientService) UpdateDashboard(params *operations.UpdateDashboardParams, opts ...operations.ClientOption) (*operations.UpdateDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDashboard", varargs...)
	ret0, _ := ret[0].(*operations.UpdateDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDashboard indicates an expected call of UpdateDashboard.
func (mr *MockClientServiceMockRecorder) UpdateDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDashboard", reflect.TypeOf((*MockClientService)(nil).UpdateDashboard), varargs...)
}

// UpdateDataset mocks base method.
func (m *MockClientService) UpdateDataset(params *operations.UpdateDatasetParams, opts ...operations.ClientOption) (*operations.UpdateDatasetOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataset", varargs...)
	ret0, _ := ret[0].(*operations.UpdateDatasetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataset indicates an expected call of UpdateDataset.
func (mr *MockClientServiceMockRecorder) UpdateDataset(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataset", reflect.TypeOf((*MockClientService)(nil).UpdateDataset), varargs...)
}

// UpdateDerivedLabel mocks base method.
func (m *MockClientService) UpdateDerivedLabel(params *operations.UpdateDerivedLabelParams, opts ...operations.ClientOption) (*operations.UpdateDerivedLabelOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDerivedLabel", varargs...)
	ret0, _ := ret[0].(*operations.UpdateDerivedLabelOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDerivedLabel indicates an expected call of UpdateDerivedLabel.
func (mr *MockClientServiceMockRecorder) UpdateDerivedLabel(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDerivedLabel", reflect.TypeOf((*MockClientService)(nil).UpdateDerivedLabel), varargs...)
}

// UpdateDerivedMetric mocks base method.
func (m *MockClientService) UpdateDerivedMetric(params *operations.UpdateDerivedMetricParams, opts ...operations.ClientOption) (*operations.UpdateDerivedMetricOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDerivedMetric", varargs...)
	ret0, _ := ret[0].(*operations.UpdateDerivedMetricOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDerivedMetric indicates an expected call of UpdateDerivedMetric.
func (mr *MockClientServiceMockRecorder) UpdateDerivedMetric(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDerivedMetric", reflect.TypeOf((*MockClientService)(nil).UpdateDerivedMetric), varargs...)
}

// UpdateDropRule mocks base method.
func (m *MockClientService) UpdateDropRule(params *operations.UpdateDropRuleParams, opts ...operations.ClientOption) (*operations.UpdateDropRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDropRule", varargs...)
	ret0, _ := ret[0].(*operations.UpdateDropRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDropRule indicates an expected call of UpdateDropRule.
func (mr *MockClientServiceMockRecorder) UpdateDropRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDropRule", reflect.TypeOf((*MockClientService)(nil).UpdateDropRule), varargs...)
}

// UpdateGrafanaDashboard mocks base method.
func (m *MockClientService) UpdateGrafanaDashboard(params *operations.UpdateGrafanaDashboardParams, opts ...operations.ClientOption) (*operations.UpdateGrafanaDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGrafanaDashboard", varargs...)
	ret0, _ := ret[0].(*operations.UpdateGrafanaDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGrafanaDashboard indicates an expected call of UpdateGrafanaDashboard.
func (mr *MockClientServiceMockRecorder) UpdateGrafanaDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGrafanaDashboard", reflect.TypeOf((*MockClientService)(nil).UpdateGrafanaDashboard), varargs...)
}

// UpdateMappingRule mocks base method.
func (m *MockClientService) UpdateMappingRule(params *operations.UpdateMappingRuleParams, opts ...operations.ClientOption) (*operations.UpdateMappingRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMappingRule", varargs...)
	ret0, _ := ret[0].(*operations.UpdateMappingRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMappingRule indicates an expected call of UpdateMappingRule.
func (mr *MockClientServiceMockRecorder) UpdateMappingRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMappingRule", reflect.TypeOf((*MockClientService)(nil).UpdateMappingRule), varargs...)
}

// UpdateMonitor mocks base method.
func (m *MockClientService) UpdateMonitor(params *operations.UpdateMonitorParams, opts ...operations.ClientOption) (*operations.UpdateMonitorOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMonitor", varargs...)
	ret0, _ := ret[0].(*operations.UpdateMonitorOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMonitor indicates an expected call of UpdateMonitor.
func (mr *MockClientServiceMockRecorder) UpdateMonitor(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitor", reflect.TypeOf((*MockClientService)(nil).UpdateMonitor), varargs...)
}

// UpdateMutingRule mocks base method.
func (m *MockClientService) UpdateMutingRule(params *operations.UpdateMutingRuleParams, opts ...operations.ClientOption) (*operations.UpdateMutingRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMutingRule", varargs...)
	ret0, _ := ret[0].(*operations.UpdateMutingRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMutingRule indicates an expected call of UpdateMutingRule.
func (mr *MockClientServiceMockRecorder) UpdateMutingRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMutingRule", reflect.TypeOf((*MockClientService)(nil).UpdateMutingRule), varargs...)
}

// UpdateNotificationPolicy mocks base method.
func (m *MockClientService) UpdateNotificationPolicy(params *operations.UpdateNotificationPolicyParams, opts ...operations.ClientOption) (*operations.UpdateNotificationPolicyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNotificationPolicy", varargs...)
	ret0, _ := ret[0].(*operations.UpdateNotificationPolicyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotificationPolicy indicates an expected call of UpdateNotificationPolicy.
func (mr *MockClientServiceMockRecorder) UpdateNotificationPolicy(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationPolicy", reflect.TypeOf((*MockClientService)(nil).UpdateNotificationPolicy), varargs...)
}

// UpdateNotifier mocks base method.
func (m *MockClientService) UpdateNotifier(params *operations.UpdateNotifierParams, opts ...operations.ClientOption) (*operations.UpdateNotifierOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNotifier", varargs...)
	ret0, _ := ret[0].(*operations.UpdateNotifierOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotifier indicates an expected call of UpdateNotifier.
func (mr *MockClientServiceMockRecorder) UpdateNotifier(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotifier", reflect.TypeOf((*MockClientService)(nil).UpdateNotifier), varargs...)
}

// UpdateRecordingRule mocks base method.
func (m *MockClientService) UpdateRecordingRule(params *operations.UpdateRecordingRuleParams, opts ...operations.ClientOption) (*operations.UpdateRecordingRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecordingRule", varargs...)
	ret0, _ := ret[0].(*operations.UpdateRecordingRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecordingRule indicates an expected call of UpdateRecordingRule.
func (mr *MockClientServiceMockRecorder) UpdateRecordingRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecordingRule", reflect.TypeOf((*MockClientService)(nil).UpdateRecordingRule), varargs...)
}

// UpdateResourcePools mocks base method.
func (m *MockClientService) UpdateResourcePools(params *operations.UpdateResourcePoolsParams, opts ...operations.ClientOption) (*operations.UpdateResourcePoolsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResourcePools", varargs...)
	ret0, _ := ret[0].(*operations.UpdateResourcePoolsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourcePools indicates an expected call of UpdateResourcePools.
func (mr *MockClientServiceMockRecorder) UpdateResourcePools(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourcePools", reflect.TypeOf((*MockClientService)(nil).UpdateResourcePools), varargs...)
}

// UpdateRollupRule mocks base method.
func (m *MockClientService) UpdateRollupRule(params *operations.UpdateRollupRuleParams, opts ...operations.ClientOption) (*operations.UpdateRollupRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRollupRule", varargs...)
	ret0, _ := ret[0].(*operations.UpdateRollupRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRollupRule indicates an expected call of UpdateRollupRule.
func (mr *MockClientServiceMockRecorder) UpdateRollupRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRollupRule", reflect.TypeOf((*MockClientService)(nil).UpdateRollupRule), varargs...)
}

// UpdateTeam mocks base method.
func (m *MockClientService) UpdateTeam(params *operations.UpdateTeamParams, opts ...operations.ClientOption) (*operations.UpdateTeamOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTeam", varargs...)
	ret0, _ := ret[0].(*operations.UpdateTeamOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockClientServiceMockRecorder) UpdateTeam(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockClientService)(nil).UpdateTeam), varargs...)
}

// UpdateTraceJaegerRemoteSamplingStrategy mocks base method.
func (m *MockClientService) UpdateTraceJaegerRemoteSamplingStrategy(params *operations.UpdateTraceJaegerRemoteSamplingStrategyParams, opts ...operations.ClientOption) (*operations.UpdateTraceJaegerRemoteSamplingStrategyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTraceJaegerRemoteSamplingStrategy", varargs...)
	ret0, _ := ret[0].(*operations.UpdateTraceJaegerRemoteSamplingStrategyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTraceJaegerRemoteSamplingStrategy indicates an expected call of UpdateTraceJaegerRemoteSamplingStrategy.
func (mr *MockClientServiceMockRecorder) UpdateTraceJaegerRemoteSamplingStrategy(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTraceJaegerRemoteSamplingStrategy", reflect.TypeOf((*MockClientService)(nil).UpdateTraceJaegerRemoteSamplingStrategy), varargs...)
}

// UpdateTraceMetricsRule mocks base method.
func (m *MockClientService) UpdateTraceMetricsRule(params *operations.UpdateTraceMetricsRuleParams, opts ...operations.ClientOption) (*operations.UpdateTraceMetricsRuleOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTraceMetricsRule", varargs...)
	ret0, _ := ret[0].(*operations.UpdateTraceMetricsRuleOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTraceMetricsRule indicates an expected call of UpdateTraceMetricsRule.
func (mr *MockClientServiceMockRecorder) UpdateTraceMetricsRule(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTraceMetricsRule", reflect.TypeOf((*MockClientService)(nil).UpdateTraceMetricsRule), varargs...)
}

// UpdateTraceTailSamplingRules mocks base method.
func (m *MockClientService) UpdateTraceTailSamplingRules(params *operations.UpdateTraceTailSamplingRulesParams, opts ...operations.ClientOption) (*operations.UpdateTraceTailSamplingRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTraceTailSamplingRules", varargs...)
	ret0, _ := ret[0].(*operations.UpdateTraceTailSamplingRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTraceTailSamplingRules indicates an expected call of UpdateTraceTailSamplingRules.
func (mr *MockClientServiceMockRecorder) UpdateTraceTailSamplingRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTraceTailSamplingRules", reflect.TypeOf((*MockClientService)(nil).UpdateTraceTailSamplingRules), varargs...)
}
