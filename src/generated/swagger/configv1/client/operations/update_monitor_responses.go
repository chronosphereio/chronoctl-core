// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// UpdateMonitorReader is a Reader for the UpdateMonitor structure.
type UpdateMonitorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMonitorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateMonitorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateMonitorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateMonitorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateMonitorConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateMonitorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateMonitorDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateMonitorOK creates a UpdateMonitorOK with default headers values
func NewUpdateMonitorOK() *UpdateMonitorOK {
	return &UpdateMonitorOK{}
}

/*
UpdateMonitorOK describes a response with status code 200, with default header values.

A successful response containing the updated Monitor.
*/
type UpdateMonitorOK struct {
	Payload *models.Configv1UpdateMonitorResponse
}

// IsSuccess returns true when this update monitor o k response has a 2xx status code
func (o *UpdateMonitorOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update monitor o k response has a 3xx status code
func (o *UpdateMonitorOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update monitor o k response has a 4xx status code
func (o *UpdateMonitorOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update monitor o k response has a 5xx status code
func (o *UpdateMonitorOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update monitor o k response a status code equal to that given
func (o *UpdateMonitorOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update monitor o k response
func (o *UpdateMonitorOK) Code() int {
	return 200
}

func (o *UpdateMonitorOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/monitors/{slug}][%d] updateMonitorOK  %+v", 200, o.Payload)
}

func (o *UpdateMonitorOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/monitors/{slug}][%d] updateMonitorOK  %+v", 200, o.Payload)
}

func (o *UpdateMonitorOK) GetPayload() *models.Configv1UpdateMonitorResponse {
	return o.Payload
}

func (o *UpdateMonitorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1UpdateMonitorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMonitorBadRequest creates a UpdateMonitorBadRequest with default headers values
func NewUpdateMonitorBadRequest() *UpdateMonitorBadRequest {
	return &UpdateMonitorBadRequest{}
}

/*
UpdateMonitorBadRequest describes a response with status code 400, with default header values.

Cannot update the Monitor because the request is invalid.
*/
type UpdateMonitorBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update monitor bad request response has a 2xx status code
func (o *UpdateMonitorBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update monitor bad request response has a 3xx status code
func (o *UpdateMonitorBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update monitor bad request response has a 4xx status code
func (o *UpdateMonitorBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update monitor bad request response has a 5xx status code
func (o *UpdateMonitorBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update monitor bad request response a status code equal to that given
func (o *UpdateMonitorBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update monitor bad request response
func (o *UpdateMonitorBadRequest) Code() int {
	return 400
}

func (o *UpdateMonitorBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/monitors/{slug}][%d] updateMonitorBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMonitorBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/monitors/{slug}][%d] updateMonitorBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMonitorBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateMonitorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMonitorNotFound creates a UpdateMonitorNotFound with default headers values
func NewUpdateMonitorNotFound() *UpdateMonitorNotFound {
	return &UpdateMonitorNotFound{}
}

/*
UpdateMonitorNotFound describes a response with status code 404, with default header values.

Cannot update the Monitor because the slug does not exist.
*/
type UpdateMonitorNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update monitor not found response has a 2xx status code
func (o *UpdateMonitorNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update monitor not found response has a 3xx status code
func (o *UpdateMonitorNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update monitor not found response has a 4xx status code
func (o *UpdateMonitorNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update monitor not found response has a 5xx status code
func (o *UpdateMonitorNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update monitor not found response a status code equal to that given
func (o *UpdateMonitorNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update monitor not found response
func (o *UpdateMonitorNotFound) Code() int {
	return 404
}

func (o *UpdateMonitorNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/monitors/{slug}][%d] updateMonitorNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMonitorNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/monitors/{slug}][%d] updateMonitorNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMonitorNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateMonitorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMonitorConflict creates a UpdateMonitorConflict with default headers values
func NewUpdateMonitorConflict() *UpdateMonitorConflict {
	return &UpdateMonitorConflict{}
}

/*
UpdateMonitorConflict describes a response with status code 409, with default header values.

Cannot update the Monitor because there is a conflict with an existing Monitor.
*/
type UpdateMonitorConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update monitor conflict response has a 2xx status code
func (o *UpdateMonitorConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update monitor conflict response has a 3xx status code
func (o *UpdateMonitorConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update monitor conflict response has a 4xx status code
func (o *UpdateMonitorConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update monitor conflict response has a 5xx status code
func (o *UpdateMonitorConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update monitor conflict response a status code equal to that given
func (o *UpdateMonitorConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update monitor conflict response
func (o *UpdateMonitorConflict) Code() int {
	return 409
}

func (o *UpdateMonitorConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/monitors/{slug}][%d] updateMonitorConflict  %+v", 409, o.Payload)
}

func (o *UpdateMonitorConflict) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/monitors/{slug}][%d] updateMonitorConflict  %+v", 409, o.Payload)
}

func (o *UpdateMonitorConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateMonitorConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMonitorInternalServerError creates a UpdateMonitorInternalServerError with default headers values
func NewUpdateMonitorInternalServerError() *UpdateMonitorInternalServerError {
	return &UpdateMonitorInternalServerError{}
}

/*
UpdateMonitorInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateMonitorInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update monitor internal server error response has a 2xx status code
func (o *UpdateMonitorInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update monitor internal server error response has a 3xx status code
func (o *UpdateMonitorInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update monitor internal server error response has a 4xx status code
func (o *UpdateMonitorInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update monitor internal server error response has a 5xx status code
func (o *UpdateMonitorInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update monitor internal server error response a status code equal to that given
func (o *UpdateMonitorInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update monitor internal server error response
func (o *UpdateMonitorInternalServerError) Code() int {
	return 500
}

func (o *UpdateMonitorInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/monitors/{slug}][%d] updateMonitorInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateMonitorInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/monitors/{slug}][%d] updateMonitorInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateMonitorInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateMonitorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMonitorDefault creates a UpdateMonitorDefault with default headers values
func NewUpdateMonitorDefault(code int) *UpdateMonitorDefault {
	return &UpdateMonitorDefault{
		_statusCode: code,
	}
}

/*
UpdateMonitorDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateMonitorDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update monitor default response has a 2xx status code
func (o *UpdateMonitorDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update monitor default response has a 3xx status code
func (o *UpdateMonitorDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update monitor default response has a 4xx status code
func (o *UpdateMonitorDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update monitor default response has a 5xx status code
func (o *UpdateMonitorDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update monitor default response a status code equal to that given
func (o *UpdateMonitorDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update monitor default response
func (o *UpdateMonitorDefault) Code() int {
	return o._statusCode
}

func (o *UpdateMonitorDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/monitors/{slug}][%d] UpdateMonitor default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateMonitorDefault) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/monitors/{slug}][%d] UpdateMonitor default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateMonitorDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateMonitorDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
