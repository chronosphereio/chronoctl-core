// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// CreateDashboardReader is a Reader for the CreateDashboard structure.
type CreateDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateDashboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateDashboardBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateDashboardConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateDashboardInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateDashboardDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateDashboardOK creates a CreateDashboardOK with default headers values
func NewCreateDashboardOK() *CreateDashboardOK {
	return &CreateDashboardOK{}
}

/*
CreateDashboardOK describes a response with status code 200, with default header values.

A successful response containing the created Dashboard.
*/
type CreateDashboardOK struct {
	Payload *models.Configv1CreateDashboardResponse
}

// IsSuccess returns true when this create dashboard o k response has a 2xx status code
func (o *CreateDashboardOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create dashboard o k response has a 3xx status code
func (o *CreateDashboardOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create dashboard o k response has a 4xx status code
func (o *CreateDashboardOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create dashboard o k response has a 5xx status code
func (o *CreateDashboardOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create dashboard o k response a status code equal to that given
func (o *CreateDashboardOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create dashboard o k response
func (o *CreateDashboardOK) Code() int {
	return 200
}

func (o *CreateDashboardOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/dashboards][%d] createDashboardOK  %+v", 200, o.Payload)
}

func (o *CreateDashboardOK) String() string {
	return fmt.Sprintf("[POST /api/v1/config/dashboards][%d] createDashboardOK  %+v", 200, o.Payload)
}

func (o *CreateDashboardOK) GetPayload() *models.Configv1CreateDashboardResponse {
	return o.Payload
}

func (o *CreateDashboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1CreateDashboardResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardBadRequest creates a CreateDashboardBadRequest with default headers values
func NewCreateDashboardBadRequest() *CreateDashboardBadRequest {
	return &CreateDashboardBadRequest{}
}

/*
CreateDashboardBadRequest describes a response with status code 400, with default header values.

Cannot create the Dashboard because the request is invalid.
*/
type CreateDashboardBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create dashboard bad request response has a 2xx status code
func (o *CreateDashboardBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create dashboard bad request response has a 3xx status code
func (o *CreateDashboardBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create dashboard bad request response has a 4xx status code
func (o *CreateDashboardBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create dashboard bad request response has a 5xx status code
func (o *CreateDashboardBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create dashboard bad request response a status code equal to that given
func (o *CreateDashboardBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create dashboard bad request response
func (o *CreateDashboardBadRequest) Code() int {
	return 400
}

func (o *CreateDashboardBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/dashboards][%d] createDashboardBadRequest  %+v", 400, o.Payload)
}

func (o *CreateDashboardBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/config/dashboards][%d] createDashboardBadRequest  %+v", 400, o.Payload)
}

func (o *CreateDashboardBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateDashboardBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardConflict creates a CreateDashboardConflict with default headers values
func NewCreateDashboardConflict() *CreateDashboardConflict {
	return &CreateDashboardConflict{}
}

/*
CreateDashboardConflict describes a response with status code 409, with default header values.

Cannot create the Dashboard because there is a conflict with an existing Dashboard.
*/
type CreateDashboardConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create dashboard conflict response has a 2xx status code
func (o *CreateDashboardConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create dashboard conflict response has a 3xx status code
func (o *CreateDashboardConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create dashboard conflict response has a 4xx status code
func (o *CreateDashboardConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create dashboard conflict response has a 5xx status code
func (o *CreateDashboardConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create dashboard conflict response a status code equal to that given
func (o *CreateDashboardConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create dashboard conflict response
func (o *CreateDashboardConflict) Code() int {
	return 409
}

func (o *CreateDashboardConflict) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/dashboards][%d] createDashboardConflict  %+v", 409, o.Payload)
}

func (o *CreateDashboardConflict) String() string {
	return fmt.Sprintf("[POST /api/v1/config/dashboards][%d] createDashboardConflict  %+v", 409, o.Payload)
}

func (o *CreateDashboardConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateDashboardConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardInternalServerError creates a CreateDashboardInternalServerError with default headers values
func NewCreateDashboardInternalServerError() *CreateDashboardInternalServerError {
	return &CreateDashboardInternalServerError{}
}

/*
CreateDashboardInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type CreateDashboardInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create dashboard internal server error response has a 2xx status code
func (o *CreateDashboardInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create dashboard internal server error response has a 3xx status code
func (o *CreateDashboardInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create dashboard internal server error response has a 4xx status code
func (o *CreateDashboardInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create dashboard internal server error response has a 5xx status code
func (o *CreateDashboardInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create dashboard internal server error response a status code equal to that given
func (o *CreateDashboardInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create dashboard internal server error response
func (o *CreateDashboardInternalServerError) Code() int {
	return 500
}

func (o *CreateDashboardInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/dashboards][%d] createDashboardInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateDashboardInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/config/dashboards][%d] createDashboardInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateDashboardInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateDashboardInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardDefault creates a CreateDashboardDefault with default headers values
func NewCreateDashboardDefault(code int) *CreateDashboardDefault {
	return &CreateDashboardDefault{
		_statusCode: code,
	}
}

/*
CreateDashboardDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type CreateDashboardDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this create dashboard default response has a 2xx status code
func (o *CreateDashboardDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create dashboard default response has a 3xx status code
func (o *CreateDashboardDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create dashboard default response has a 4xx status code
func (o *CreateDashboardDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create dashboard default response has a 5xx status code
func (o *CreateDashboardDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create dashboard default response a status code equal to that given
func (o *CreateDashboardDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create dashboard default response
func (o *CreateDashboardDefault) Code() int {
	return o._statusCode
}

func (o *CreateDashboardDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/dashboards][%d] CreateDashboard default  %+v", o._statusCode, o.Payload)
}

func (o *CreateDashboardDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/config/dashboards][%d] CreateDashboard default  %+v", o._statusCode, o.Payload)
}

func (o *CreateDashboardDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *CreateDashboardDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
