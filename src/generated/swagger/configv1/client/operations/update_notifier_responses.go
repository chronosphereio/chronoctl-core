// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// UpdateNotifierReader is a Reader for the UpdateNotifier structure.
type UpdateNotifierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNotifierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNotifierOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateNotifierBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateNotifierNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateNotifierConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateNotifierInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateNotifierDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateNotifierOK creates a UpdateNotifierOK with default headers values
func NewUpdateNotifierOK() *UpdateNotifierOK {
	return &UpdateNotifierOK{}
}

/*
UpdateNotifierOK describes a response with status code 200, with default header values.

A successful response containing the updated Notifier.
*/
type UpdateNotifierOK struct {
	Payload *models.Configv1UpdateNotifierResponse
}

// IsSuccess returns true when this update notifier o k response has a 2xx status code
func (o *UpdateNotifierOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update notifier o k response has a 3xx status code
func (o *UpdateNotifierOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update notifier o k response has a 4xx status code
func (o *UpdateNotifierOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update notifier o k response has a 5xx status code
func (o *UpdateNotifierOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update notifier o k response a status code equal to that given
func (o *UpdateNotifierOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update notifier o k response
func (o *UpdateNotifierOK) Code() int {
	return 200
}

func (o *UpdateNotifierOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/notifiers/{slug}][%d] updateNotifierOK  %+v", 200, o.Payload)
}

func (o *UpdateNotifierOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/notifiers/{slug}][%d] updateNotifierOK  %+v", 200, o.Payload)
}

func (o *UpdateNotifierOK) GetPayload() *models.Configv1UpdateNotifierResponse {
	return o.Payload
}

func (o *UpdateNotifierOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1UpdateNotifierResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNotifierBadRequest creates a UpdateNotifierBadRequest with default headers values
func NewUpdateNotifierBadRequest() *UpdateNotifierBadRequest {
	return &UpdateNotifierBadRequest{}
}

/*
UpdateNotifierBadRequest describes a response with status code 400, with default header values.

Cannot update the Notifier because the request is invalid.
*/
type UpdateNotifierBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update notifier bad request response has a 2xx status code
func (o *UpdateNotifierBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update notifier bad request response has a 3xx status code
func (o *UpdateNotifierBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update notifier bad request response has a 4xx status code
func (o *UpdateNotifierBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update notifier bad request response has a 5xx status code
func (o *UpdateNotifierBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update notifier bad request response a status code equal to that given
func (o *UpdateNotifierBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update notifier bad request response
func (o *UpdateNotifierBadRequest) Code() int {
	return 400
}

func (o *UpdateNotifierBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/notifiers/{slug}][%d] updateNotifierBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateNotifierBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/notifiers/{slug}][%d] updateNotifierBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateNotifierBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateNotifierBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNotifierNotFound creates a UpdateNotifierNotFound with default headers values
func NewUpdateNotifierNotFound() *UpdateNotifierNotFound {
	return &UpdateNotifierNotFound{}
}

/*
UpdateNotifierNotFound describes a response with status code 404, with default header values.

Cannot update the Notifier because the slug does not exist.
*/
type UpdateNotifierNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update notifier not found response has a 2xx status code
func (o *UpdateNotifierNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update notifier not found response has a 3xx status code
func (o *UpdateNotifierNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update notifier not found response has a 4xx status code
func (o *UpdateNotifierNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update notifier not found response has a 5xx status code
func (o *UpdateNotifierNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update notifier not found response a status code equal to that given
func (o *UpdateNotifierNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update notifier not found response
func (o *UpdateNotifierNotFound) Code() int {
	return 404
}

func (o *UpdateNotifierNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/notifiers/{slug}][%d] updateNotifierNotFound  %+v", 404, o.Payload)
}

func (o *UpdateNotifierNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/notifiers/{slug}][%d] updateNotifierNotFound  %+v", 404, o.Payload)
}

func (o *UpdateNotifierNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateNotifierNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNotifierConflict creates a UpdateNotifierConflict with default headers values
func NewUpdateNotifierConflict() *UpdateNotifierConflict {
	return &UpdateNotifierConflict{}
}

/*
UpdateNotifierConflict describes a response with status code 409, with default header values.

Cannot update the Notifier because there is a conflict with an existing Notifier.
*/
type UpdateNotifierConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update notifier conflict response has a 2xx status code
func (o *UpdateNotifierConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update notifier conflict response has a 3xx status code
func (o *UpdateNotifierConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update notifier conflict response has a 4xx status code
func (o *UpdateNotifierConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update notifier conflict response has a 5xx status code
func (o *UpdateNotifierConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update notifier conflict response a status code equal to that given
func (o *UpdateNotifierConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update notifier conflict response
func (o *UpdateNotifierConflict) Code() int {
	return 409
}

func (o *UpdateNotifierConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/notifiers/{slug}][%d] updateNotifierConflict  %+v", 409, o.Payload)
}

func (o *UpdateNotifierConflict) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/notifiers/{slug}][%d] updateNotifierConflict  %+v", 409, o.Payload)
}

func (o *UpdateNotifierConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateNotifierConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNotifierInternalServerError creates a UpdateNotifierInternalServerError with default headers values
func NewUpdateNotifierInternalServerError() *UpdateNotifierInternalServerError {
	return &UpdateNotifierInternalServerError{}
}

/*
UpdateNotifierInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateNotifierInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update notifier internal server error response has a 2xx status code
func (o *UpdateNotifierInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update notifier internal server error response has a 3xx status code
func (o *UpdateNotifierInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update notifier internal server error response has a 4xx status code
func (o *UpdateNotifierInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update notifier internal server error response has a 5xx status code
func (o *UpdateNotifierInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update notifier internal server error response a status code equal to that given
func (o *UpdateNotifierInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update notifier internal server error response
func (o *UpdateNotifierInternalServerError) Code() int {
	return 500
}

func (o *UpdateNotifierInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/notifiers/{slug}][%d] updateNotifierInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateNotifierInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/notifiers/{slug}][%d] updateNotifierInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateNotifierInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateNotifierInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNotifierDefault creates a UpdateNotifierDefault with default headers values
func NewUpdateNotifierDefault(code int) *UpdateNotifierDefault {
	return &UpdateNotifierDefault{
		_statusCode: code,
	}
}

/*
UpdateNotifierDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateNotifierDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update notifier default response has a 2xx status code
func (o *UpdateNotifierDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update notifier default response has a 3xx status code
func (o *UpdateNotifierDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update notifier default response has a 4xx status code
func (o *UpdateNotifierDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update notifier default response has a 5xx status code
func (o *UpdateNotifierDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update notifier default response a status code equal to that given
func (o *UpdateNotifierDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update notifier default response
func (o *UpdateNotifierDefault) Code() int {
	return o._statusCode
}

func (o *UpdateNotifierDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/notifiers/{slug}][%d] UpdateNotifier default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateNotifierDefault) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/notifiers/{slug}][%d] UpdateNotifier default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateNotifierDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateNotifierDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
