// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// UpdateClassicDashboardReader is a Reader for the UpdateClassicDashboard structure.
type UpdateClassicDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateClassicDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateClassicDashboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateClassicDashboardBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateClassicDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateClassicDashboardConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateClassicDashboardInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateClassicDashboardDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateClassicDashboardOK creates a UpdateClassicDashboardOK with default headers values
func NewUpdateClassicDashboardOK() *UpdateClassicDashboardOK {
	return &UpdateClassicDashboardOK{}
}

/*
UpdateClassicDashboardOK describes a response with status code 200, with default header values.

A successful response containing the updated GrafanaDashboard.
*/
type UpdateClassicDashboardOK struct {
	Payload *models.Configv1UpdateClassicDashboardResponse
}

// IsSuccess returns true when this update classic dashboard o k response has a 2xx status code
func (o *UpdateClassicDashboardOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update classic dashboard o k response has a 3xx status code
func (o *UpdateClassicDashboardOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update classic dashboard o k response has a 4xx status code
func (o *UpdateClassicDashboardOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update classic dashboard o k response has a 5xx status code
func (o *UpdateClassicDashboardOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update classic dashboard o k response a status code equal to that given
func (o *UpdateClassicDashboardOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update classic dashboard o k response
func (o *UpdateClassicDashboardOK) Code() int {
	return 200
}

func (o *UpdateClassicDashboardOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/classic-dashboards/{slug}][%d] updateClassicDashboardOK  %+v", 200, o.Payload)
}

func (o *UpdateClassicDashboardOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/classic-dashboards/{slug}][%d] updateClassicDashboardOK  %+v", 200, o.Payload)
}

func (o *UpdateClassicDashboardOK) GetPayload() *models.Configv1UpdateClassicDashboardResponse {
	return o.Payload
}

func (o *UpdateClassicDashboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1UpdateClassicDashboardResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClassicDashboardBadRequest creates a UpdateClassicDashboardBadRequest with default headers values
func NewUpdateClassicDashboardBadRequest() *UpdateClassicDashboardBadRequest {
	return &UpdateClassicDashboardBadRequest{}
}

/*
UpdateClassicDashboardBadRequest describes a response with status code 400, with default header values.

Cannot update the GrafanaDashboard because the request is invalid.
*/
type UpdateClassicDashboardBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update classic dashboard bad request response has a 2xx status code
func (o *UpdateClassicDashboardBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update classic dashboard bad request response has a 3xx status code
func (o *UpdateClassicDashboardBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update classic dashboard bad request response has a 4xx status code
func (o *UpdateClassicDashboardBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update classic dashboard bad request response has a 5xx status code
func (o *UpdateClassicDashboardBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update classic dashboard bad request response a status code equal to that given
func (o *UpdateClassicDashboardBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update classic dashboard bad request response
func (o *UpdateClassicDashboardBadRequest) Code() int {
	return 400
}

func (o *UpdateClassicDashboardBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/classic-dashboards/{slug}][%d] updateClassicDashboardBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateClassicDashboardBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/classic-dashboards/{slug}][%d] updateClassicDashboardBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateClassicDashboardBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateClassicDashboardBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClassicDashboardNotFound creates a UpdateClassicDashboardNotFound with default headers values
func NewUpdateClassicDashboardNotFound() *UpdateClassicDashboardNotFound {
	return &UpdateClassicDashboardNotFound{}
}

/*
UpdateClassicDashboardNotFound describes a response with status code 404, with default header values.

Cannot update the GrafanaDashboard because the slug does not exist.
*/
type UpdateClassicDashboardNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update classic dashboard not found response has a 2xx status code
func (o *UpdateClassicDashboardNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update classic dashboard not found response has a 3xx status code
func (o *UpdateClassicDashboardNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update classic dashboard not found response has a 4xx status code
func (o *UpdateClassicDashboardNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update classic dashboard not found response has a 5xx status code
func (o *UpdateClassicDashboardNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update classic dashboard not found response a status code equal to that given
func (o *UpdateClassicDashboardNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update classic dashboard not found response
func (o *UpdateClassicDashboardNotFound) Code() int {
	return 404
}

func (o *UpdateClassicDashboardNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/classic-dashboards/{slug}][%d] updateClassicDashboardNotFound  %+v", 404, o.Payload)
}

func (o *UpdateClassicDashboardNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/classic-dashboards/{slug}][%d] updateClassicDashboardNotFound  %+v", 404, o.Payload)
}

func (o *UpdateClassicDashboardNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateClassicDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClassicDashboardConflict creates a UpdateClassicDashboardConflict with default headers values
func NewUpdateClassicDashboardConflict() *UpdateClassicDashboardConflict {
	return &UpdateClassicDashboardConflict{}
}

/*
UpdateClassicDashboardConflict describes a response with status code 409, with default header values.

Cannot update the GrafanaDashboard because there is a conflict with an existing GrafanaDashboard.
*/
type UpdateClassicDashboardConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update classic dashboard conflict response has a 2xx status code
func (o *UpdateClassicDashboardConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update classic dashboard conflict response has a 3xx status code
func (o *UpdateClassicDashboardConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update classic dashboard conflict response has a 4xx status code
func (o *UpdateClassicDashboardConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update classic dashboard conflict response has a 5xx status code
func (o *UpdateClassicDashboardConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update classic dashboard conflict response a status code equal to that given
func (o *UpdateClassicDashboardConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update classic dashboard conflict response
func (o *UpdateClassicDashboardConflict) Code() int {
	return 409
}

func (o *UpdateClassicDashboardConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/classic-dashboards/{slug}][%d] updateClassicDashboardConflict  %+v", 409, o.Payload)
}

func (o *UpdateClassicDashboardConflict) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/classic-dashboards/{slug}][%d] updateClassicDashboardConflict  %+v", 409, o.Payload)
}

func (o *UpdateClassicDashboardConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateClassicDashboardConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClassicDashboardInternalServerError creates a UpdateClassicDashboardInternalServerError with default headers values
func NewUpdateClassicDashboardInternalServerError() *UpdateClassicDashboardInternalServerError {
	return &UpdateClassicDashboardInternalServerError{}
}

/*
UpdateClassicDashboardInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateClassicDashboardInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update classic dashboard internal server error response has a 2xx status code
func (o *UpdateClassicDashboardInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update classic dashboard internal server error response has a 3xx status code
func (o *UpdateClassicDashboardInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update classic dashboard internal server error response has a 4xx status code
func (o *UpdateClassicDashboardInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update classic dashboard internal server error response has a 5xx status code
func (o *UpdateClassicDashboardInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update classic dashboard internal server error response a status code equal to that given
func (o *UpdateClassicDashboardInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update classic dashboard internal server error response
func (o *UpdateClassicDashboardInternalServerError) Code() int {
	return 500
}

func (o *UpdateClassicDashboardInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/classic-dashboards/{slug}][%d] updateClassicDashboardInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateClassicDashboardInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/classic-dashboards/{slug}][%d] updateClassicDashboardInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateClassicDashboardInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateClassicDashboardInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClassicDashboardDefault creates a UpdateClassicDashboardDefault with default headers values
func NewUpdateClassicDashboardDefault(code int) *UpdateClassicDashboardDefault {
	return &UpdateClassicDashboardDefault{
		_statusCode: code,
	}
}

/*
UpdateClassicDashboardDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateClassicDashboardDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update classic dashboard default response has a 2xx status code
func (o *UpdateClassicDashboardDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update classic dashboard default response has a 3xx status code
func (o *UpdateClassicDashboardDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update classic dashboard default response has a 4xx status code
func (o *UpdateClassicDashboardDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update classic dashboard default response has a 5xx status code
func (o *UpdateClassicDashboardDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update classic dashboard default response a status code equal to that given
func (o *UpdateClassicDashboardDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update classic dashboard default response
func (o *UpdateClassicDashboardDefault) Code() int {
	return o._statusCode
}

func (o *UpdateClassicDashboardDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/classic-dashboards/{slug}][%d] UpdateClassicDashboard default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateClassicDashboardDefault) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/classic-dashboards/{slug}][%d] UpdateClassicDashboard default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateClassicDashboardDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateClassicDashboardDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
