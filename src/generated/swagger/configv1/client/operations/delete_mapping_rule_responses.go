// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// DeleteMappingRuleReader is a Reader for the DeleteMappingRule structure.
type DeleteMappingRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteMappingRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteMappingRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteMappingRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteMappingRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteMappingRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteMappingRuleOK creates a DeleteMappingRuleOK with default headers values
func NewDeleteMappingRuleOK() *DeleteMappingRuleOK {
	return &DeleteMappingRuleOK{}
}

/*
DeleteMappingRuleOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteMappingRuleOK struct {
	Payload models.Configv1DeleteMappingRuleResponse
}

// IsSuccess returns true when this delete mapping rule o k response has a 2xx status code
func (o *DeleteMappingRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete mapping rule o k response has a 3xx status code
func (o *DeleteMappingRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete mapping rule o k response has a 4xx status code
func (o *DeleteMappingRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete mapping rule o k response has a 5xx status code
func (o *DeleteMappingRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete mapping rule o k response a status code equal to that given
func (o *DeleteMappingRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete mapping rule o k response
func (o *DeleteMappingRuleOK) Code() int {
	return 200
}

func (o *DeleteMappingRuleOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/mapping-rules/{slug}][%d] deleteMappingRuleOK  %+v", 200, o.Payload)
}

func (o *DeleteMappingRuleOK) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/mapping-rules/{slug}][%d] deleteMappingRuleOK  %+v", 200, o.Payload)
}

func (o *DeleteMappingRuleOK) GetPayload() models.Configv1DeleteMappingRuleResponse {
	return o.Payload
}

func (o *DeleteMappingRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMappingRuleNotFound creates a DeleteMappingRuleNotFound with default headers values
func NewDeleteMappingRuleNotFound() *DeleteMappingRuleNotFound {
	return &DeleteMappingRuleNotFound{}
}

/*
DeleteMappingRuleNotFound describes a response with status code 404, with default header values.

Cannot delete the MappingRule because the slug does not exist.
*/
type DeleteMappingRuleNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete mapping rule not found response has a 2xx status code
func (o *DeleteMappingRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete mapping rule not found response has a 3xx status code
func (o *DeleteMappingRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete mapping rule not found response has a 4xx status code
func (o *DeleteMappingRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete mapping rule not found response has a 5xx status code
func (o *DeleteMappingRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete mapping rule not found response a status code equal to that given
func (o *DeleteMappingRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete mapping rule not found response
func (o *DeleteMappingRuleNotFound) Code() int {
	return 404
}

func (o *DeleteMappingRuleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/mapping-rules/{slug}][%d] deleteMappingRuleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteMappingRuleNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/mapping-rules/{slug}][%d] deleteMappingRuleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteMappingRuleNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteMappingRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMappingRuleInternalServerError creates a DeleteMappingRuleInternalServerError with default headers values
func NewDeleteMappingRuleInternalServerError() *DeleteMappingRuleInternalServerError {
	return &DeleteMappingRuleInternalServerError{}
}

/*
DeleteMappingRuleInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type DeleteMappingRuleInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete mapping rule internal server error response has a 2xx status code
func (o *DeleteMappingRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete mapping rule internal server error response has a 3xx status code
func (o *DeleteMappingRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete mapping rule internal server error response has a 4xx status code
func (o *DeleteMappingRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete mapping rule internal server error response has a 5xx status code
func (o *DeleteMappingRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete mapping rule internal server error response a status code equal to that given
func (o *DeleteMappingRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete mapping rule internal server error response
func (o *DeleteMappingRuleInternalServerError) Code() int {
	return 500
}

func (o *DeleteMappingRuleInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/mapping-rules/{slug}][%d] deleteMappingRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteMappingRuleInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/mapping-rules/{slug}][%d] deleteMappingRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteMappingRuleInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteMappingRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMappingRuleDefault creates a DeleteMappingRuleDefault with default headers values
func NewDeleteMappingRuleDefault(code int) *DeleteMappingRuleDefault {
	return &DeleteMappingRuleDefault{
		_statusCode: code,
	}
}

/*
DeleteMappingRuleDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type DeleteMappingRuleDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this delete mapping rule default response has a 2xx status code
func (o *DeleteMappingRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete mapping rule default response has a 3xx status code
func (o *DeleteMappingRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete mapping rule default response has a 4xx status code
func (o *DeleteMappingRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete mapping rule default response has a 5xx status code
func (o *DeleteMappingRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete mapping rule default response a status code equal to that given
func (o *DeleteMappingRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete mapping rule default response
func (o *DeleteMappingRuleDefault) Code() int {
	return o._statusCode
}

func (o *DeleteMappingRuleDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/mapping-rules/{slug}][%d] DeleteMappingRule default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteMappingRuleDefault) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/mapping-rules/{slug}][%d] DeleteMappingRule default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteMappingRuleDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *DeleteMappingRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
