// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// CreateMonitorReader is a Reader for the CreateMonitor structure.
type CreateMonitorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateMonitorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateMonitorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateMonitorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateMonitorConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateMonitorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateMonitorDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateMonitorOK creates a CreateMonitorOK with default headers values
func NewCreateMonitorOK() *CreateMonitorOK {
	return &CreateMonitorOK{}
}

/*
CreateMonitorOK describes a response with status code 200, with default header values.

A successful response containing the created Monitor.
*/
type CreateMonitorOK struct {
	Payload *models.Configv1CreateMonitorResponse
}

// IsSuccess returns true when this create monitor o k response has a 2xx status code
func (o *CreateMonitorOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create monitor o k response has a 3xx status code
func (o *CreateMonitorOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create monitor o k response has a 4xx status code
func (o *CreateMonitorOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create monitor o k response has a 5xx status code
func (o *CreateMonitorOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create monitor o k response a status code equal to that given
func (o *CreateMonitorOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create monitor o k response
func (o *CreateMonitorOK) Code() int {
	return 200
}

func (o *CreateMonitorOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/monitors][%d] createMonitorOK  %+v", 200, o.Payload)
}

func (o *CreateMonitorOK) String() string {
	return fmt.Sprintf("[POST /api/v1/config/monitors][%d] createMonitorOK  %+v", 200, o.Payload)
}

func (o *CreateMonitorOK) GetPayload() *models.Configv1CreateMonitorResponse {
	return o.Payload
}

func (o *CreateMonitorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1CreateMonitorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMonitorBadRequest creates a CreateMonitorBadRequest with default headers values
func NewCreateMonitorBadRequest() *CreateMonitorBadRequest {
	return &CreateMonitorBadRequest{}
}

/*
CreateMonitorBadRequest describes a response with status code 400, with default header values.

Cannot create the Monitor because the request is invalid.
*/
type CreateMonitorBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create monitor bad request response has a 2xx status code
func (o *CreateMonitorBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create monitor bad request response has a 3xx status code
func (o *CreateMonitorBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create monitor bad request response has a 4xx status code
func (o *CreateMonitorBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create monitor bad request response has a 5xx status code
func (o *CreateMonitorBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create monitor bad request response a status code equal to that given
func (o *CreateMonitorBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create monitor bad request response
func (o *CreateMonitorBadRequest) Code() int {
	return 400
}

func (o *CreateMonitorBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/monitors][%d] createMonitorBadRequest  %+v", 400, o.Payload)
}

func (o *CreateMonitorBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/config/monitors][%d] createMonitorBadRequest  %+v", 400, o.Payload)
}

func (o *CreateMonitorBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateMonitorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMonitorConflict creates a CreateMonitorConflict with default headers values
func NewCreateMonitorConflict() *CreateMonitorConflict {
	return &CreateMonitorConflict{}
}

/*
CreateMonitorConflict describes a response with status code 409, with default header values.

Cannot create the Monitor because there is a conflict with an existing Monitor.
*/
type CreateMonitorConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create monitor conflict response has a 2xx status code
func (o *CreateMonitorConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create monitor conflict response has a 3xx status code
func (o *CreateMonitorConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create monitor conflict response has a 4xx status code
func (o *CreateMonitorConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create monitor conflict response has a 5xx status code
func (o *CreateMonitorConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create monitor conflict response a status code equal to that given
func (o *CreateMonitorConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create monitor conflict response
func (o *CreateMonitorConflict) Code() int {
	return 409
}

func (o *CreateMonitorConflict) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/monitors][%d] createMonitorConflict  %+v", 409, o.Payload)
}

func (o *CreateMonitorConflict) String() string {
	return fmt.Sprintf("[POST /api/v1/config/monitors][%d] createMonitorConflict  %+v", 409, o.Payload)
}

func (o *CreateMonitorConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateMonitorConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMonitorInternalServerError creates a CreateMonitorInternalServerError with default headers values
func NewCreateMonitorInternalServerError() *CreateMonitorInternalServerError {
	return &CreateMonitorInternalServerError{}
}

/*
CreateMonitorInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type CreateMonitorInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create monitor internal server error response has a 2xx status code
func (o *CreateMonitorInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create monitor internal server error response has a 3xx status code
func (o *CreateMonitorInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create monitor internal server error response has a 4xx status code
func (o *CreateMonitorInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create monitor internal server error response has a 5xx status code
func (o *CreateMonitorInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create monitor internal server error response a status code equal to that given
func (o *CreateMonitorInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create monitor internal server error response
func (o *CreateMonitorInternalServerError) Code() int {
	return 500
}

func (o *CreateMonitorInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/monitors][%d] createMonitorInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateMonitorInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/config/monitors][%d] createMonitorInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateMonitorInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateMonitorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMonitorDefault creates a CreateMonitorDefault with default headers values
func NewCreateMonitorDefault(code int) *CreateMonitorDefault {
	return &CreateMonitorDefault{
		_statusCode: code,
	}
}

/*
CreateMonitorDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type CreateMonitorDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this create monitor default response has a 2xx status code
func (o *CreateMonitorDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create monitor default response has a 3xx status code
func (o *CreateMonitorDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create monitor default response has a 4xx status code
func (o *CreateMonitorDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create monitor default response has a 5xx status code
func (o *CreateMonitorDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create monitor default response a status code equal to that given
func (o *CreateMonitorDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create monitor default response
func (o *CreateMonitorDefault) Code() int {
	return o._statusCode
}

func (o *CreateMonitorDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/monitors][%d] CreateMonitor default  %+v", o._statusCode, o.Payload)
}

func (o *CreateMonitorDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/config/monitors][%d] CreateMonitor default  %+v", o._statusCode, o.Payload)
}

func (o *CreateMonitorDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *CreateMonitorDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
