// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// DeleteRecordingRuleReader is a Reader for the DeleteRecordingRule structure.
type DeleteRecordingRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRecordingRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRecordingRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteRecordingRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteRecordingRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteRecordingRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteRecordingRuleOK creates a DeleteRecordingRuleOK with default headers values
func NewDeleteRecordingRuleOK() *DeleteRecordingRuleOK {
	return &DeleteRecordingRuleOK{}
}

/*
DeleteRecordingRuleOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteRecordingRuleOK struct {
	Payload models.Configv1DeleteRecordingRuleResponse
}

// IsSuccess returns true when this delete recording rule o k response has a 2xx status code
func (o *DeleteRecordingRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete recording rule o k response has a 3xx status code
func (o *DeleteRecordingRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording rule o k response has a 4xx status code
func (o *DeleteRecordingRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete recording rule o k response has a 5xx status code
func (o *DeleteRecordingRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording rule o k response a status code equal to that given
func (o *DeleteRecordingRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete recording rule o k response
func (o *DeleteRecordingRuleOK) Code() int {
	return 200
}

func (o *DeleteRecordingRuleOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/recording-rules/{slug}][%d] deleteRecordingRuleOK  %+v", 200, o.Payload)
}

func (o *DeleteRecordingRuleOK) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/recording-rules/{slug}][%d] deleteRecordingRuleOK  %+v", 200, o.Payload)
}

func (o *DeleteRecordingRuleOK) GetPayload() models.Configv1DeleteRecordingRuleResponse {
	return o.Payload
}

func (o *DeleteRecordingRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingRuleNotFound creates a DeleteRecordingRuleNotFound with default headers values
func NewDeleteRecordingRuleNotFound() *DeleteRecordingRuleNotFound {
	return &DeleteRecordingRuleNotFound{}
}

/*
DeleteRecordingRuleNotFound describes a response with status code 404, with default header values.

Cannot delete the RecordingRule because the slug does not exist.
*/
type DeleteRecordingRuleNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete recording rule not found response has a 2xx status code
func (o *DeleteRecordingRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording rule not found response has a 3xx status code
func (o *DeleteRecordingRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording rule not found response has a 4xx status code
func (o *DeleteRecordingRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete recording rule not found response has a 5xx status code
func (o *DeleteRecordingRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete recording rule not found response a status code equal to that given
func (o *DeleteRecordingRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete recording rule not found response
func (o *DeleteRecordingRuleNotFound) Code() int {
	return 404
}

func (o *DeleteRecordingRuleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/recording-rules/{slug}][%d] deleteRecordingRuleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRecordingRuleNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/recording-rules/{slug}][%d] deleteRecordingRuleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRecordingRuleNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteRecordingRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingRuleInternalServerError creates a DeleteRecordingRuleInternalServerError with default headers values
func NewDeleteRecordingRuleInternalServerError() *DeleteRecordingRuleInternalServerError {
	return &DeleteRecordingRuleInternalServerError{}
}

/*
DeleteRecordingRuleInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type DeleteRecordingRuleInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete recording rule internal server error response has a 2xx status code
func (o *DeleteRecordingRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete recording rule internal server error response has a 3xx status code
func (o *DeleteRecordingRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete recording rule internal server error response has a 4xx status code
func (o *DeleteRecordingRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete recording rule internal server error response has a 5xx status code
func (o *DeleteRecordingRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete recording rule internal server error response a status code equal to that given
func (o *DeleteRecordingRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete recording rule internal server error response
func (o *DeleteRecordingRuleInternalServerError) Code() int {
	return 500
}

func (o *DeleteRecordingRuleInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/recording-rules/{slug}][%d] deleteRecordingRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRecordingRuleInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/recording-rules/{slug}][%d] deleteRecordingRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRecordingRuleInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteRecordingRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingRuleDefault creates a DeleteRecordingRuleDefault with default headers values
func NewDeleteRecordingRuleDefault(code int) *DeleteRecordingRuleDefault {
	return &DeleteRecordingRuleDefault{
		_statusCode: code,
	}
}

/*
DeleteRecordingRuleDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type DeleteRecordingRuleDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this delete recording rule default response has a 2xx status code
func (o *DeleteRecordingRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete recording rule default response has a 3xx status code
func (o *DeleteRecordingRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete recording rule default response has a 4xx status code
func (o *DeleteRecordingRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete recording rule default response has a 5xx status code
func (o *DeleteRecordingRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete recording rule default response a status code equal to that given
func (o *DeleteRecordingRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete recording rule default response
func (o *DeleteRecordingRuleDefault) Code() int {
	return o._statusCode
}

func (o *DeleteRecordingRuleDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/recording-rules/{slug}][%d] DeleteRecordingRule default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteRecordingRuleDefault) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/recording-rules/{slug}][%d] DeleteRecordingRule default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteRecordingRuleDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *DeleteRecordingRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
