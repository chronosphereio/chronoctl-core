// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBucket(params *CreateBucketParams, opts ...ClientOption) (*CreateBucketOK, error)

	CreateClassicDashboard(params *CreateClassicDashboardParams, opts ...ClientOption) (*CreateClassicDashboardOK, error)

	CreateCollection(params *CreateCollectionParams, opts ...ClientOption) (*CreateCollectionOK, error)

	CreateConsumptionBudget(params *CreateConsumptionBudgetParams, opts ...ClientOption) (*CreateConsumptionBudgetOK, error)

	CreateConsumptionConfig(params *CreateConsumptionConfigParams, opts ...ClientOption) (*CreateConsumptionConfigOK, error)

	CreateDashboard(params *CreateDashboardParams, opts ...ClientOption) (*CreateDashboardOK, error)

	CreateDataset(params *CreateDatasetParams, opts ...ClientOption) (*CreateDatasetOK, error)

	CreateDerivedLabel(params *CreateDerivedLabelParams, opts ...ClientOption) (*CreateDerivedLabelOK, error)

	CreateDerivedMetric(params *CreateDerivedMetricParams, opts ...ClientOption) (*CreateDerivedMetricOK, error)

	CreateDropRule(params *CreateDropRuleParams, opts ...ClientOption) (*CreateDropRuleOK, error)

	CreateGcpMetricsIntegration(params *CreateGcpMetricsIntegrationParams, opts ...ClientOption) (*CreateGcpMetricsIntegrationOK, error)

	CreateGrafanaDashboard(params *CreateGrafanaDashboardParams, opts ...ClientOption) (*CreateGrafanaDashboardOK, error)

	CreateLogAllocationConfig(params *CreateLogAllocationConfigParams, opts ...ClientOption) (*CreateLogAllocationConfigOK, error)

	CreateLogControlConfig(params *CreateLogControlConfigParams, opts ...ClientOption) (*CreateLogControlConfigOK, error)

	CreateLogIngestConfig(params *CreateLogIngestConfigParams, opts ...ClientOption) (*CreateLogIngestConfigOK, error)

	CreateLogScaleAction(params *CreateLogScaleActionParams, opts ...ClientOption) (*CreateLogScaleActionOK, error)

	CreateLogScaleAlert(params *CreateLogScaleAlertParams, opts ...ClientOption) (*CreateLogScaleAlertOK, error)

	CreateMappingRule(params *CreateMappingRuleParams, opts ...ClientOption) (*CreateMappingRuleOK, error)

	CreateMonitor(params *CreateMonitorParams, opts ...ClientOption) (*CreateMonitorOK, error)

	CreateMutingRule(params *CreateMutingRuleParams, opts ...ClientOption) (*CreateMutingRuleOK, error)

	CreateNotificationPolicy(params *CreateNotificationPolicyParams, opts ...ClientOption) (*CreateNotificationPolicyOK, error)

	CreateNotifier(params *CreateNotifierParams, opts ...ClientOption) (*CreateNotifierOK, error)

	CreateOtelMetricsIngestion(params *CreateOtelMetricsIngestionParams, opts ...ClientOption) (*CreateOtelMetricsIngestionOK, error)

	CreateRecordingRule(params *CreateRecordingRuleParams, opts ...ClientOption) (*CreateRecordingRuleOK, error)

	CreateResourcePools(params *CreateResourcePoolsParams, opts ...ClientOption) (*CreateResourcePoolsOK, error)

	CreateRollupRule(params *CreateRollupRuleParams, opts ...ClientOption) (*CreateRollupRuleOK, error)

	CreateSLO(params *CreateSLOParams, opts ...ClientOption) (*CreateSLOOK, error)

	CreateServiceAccount(params *CreateServiceAccountParams, opts ...ClientOption) (*CreateServiceAccountOK, error)

	CreateTeam(params *CreateTeamParams, opts ...ClientOption) (*CreateTeamOK, error)

	CreateTraceBehavior(params *CreateTraceBehaviorParams, opts ...ClientOption) (*CreateTraceBehaviorOK, error)

	CreateTraceBehaviorConfig(params *CreateTraceBehaviorConfigParams, opts ...ClientOption) (*CreateTraceBehaviorConfigOK, error)

	CreateTraceJaegerRemoteSamplingStrategy(params *CreateTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*CreateTraceJaegerRemoteSamplingStrategyOK, error)

	CreateTraceMetricsRule(params *CreateTraceMetricsRuleParams, opts ...ClientOption) (*CreateTraceMetricsRuleOK, error)

	CreateTraceTailSamplingRules(params *CreateTraceTailSamplingRulesParams, opts ...ClientOption) (*CreateTraceTailSamplingRulesOK, error)

	DeleteBucket(params *DeleteBucketParams, opts ...ClientOption) (*DeleteBucketOK, error)

	DeleteClassicDashboard(params *DeleteClassicDashboardParams, opts ...ClientOption) (*DeleteClassicDashboardOK, error)

	DeleteCollection(params *DeleteCollectionParams, opts ...ClientOption) (*DeleteCollectionOK, error)

	DeleteConsumptionBudget(params *DeleteConsumptionBudgetParams, opts ...ClientOption) (*DeleteConsumptionBudgetOK, error)

	DeleteConsumptionConfig(params *DeleteConsumptionConfigParams, opts ...ClientOption) (*DeleteConsumptionConfigOK, error)

	DeleteDashboard(params *DeleteDashboardParams, opts ...ClientOption) (*DeleteDashboardOK, error)

	DeleteDataset(params *DeleteDatasetParams, opts ...ClientOption) (*DeleteDatasetOK, error)

	DeleteDerivedLabel(params *DeleteDerivedLabelParams, opts ...ClientOption) (*DeleteDerivedLabelOK, error)

	DeleteDerivedMetric(params *DeleteDerivedMetricParams, opts ...ClientOption) (*DeleteDerivedMetricOK, error)

	DeleteDropRule(params *DeleteDropRuleParams, opts ...ClientOption) (*DeleteDropRuleOK, error)

	DeleteGcpMetricsIntegration(params *DeleteGcpMetricsIntegrationParams, opts ...ClientOption) (*DeleteGcpMetricsIntegrationOK, error)

	DeleteGrafanaDashboard(params *DeleteGrafanaDashboardParams, opts ...ClientOption) (*DeleteGrafanaDashboardOK, error)

	DeleteLogAllocationConfig(params *DeleteLogAllocationConfigParams, opts ...ClientOption) (*DeleteLogAllocationConfigOK, error)

	DeleteLogControlConfig(params *DeleteLogControlConfigParams, opts ...ClientOption) (*DeleteLogControlConfigOK, error)

	DeleteLogIngestConfig(params *DeleteLogIngestConfigParams, opts ...ClientOption) (*DeleteLogIngestConfigOK, error)

	DeleteLogScaleAction(params *DeleteLogScaleActionParams, opts ...ClientOption) (*DeleteLogScaleActionOK, error)

	DeleteLogScaleAlert(params *DeleteLogScaleAlertParams, opts ...ClientOption) (*DeleteLogScaleAlertOK, error)

	DeleteMappingRule(params *DeleteMappingRuleParams, opts ...ClientOption) (*DeleteMappingRuleOK, error)

	DeleteMonitor(params *DeleteMonitorParams, opts ...ClientOption) (*DeleteMonitorOK, error)

	DeleteMutingRule(params *DeleteMutingRuleParams, opts ...ClientOption) (*DeleteMutingRuleOK, error)

	DeleteNotificationPolicy(params *DeleteNotificationPolicyParams, opts ...ClientOption) (*DeleteNotificationPolicyOK, error)

	DeleteNotifier(params *DeleteNotifierParams, opts ...ClientOption) (*DeleteNotifierOK, error)

	DeleteOtelMetricsIngestion(params *DeleteOtelMetricsIngestionParams, opts ...ClientOption) (*DeleteOtelMetricsIngestionOK, error)

	DeleteRecordingRule(params *DeleteRecordingRuleParams, opts ...ClientOption) (*DeleteRecordingRuleOK, error)

	DeleteResourcePools(params *DeleteResourcePoolsParams, opts ...ClientOption) (*DeleteResourcePoolsOK, error)

	DeleteRollupRule(params *DeleteRollupRuleParams, opts ...ClientOption) (*DeleteRollupRuleOK, error)

	DeleteSLO(params *DeleteSLOParams, opts ...ClientOption) (*DeleteSLOOK, error)

	DeleteServiceAccount(params *DeleteServiceAccountParams, opts ...ClientOption) (*DeleteServiceAccountOK, error)

	DeleteTeam(params *DeleteTeamParams, opts ...ClientOption) (*DeleteTeamOK, error)

	DeleteTraceBehavior(params *DeleteTraceBehaviorParams, opts ...ClientOption) (*DeleteTraceBehaviorOK, error)

	DeleteTraceBehaviorConfig(params *DeleteTraceBehaviorConfigParams, opts ...ClientOption) (*DeleteTraceBehaviorConfigOK, error)

	DeleteTraceJaegerRemoteSamplingStrategy(params *DeleteTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*DeleteTraceJaegerRemoteSamplingStrategyOK, error)

	DeleteTraceMetricsRule(params *DeleteTraceMetricsRuleParams, opts ...ClientOption) (*DeleteTraceMetricsRuleOK, error)

	DeleteTraceTailSamplingRules(params *DeleteTraceTailSamplingRulesParams, opts ...ClientOption) (*DeleteTraceTailSamplingRulesOK, error)

	ListBuckets(params *ListBucketsParams, opts ...ClientOption) (*ListBucketsOK, error)

	ListClassicDashboards(params *ListClassicDashboardsParams, opts ...ClientOption) (*ListClassicDashboardsOK, error)

	ListCollections(params *ListCollectionsParams, opts ...ClientOption) (*ListCollectionsOK, error)

	ListConsumptionBudgets(params *ListConsumptionBudgetsParams, opts ...ClientOption) (*ListConsumptionBudgetsOK, error)

	ListDashboards(params *ListDashboardsParams, opts ...ClientOption) (*ListDashboardsOK, error)

	ListDatasets(params *ListDatasetsParams, opts ...ClientOption) (*ListDatasetsOK, error)

	ListDerivedLabels(params *ListDerivedLabelsParams, opts ...ClientOption) (*ListDerivedLabelsOK, error)

	ListDerivedMetrics(params *ListDerivedMetricsParams, opts ...ClientOption) (*ListDerivedMetricsOK, error)

	ListDropRules(params *ListDropRulesParams, opts ...ClientOption) (*ListDropRulesOK, error)

	ListGcpMetricsIntegrations(params *ListGcpMetricsIntegrationsParams, opts ...ClientOption) (*ListGcpMetricsIntegrationsOK, error)

	ListGrafanaDashboards(params *ListGrafanaDashboardsParams, opts ...ClientOption) (*ListGrafanaDashboardsOK, error)

	ListLogScaleActions(params *ListLogScaleActionsParams, opts ...ClientOption) (*ListLogScaleActionsOK, error)

	ListLogScaleAlerts(params *ListLogScaleAlertsParams, opts ...ClientOption) (*ListLogScaleAlertsOK, error)

	ListMappingRules(params *ListMappingRulesParams, opts ...ClientOption) (*ListMappingRulesOK, error)

	ListMonitors(params *ListMonitorsParams, opts ...ClientOption) (*ListMonitorsOK, error)

	ListMutingRules(params *ListMutingRulesParams, opts ...ClientOption) (*ListMutingRulesOK, error)

	ListNotificationPolicies(params *ListNotificationPoliciesParams, opts ...ClientOption) (*ListNotificationPoliciesOK, error)

	ListNotifiers(params *ListNotifiersParams, opts ...ClientOption) (*ListNotifiersOK, error)

	ListRecordingRules(params *ListRecordingRulesParams, opts ...ClientOption) (*ListRecordingRulesOK, error)

	ListRollupRules(params *ListRollupRulesParams, opts ...ClientOption) (*ListRollupRulesOK, error)

	ListSLOs(params *ListSLOsParams, opts ...ClientOption) (*ListSLOsOK, error)

	ListServiceAccounts(params *ListServiceAccountsParams, opts ...ClientOption) (*ListServiceAccountsOK, error)

	ListServices(params *ListServicesParams, opts ...ClientOption) (*ListServicesOK, error)

	ListTeams(params *ListTeamsParams, opts ...ClientOption) (*ListTeamsOK, error)

	ListTraceBehaviors(params *ListTraceBehaviorsParams, opts ...ClientOption) (*ListTraceBehaviorsOK, error)

	ListTraceJaegerRemoteSamplingStrategies(params *ListTraceJaegerRemoteSamplingStrategiesParams, opts ...ClientOption) (*ListTraceJaegerRemoteSamplingStrategiesOK, error)

	ListTraceMetricsRules(params *ListTraceMetricsRulesParams, opts ...ClientOption) (*ListTraceMetricsRulesOK, error)

	ReadBucket(params *ReadBucketParams, opts ...ClientOption) (*ReadBucketOK, error)

	ReadClassicDashboard(params *ReadClassicDashboardParams, opts ...ClientOption) (*ReadClassicDashboardOK, error)

	ReadCollection(params *ReadCollectionParams, opts ...ClientOption) (*ReadCollectionOK, error)

	ReadConsumptionBudget(params *ReadConsumptionBudgetParams, opts ...ClientOption) (*ReadConsumptionBudgetOK, error)

	ReadConsumptionConfig(params *ReadConsumptionConfigParams, opts ...ClientOption) (*ReadConsumptionConfigOK, error)

	ReadDashboard(params *ReadDashboardParams, opts ...ClientOption) (*ReadDashboardOK, error)

	ReadDataset(params *ReadDatasetParams, opts ...ClientOption) (*ReadDatasetOK, error)

	ReadDerivedLabel(params *ReadDerivedLabelParams, opts ...ClientOption) (*ReadDerivedLabelOK, error)

	ReadDerivedMetric(params *ReadDerivedMetricParams, opts ...ClientOption) (*ReadDerivedMetricOK, error)

	ReadDropRule(params *ReadDropRuleParams, opts ...ClientOption) (*ReadDropRuleOK, error)

	ReadGcpMetricsIntegration(params *ReadGcpMetricsIntegrationParams, opts ...ClientOption) (*ReadGcpMetricsIntegrationOK, error)

	ReadGrafanaDashboard(params *ReadGrafanaDashboardParams, opts ...ClientOption) (*ReadGrafanaDashboardOK, error)

	ReadLogAllocationConfig(params *ReadLogAllocationConfigParams, opts ...ClientOption) (*ReadLogAllocationConfigOK, error)

	ReadLogControlConfig(params *ReadLogControlConfigParams, opts ...ClientOption) (*ReadLogControlConfigOK, error)

	ReadLogIngestConfig(params *ReadLogIngestConfigParams, opts ...ClientOption) (*ReadLogIngestConfigOK, error)

	ReadLogScaleAction(params *ReadLogScaleActionParams, opts ...ClientOption) (*ReadLogScaleActionOK, error)

	ReadLogScaleAlert(params *ReadLogScaleAlertParams, opts ...ClientOption) (*ReadLogScaleAlertOK, error)

	ReadMappingRule(params *ReadMappingRuleParams, opts ...ClientOption) (*ReadMappingRuleOK, error)

	ReadMonitor(params *ReadMonitorParams, opts ...ClientOption) (*ReadMonitorOK, error)

	ReadMutingRule(params *ReadMutingRuleParams, opts ...ClientOption) (*ReadMutingRuleOK, error)

	ReadNotificationPolicy(params *ReadNotificationPolicyParams, opts ...ClientOption) (*ReadNotificationPolicyOK, error)

	ReadNotifier(params *ReadNotifierParams, opts ...ClientOption) (*ReadNotifierOK, error)

	ReadOtelMetricsIngestion(params *ReadOtelMetricsIngestionParams, opts ...ClientOption) (*ReadOtelMetricsIngestionOK, error)

	ReadRecordingRule(params *ReadRecordingRuleParams, opts ...ClientOption) (*ReadRecordingRuleOK, error)

	ReadResourcePools(params *ReadResourcePoolsParams, opts ...ClientOption) (*ReadResourcePoolsOK, error)

	ReadRollupRule(params *ReadRollupRuleParams, opts ...ClientOption) (*ReadRollupRuleOK, error)

	ReadSLO(params *ReadSLOParams, opts ...ClientOption) (*ReadSLOOK, error)

	ReadService(params *ReadServiceParams, opts ...ClientOption) (*ReadServiceOK, error)

	ReadServiceAccount(params *ReadServiceAccountParams, opts ...ClientOption) (*ReadServiceAccountOK, error)

	ReadTeam(params *ReadTeamParams, opts ...ClientOption) (*ReadTeamOK, error)

	ReadTraceBehavior(params *ReadTraceBehaviorParams, opts ...ClientOption) (*ReadTraceBehaviorOK, error)

	ReadTraceBehaviorConfig(params *ReadTraceBehaviorConfigParams, opts ...ClientOption) (*ReadTraceBehaviorConfigOK, error)

	ReadTraceJaegerRemoteSamplingStrategy(params *ReadTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*ReadTraceJaegerRemoteSamplingStrategyOK, error)

	ReadTraceMetricsRule(params *ReadTraceMetricsRuleParams, opts ...ClientOption) (*ReadTraceMetricsRuleOK, error)

	ReadTraceTailSamplingRules(params *ReadTraceTailSamplingRulesParams, opts ...ClientOption) (*ReadTraceTailSamplingRulesOK, error)

	UpdateBucket(params *UpdateBucketParams, opts ...ClientOption) (*UpdateBucketOK, error)

	UpdateClassicDashboard(params *UpdateClassicDashboardParams, opts ...ClientOption) (*UpdateClassicDashboardOK, error)

	UpdateCollection(params *UpdateCollectionParams, opts ...ClientOption) (*UpdateCollectionOK, error)

	UpdateConsumptionBudget(params *UpdateConsumptionBudgetParams, opts ...ClientOption) (*UpdateConsumptionBudgetOK, error)

	UpdateConsumptionConfig(params *UpdateConsumptionConfigParams, opts ...ClientOption) (*UpdateConsumptionConfigOK, error)

	UpdateDashboard(params *UpdateDashboardParams, opts ...ClientOption) (*UpdateDashboardOK, error)

	UpdateDataset(params *UpdateDatasetParams, opts ...ClientOption) (*UpdateDatasetOK, error)

	UpdateDerivedLabel(params *UpdateDerivedLabelParams, opts ...ClientOption) (*UpdateDerivedLabelOK, error)

	UpdateDerivedMetric(params *UpdateDerivedMetricParams, opts ...ClientOption) (*UpdateDerivedMetricOK, error)

	UpdateDropRule(params *UpdateDropRuleParams, opts ...ClientOption) (*UpdateDropRuleOK, error)

	UpdateGcpMetricsIntegration(params *UpdateGcpMetricsIntegrationParams, opts ...ClientOption) (*UpdateGcpMetricsIntegrationOK, error)

	UpdateGrafanaDashboard(params *UpdateGrafanaDashboardParams, opts ...ClientOption) (*UpdateGrafanaDashboardOK, error)

	UpdateLogAllocationConfig(params *UpdateLogAllocationConfigParams, opts ...ClientOption) (*UpdateLogAllocationConfigOK, error)

	UpdateLogControlConfig(params *UpdateLogControlConfigParams, opts ...ClientOption) (*UpdateLogControlConfigOK, error)

	UpdateLogIngestConfig(params *UpdateLogIngestConfigParams, opts ...ClientOption) (*UpdateLogIngestConfigOK, error)

	UpdateLogScaleAction(params *UpdateLogScaleActionParams, opts ...ClientOption) (*UpdateLogScaleActionOK, error)

	UpdateLogScaleAlert(params *UpdateLogScaleAlertParams, opts ...ClientOption) (*UpdateLogScaleAlertOK, error)

	UpdateMappingRule(params *UpdateMappingRuleParams, opts ...ClientOption) (*UpdateMappingRuleOK, error)

	UpdateMonitor(params *UpdateMonitorParams, opts ...ClientOption) (*UpdateMonitorOK, error)

	UpdateMutingRule(params *UpdateMutingRuleParams, opts ...ClientOption) (*UpdateMutingRuleOK, error)

	UpdateNotificationPolicy(params *UpdateNotificationPolicyParams, opts ...ClientOption) (*UpdateNotificationPolicyOK, error)

	UpdateNotifier(params *UpdateNotifierParams, opts ...ClientOption) (*UpdateNotifierOK, error)

	UpdateOtelMetricsIngestion(params *UpdateOtelMetricsIngestionParams, opts ...ClientOption) (*UpdateOtelMetricsIngestionOK, error)

	UpdateRecordingRule(params *UpdateRecordingRuleParams, opts ...ClientOption) (*UpdateRecordingRuleOK, error)

	UpdateResourcePools(params *UpdateResourcePoolsParams, opts ...ClientOption) (*UpdateResourcePoolsOK, error)

	UpdateRollupRule(params *UpdateRollupRuleParams, opts ...ClientOption) (*UpdateRollupRuleOK, error)

	UpdateSLO(params *UpdateSLOParams, opts ...ClientOption) (*UpdateSLOOK, error)

	UpdateTeam(params *UpdateTeamParams, opts ...ClientOption) (*UpdateTeamOK, error)

	UpdateTraceBehavior(params *UpdateTraceBehaviorParams, opts ...ClientOption) (*UpdateTraceBehaviorOK, error)

	UpdateTraceBehaviorConfig(params *UpdateTraceBehaviorConfigParams, opts ...ClientOption) (*UpdateTraceBehaviorConfigOK, error)

	UpdateTraceJaegerRemoteSamplingStrategy(params *UpdateTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*UpdateTraceJaegerRemoteSamplingStrategyOK, error)

	UpdateTraceMetricsRule(params *UpdateTraceMetricsRuleParams, opts ...ClientOption) (*UpdateTraceMetricsRuleOK, error)

	UpdateTraceTailSamplingRules(params *UpdateTraceTailSamplingRulesParams, opts ...ClientOption) (*UpdateTraceTailSamplingRulesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateBucket create bucket API
*/
func (a *Client) CreateBucket(params *CreateBucketParams, opts ...ClientOption) (*CreateBucketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBucketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateBucket",
		Method:             "POST",
		PathPattern:        "/api/v1/config/buckets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBucketReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBucketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateBucketDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateClassicDashboard create classic dashboard API
*/
func (a *Client) CreateClassicDashboard(params *CreateClassicDashboardParams, opts ...ClientOption) (*CreateClassicDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClassicDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateClassicDashboard",
		Method:             "POST",
		PathPattern:        "/api/v1/config/classic-dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateClassicDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClassicDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateClassicDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateCollection create collection API
*/
func (a *Client) CreateCollection(params *CreateCollectionParams, opts ...ClientOption) (*CreateCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCollectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCollection",
		Method:             "POST",
		PathPattern:        "/api/v1/config/collections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCollectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateCollectionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateConsumptionBudget create consumption budget API
*/
func (a *Client) CreateConsumptionBudget(params *CreateConsumptionBudgetParams, opts ...ClientOption) (*CreateConsumptionBudgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConsumptionBudgetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateConsumptionBudget",
		Method:             "POST",
		PathPattern:        "/api/v1/config/consumption-budgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateConsumptionBudgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateConsumptionBudgetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateConsumptionBudgetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateConsumptionConfig create consumption config API
*/
func (a *Client) CreateConsumptionConfig(params *CreateConsumptionConfigParams, opts ...ClientOption) (*CreateConsumptionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConsumptionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateConsumptionConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/config/consumption-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateConsumptionConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateConsumptionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateConsumptionConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDashboard create dashboard API
*/
func (a *Client) CreateDashboard(params *CreateDashboardParams, opts ...ClientOption) (*CreateDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDashboard",
		Method:             "POST",
		PathPattern:        "/api/v1/config/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDataset create dataset API
*/
func (a *Client) CreateDataset(params *CreateDatasetParams, opts ...ClientOption) (*CreateDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataset",
		Method:             "POST",
		PathPattern:        "/api/v1/config/datasets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDatasetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDerivedLabel create derived label API
*/
func (a *Client) CreateDerivedLabel(params *CreateDerivedLabelParams, opts ...ClientOption) (*CreateDerivedLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDerivedLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDerivedLabel",
		Method:             "POST",
		PathPattern:        "/api/v1/config/derived-labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDerivedLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDerivedLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDerivedLabelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDerivedMetric create derived metric API
*/
func (a *Client) CreateDerivedMetric(params *CreateDerivedMetricParams, opts ...ClientOption) (*CreateDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDerivedMetric",
		Method:             "POST",
		PathPattern:        "/api/v1/config/derived-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDerivedMetricReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDerivedMetricDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDropRule create drop rule API
*/
func (a *Client) CreateDropRule(params *CreateDropRuleParams, opts ...ClientOption) (*CreateDropRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDropRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDropRule",
		Method:             "POST",
		PathPattern:        "/api/v1/config/drop-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDropRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDropRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDropRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateGcpMetricsIntegration create gcp metrics integration API
*/
func (a *Client) CreateGcpMetricsIntegration(params *CreateGcpMetricsIntegrationParams, opts ...ClientOption) (*CreateGcpMetricsIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGcpMetricsIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateGcpMetricsIntegration",
		Method:             "POST",
		PathPattern:        "/api/v1/config/gcp-metrics-integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGcpMetricsIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGcpMetricsIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateGcpMetricsIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateGrafanaDashboard create grafana dashboard API
*/
func (a *Client) CreateGrafanaDashboard(params *CreateGrafanaDashboardParams, opts ...ClientOption) (*CreateGrafanaDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGrafanaDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateGrafanaDashboard",
		Method:             "POST",
		PathPattern:        "/api/v1/config/grafana-dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGrafanaDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGrafanaDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateGrafanaDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateLogAllocationConfig create log allocation config API
*/
func (a *Client) CreateLogAllocationConfig(params *CreateLogAllocationConfigParams, opts ...ClientOption) (*CreateLogAllocationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLogAllocationConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateLogAllocationConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/config/log-allocation-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLogAllocationConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLogAllocationConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateLogAllocationConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateLogControlConfig create log control config API
*/
func (a *Client) CreateLogControlConfig(params *CreateLogControlConfigParams, opts ...ClientOption) (*CreateLogControlConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLogControlConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateLogControlConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/config/log-control-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLogControlConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLogControlConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateLogControlConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateLogIngestConfig create log ingest config API
*/
func (a *Client) CreateLogIngestConfig(params *CreateLogIngestConfigParams, opts ...ClientOption) (*CreateLogIngestConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLogIngestConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateLogIngestConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/config/log-ingest-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLogIngestConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLogIngestConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateLogIngestConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateLogScaleAction create log scale action API
*/
func (a *Client) CreateLogScaleAction(params *CreateLogScaleActionParams, opts ...ClientOption) (*CreateLogScaleActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLogScaleActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateLogScaleAction",
		Method:             "POST",
		PathPattern:        "/api/v1/config/log-scale-actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLogScaleActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLogScaleActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateLogScaleActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateLogScaleAlert create log scale alert API
*/
func (a *Client) CreateLogScaleAlert(params *CreateLogScaleAlertParams, opts ...ClientOption) (*CreateLogScaleAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLogScaleAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateLogScaleAlert",
		Method:             "POST",
		PathPattern:        "/api/v1/config/log-scale-alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLogScaleAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLogScaleAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateLogScaleAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateMappingRule create mapping rule API
*/
func (a *Client) CreateMappingRule(params *CreateMappingRuleParams, opts ...ClientOption) (*CreateMappingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMappingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMappingRule",
		Method:             "POST",
		PathPattern:        "/api/v1/config/mapping-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMappingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMappingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMappingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateMonitor create monitor API
*/
func (a *Client) CreateMonitor(params *CreateMonitorParams, opts ...ClientOption) (*CreateMonitorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMonitorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMonitor",
		Method:             "POST",
		PathPattern:        "/api/v1/config/monitors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMonitorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMonitorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMonitorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateMutingRule create muting rule API
*/
func (a *Client) CreateMutingRule(params *CreateMutingRuleParams, opts ...ClientOption) (*CreateMutingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMutingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateMutingRule",
		Method:             "POST",
		PathPattern:        "/api/v1/config/muting-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMutingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMutingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMutingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateNotificationPolicy create notification policy API
*/
func (a *Client) CreateNotificationPolicy(params *CreateNotificationPolicyParams, opts ...ClientOption) (*CreateNotificationPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNotificationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNotificationPolicy",
		Method:             "POST",
		PathPattern:        "/api/v1/config/notification-policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNotificationPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNotificationPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateNotificationPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateNotifier create notifier API
*/
func (a *Client) CreateNotifier(params *CreateNotifierParams, opts ...ClientOption) (*CreateNotifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNotifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNotifier",
		Method:             "POST",
		PathPattern:        "/api/v1/config/notifiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNotifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNotifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateNotifierDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateOtelMetricsIngestion create otel metrics ingestion API
*/
func (a *Client) CreateOtelMetricsIngestion(params *CreateOtelMetricsIngestionParams, opts ...ClientOption) (*CreateOtelMetricsIngestionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOtelMetricsIngestionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOtelMetricsIngestion",
		Method:             "POST",
		PathPattern:        "/api/v1/config/otel-metrics-ingestion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOtelMetricsIngestionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOtelMetricsIngestionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOtelMetricsIngestionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateRecordingRule create recording rule API
*/
func (a *Client) CreateRecordingRule(params *CreateRecordingRuleParams, opts ...ClientOption) (*CreateRecordingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRecordingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRecordingRule",
		Method:             "POST",
		PathPattern:        "/api/v1/config/recording-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRecordingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRecordingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRecordingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateResourcePools ResourcePools CRUD (subset for singleton objects)
*/
func (a *Client) CreateResourcePools(params *CreateResourcePoolsParams, opts ...ClientOption) (*CreateResourcePoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResourcePoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateResourcePools",
		Method:             "POST",
		PathPattern:        "/api/v1/config/resource-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResourcePoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateResourcePoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateResourcePoolsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateRollupRule create rollup rule API
*/
func (a *Client) CreateRollupRule(params *CreateRollupRuleParams, opts ...ClientOption) (*CreateRollupRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRollupRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRollupRule",
		Method:             "POST",
		PathPattern:        "/api/v1/config/rollup-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRollupRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRollupRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRollupRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateSLO create SLO API
*/
func (a *Client) CreateSLO(params *CreateSLOParams, opts ...ClientOption) (*CreateSLOOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSLOParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSLO",
		Method:             "POST",
		PathPattern:        "/api/v1/config/slos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSLOReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSLOOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSLODefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateServiceAccount create service account API
*/
func (a *Client) CreateServiceAccount(params *CreateServiceAccountParams, opts ...ClientOption) (*CreateServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateServiceAccount",
		Method:             "POST",
		PathPattern:        "/api/v1/config/service-accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateServiceAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateServiceAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateTeam create team API
*/
func (a *Client) CreateTeam(params *CreateTeamParams, opts ...ClientOption) (*CreateTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTeam",
		Method:             "POST",
		PathPattern:        "/api/v1/config/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTeamDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateTraceBehavior create trace behavior API
*/
func (a *Client) CreateTraceBehavior(params *CreateTraceBehaviorParams, opts ...ClientOption) (*CreateTraceBehaviorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTraceBehaviorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTraceBehavior",
		Method:             "POST",
		PathPattern:        "/api/v1/config/trace-behaviors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTraceBehaviorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTraceBehaviorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTraceBehaviorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateTraceBehaviorConfig create trace behavior config API
*/
func (a *Client) CreateTraceBehaviorConfig(params *CreateTraceBehaviorConfigParams, opts ...ClientOption) (*CreateTraceBehaviorConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTraceBehaviorConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTraceBehaviorConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/config/trace-behavior-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTraceBehaviorConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTraceBehaviorConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTraceBehaviorConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateTraceJaegerRemoteSamplingStrategy create trace jaeger remote sampling strategy API
*/
func (a *Client) CreateTraceJaegerRemoteSamplingStrategy(params *CreateTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*CreateTraceJaegerRemoteSamplingStrategyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTraceJaegerRemoteSamplingStrategyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTraceJaegerRemoteSamplingStrategy",
		Method:             "POST",
		PathPattern:        "/api/v1/config/trace-jaeger-remote-sampling-strategies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTraceJaegerRemoteSamplingStrategyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTraceJaegerRemoteSamplingStrategyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTraceJaegerRemoteSamplingStrategyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CreateTraceMetricsRule ***

Trace Metrics Rules
***
*/
func (a *Client) CreateTraceMetricsRule(params *CreateTraceMetricsRuleParams, opts ...ClientOption) (*CreateTraceMetricsRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTraceMetricsRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTraceMetricsRule",
		Method:             "POST",
		PathPattern:        "/api/v1/config/trace-metrics-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTraceMetricsRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTraceMetricsRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTraceMetricsRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateTraceTailSamplingRules TraceTailSamplingRules CRUD (subset for singleton objects)
*/
func (a *Client) CreateTraceTailSamplingRules(params *CreateTraceTailSamplingRulesParams, opts ...ClientOption) (*CreateTraceTailSamplingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTraceTailSamplingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTraceTailSamplingRules",
		Method:             "POST",
		PathPattern:        "/api/v1/config/trace-tail-sampling-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTraceTailSamplingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTraceTailSamplingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTraceTailSamplingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteBucket delete bucket API
*/
func (a *Client) DeleteBucket(params *DeleteBucketParams, opts ...ClientOption) (*DeleteBucketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBucketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBucket",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/buckets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBucketReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBucketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteBucketDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteClassicDashboard delete classic dashboard API
*/
func (a *Client) DeleteClassicDashboard(params *DeleteClassicDashboardParams, opts ...ClientOption) (*DeleteClassicDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClassicDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteClassicDashboard",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/classic-dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClassicDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClassicDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteClassicDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteCollection delete collection API
*/
func (a *Client) DeleteCollection(params *DeleteCollectionParams, opts ...ClientOption) (*DeleteCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCollectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCollection",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/collections/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCollectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCollectionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteConsumptionBudget delete consumption budget API
*/
func (a *Client) DeleteConsumptionBudget(params *DeleteConsumptionBudgetParams, opts ...ClientOption) (*DeleteConsumptionBudgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConsumptionBudgetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteConsumptionBudget",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/consumption-budgets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteConsumptionBudgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConsumptionBudgetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteConsumptionBudgetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteConsumptionConfig delete consumption config API
*/
func (a *Client) DeleteConsumptionConfig(params *DeleteConsumptionConfigParams, opts ...ClientOption) (*DeleteConsumptionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConsumptionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteConsumptionConfig",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/consumption-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteConsumptionConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConsumptionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteConsumptionConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDashboard delete dashboard API
*/
func (a *Client) DeleteDashboard(params *DeleteDashboardParams, opts ...ClientOption) (*DeleteDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDashboard",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDataset delete dataset API
*/
func (a *Client) DeleteDataset(params *DeleteDatasetParams, opts ...ClientOption) (*DeleteDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataset",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/datasets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDatasetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDerivedLabel delete derived label API
*/
func (a *Client) DeleteDerivedLabel(params *DeleteDerivedLabelParams, opts ...ClientOption) (*DeleteDerivedLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDerivedLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDerivedLabel",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/derived-labels/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDerivedLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDerivedLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDerivedLabelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDerivedMetric delete derived metric API
*/
func (a *Client) DeleteDerivedMetric(params *DeleteDerivedMetricParams, opts ...ClientOption) (*DeleteDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDerivedMetric",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/derived-metrics/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDerivedMetricReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDerivedMetricDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDropRule delete drop rule API
*/
func (a *Client) DeleteDropRule(params *DeleteDropRuleParams, opts ...ClientOption) (*DeleteDropRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDropRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDropRule",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/drop-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDropRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDropRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDropRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteGcpMetricsIntegration delete gcp metrics integration API
*/
func (a *Client) DeleteGcpMetricsIntegration(params *DeleteGcpMetricsIntegrationParams, opts ...ClientOption) (*DeleteGcpMetricsIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGcpMetricsIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteGcpMetricsIntegration",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/gcp-metrics-integrations/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGcpMetricsIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGcpMetricsIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteGcpMetricsIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteGrafanaDashboard delete grafana dashboard API
*/
func (a *Client) DeleteGrafanaDashboard(params *DeleteGrafanaDashboardParams, opts ...ClientOption) (*DeleteGrafanaDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGrafanaDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteGrafanaDashboard",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/grafana-dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGrafanaDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGrafanaDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteGrafanaDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteLogAllocationConfig delete log allocation config API
*/
func (a *Client) DeleteLogAllocationConfig(params *DeleteLogAllocationConfigParams, opts ...ClientOption) (*DeleteLogAllocationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLogAllocationConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLogAllocationConfig",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/log-allocation-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLogAllocationConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLogAllocationConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLogAllocationConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteLogControlConfig delete log control config API
*/
func (a *Client) DeleteLogControlConfig(params *DeleteLogControlConfigParams, opts ...ClientOption) (*DeleteLogControlConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLogControlConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLogControlConfig",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/log-control-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLogControlConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLogControlConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLogControlConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteLogIngestConfig delete log ingest config API
*/
func (a *Client) DeleteLogIngestConfig(params *DeleteLogIngestConfigParams, opts ...ClientOption) (*DeleteLogIngestConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLogIngestConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLogIngestConfig",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/log-ingest-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLogIngestConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLogIngestConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLogIngestConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteLogScaleAction delete log scale action API
*/
func (a *Client) DeleteLogScaleAction(params *DeleteLogScaleActionParams, opts ...ClientOption) (*DeleteLogScaleActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLogScaleActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLogScaleAction",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/log-scale-actions/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLogScaleActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLogScaleActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLogScaleActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteLogScaleAlert delete log scale alert API
*/
func (a *Client) DeleteLogScaleAlert(params *DeleteLogScaleAlertParams, opts ...ClientOption) (*DeleteLogScaleAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLogScaleAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLogScaleAlert",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/log-scale-alerts/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLogScaleAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLogScaleAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLogScaleAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMappingRule delete mapping rule API
*/
func (a *Client) DeleteMappingRule(params *DeleteMappingRuleParams, opts ...ClientOption) (*DeleteMappingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMappingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMappingRule",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/mapping-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMappingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMappingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMappingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMonitor delete monitor API
*/
func (a *Client) DeleteMonitor(params *DeleteMonitorParams, opts ...ClientOption) (*DeleteMonitorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMonitorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMonitor",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/monitors/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMonitorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMonitorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMonitorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMutingRule delete muting rule API
*/
func (a *Client) DeleteMutingRule(params *DeleteMutingRuleParams, opts ...ClientOption) (*DeleteMutingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMutingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMutingRule",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/muting-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMutingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMutingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMutingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteNotificationPolicy delete notification policy API
*/
func (a *Client) DeleteNotificationPolicy(params *DeleteNotificationPolicyParams, opts ...ClientOption) (*DeleteNotificationPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNotificationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNotificationPolicy",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/notification-policies/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNotificationPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNotificationPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNotificationPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteNotifier delete notifier API
*/
func (a *Client) DeleteNotifier(params *DeleteNotifierParams, opts ...ClientOption) (*DeleteNotifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNotifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNotifier",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/notifiers/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNotifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNotifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNotifierDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteOtelMetricsIngestion delete otel metrics ingestion API
*/
func (a *Client) DeleteOtelMetricsIngestion(params *DeleteOtelMetricsIngestionParams, opts ...ClientOption) (*DeleteOtelMetricsIngestionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOtelMetricsIngestionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOtelMetricsIngestion",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/otel-metrics-ingestion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOtelMetricsIngestionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOtelMetricsIngestionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteOtelMetricsIngestionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteRecordingRule delete recording rule API
*/
func (a *Client) DeleteRecordingRule(params *DeleteRecordingRuleParams, opts ...ClientOption) (*DeleteRecordingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRecordingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRecordingRule",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/recording-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRecordingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRecordingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteRecordingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteResourcePools delete resource pools API
*/
func (a *Client) DeleteResourcePools(params *DeleteResourcePoolsParams, opts ...ClientOption) (*DeleteResourcePoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourcePoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteResourcePools",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/resource-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteResourcePoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResourcePoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteResourcePoolsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteRollupRule delete rollup rule API
*/
func (a *Client) DeleteRollupRule(params *DeleteRollupRuleParams, opts ...ClientOption) (*DeleteRollupRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRollupRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRollupRule",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/rollup-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRollupRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRollupRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteRollupRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteSLO delete SLO API
*/
func (a *Client) DeleteSLO(params *DeleteSLOParams, opts ...ClientOption) (*DeleteSLOOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSLOParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSLO",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/slos/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSLOReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSLOOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSLODefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteServiceAccount delete service account API
*/
func (a *Client) DeleteServiceAccount(params *DeleteServiceAccountParams, opts ...ClientOption) (*DeleteServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteServiceAccount",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/service-accounts/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteServiceAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteServiceAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTeam delete team API
*/
func (a *Client) DeleteTeam(params *DeleteTeamParams, opts ...ClientOption) (*DeleteTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTeam",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/teams/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTeamDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTraceBehavior delete trace behavior API
*/
func (a *Client) DeleteTraceBehavior(params *DeleteTraceBehaviorParams, opts ...ClientOption) (*DeleteTraceBehaviorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTraceBehaviorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTraceBehavior",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/trace-behaviors/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTraceBehaviorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTraceBehaviorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTraceBehaviorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTraceBehaviorConfig delete trace behavior config API
*/
func (a *Client) DeleteTraceBehaviorConfig(params *DeleteTraceBehaviorConfigParams, opts ...ClientOption) (*DeleteTraceBehaviorConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTraceBehaviorConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTraceBehaviorConfig",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/trace-behavior-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTraceBehaviorConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTraceBehaviorConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTraceBehaviorConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTraceJaegerRemoteSamplingStrategy delete trace jaeger remote sampling strategy API
*/
func (a *Client) DeleteTraceJaegerRemoteSamplingStrategy(params *DeleteTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*DeleteTraceJaegerRemoteSamplingStrategyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTraceJaegerRemoteSamplingStrategyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTraceJaegerRemoteSamplingStrategy",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/trace-jaeger-remote-sampling-strategies/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTraceJaegerRemoteSamplingStrategyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTraceJaegerRemoteSamplingStrategyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTraceJaegerRemoteSamplingStrategyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTraceMetricsRule delete trace metrics rule API
*/
func (a *Client) DeleteTraceMetricsRule(params *DeleteTraceMetricsRuleParams, opts ...ClientOption) (*DeleteTraceMetricsRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTraceMetricsRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTraceMetricsRule",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/trace-metrics-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTraceMetricsRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTraceMetricsRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTraceMetricsRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTraceTailSamplingRules delete trace tail sampling rules API
*/
func (a *Client) DeleteTraceTailSamplingRules(params *DeleteTraceTailSamplingRulesParams, opts ...ClientOption) (*DeleteTraceTailSamplingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTraceTailSamplingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTraceTailSamplingRules",
		Method:             "DELETE",
		PathPattern:        "/api/v1/config/trace-tail-sampling-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTraceTailSamplingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTraceTailSamplingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTraceTailSamplingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListBuckets list buckets API
*/
func (a *Client) ListBuckets(params *ListBucketsParams, opts ...ClientOption) (*ListBucketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBucketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBuckets",
		Method:             "GET",
		PathPattern:        "/api/v1/config/buckets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBucketsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBucketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListBucketsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListClassicDashboards list classic dashboards API
*/
func (a *Client) ListClassicDashboards(params *ListClassicDashboardsParams, opts ...ClientOption) (*ListClassicDashboardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClassicDashboardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListClassicDashboards",
		Method:             "GET",
		PathPattern:        "/api/v1/config/classic-dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListClassicDashboardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClassicDashboardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListClassicDashboardsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListCollections list collections API
*/
func (a *Client) ListCollections(params *ListCollectionsParams, opts ...ClientOption) (*ListCollectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCollectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCollections",
		Method:             "GET",
		PathPattern:        "/api/v1/config/collections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCollectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCollectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListCollectionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListConsumptionBudgets list consumption budgets API
*/
func (a *Client) ListConsumptionBudgets(params *ListConsumptionBudgetsParams, opts ...ClientOption) (*ListConsumptionBudgetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConsumptionBudgetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListConsumptionBudgets",
		Method:             "GET",
		PathPattern:        "/api/v1/config/consumption-budgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListConsumptionBudgetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListConsumptionBudgetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListConsumptionBudgetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDashboards list dashboards API
*/
func (a *Client) ListDashboards(params *ListDashboardsParams, opts ...ClientOption) (*ListDashboardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDashboardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDashboards",
		Method:             "GET",
		PathPattern:        "/api/v1/config/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDashboardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDashboardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDashboardsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDatasets list datasets API
*/
func (a *Client) ListDatasets(params *ListDatasetsParams, opts ...ClientOption) (*ListDatasetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDatasetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDatasets",
		Method:             "GET",
		PathPattern:        "/api/v1/config/datasets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDatasetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDatasetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDatasetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDerivedLabels list derived labels API
*/
func (a *Client) ListDerivedLabels(params *ListDerivedLabelsParams, opts ...ClientOption) (*ListDerivedLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDerivedLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDerivedLabels",
		Method:             "GET",
		PathPattern:        "/api/v1/config/derived-labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDerivedLabelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDerivedLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDerivedLabelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDerivedMetrics list derived metrics API
*/
func (a *Client) ListDerivedMetrics(params *ListDerivedMetricsParams, opts ...ClientOption) (*ListDerivedMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDerivedMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDerivedMetrics",
		Method:             "GET",
		PathPattern:        "/api/v1/config/derived-metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDerivedMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDerivedMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDerivedMetricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDropRules list drop rules API
*/
func (a *Client) ListDropRules(params *ListDropRulesParams, opts ...ClientOption) (*ListDropRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDropRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDropRules",
		Method:             "GET",
		PathPattern:        "/api/v1/config/drop-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDropRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDropRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDropRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListGcpMetricsIntegrations list gcp metrics integrations API
*/
func (a *Client) ListGcpMetricsIntegrations(params *ListGcpMetricsIntegrationsParams, opts ...ClientOption) (*ListGcpMetricsIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGcpMetricsIntegrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListGcpMetricsIntegrations",
		Method:             "GET",
		PathPattern:        "/api/v1/config/gcp-metrics-integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListGcpMetricsIntegrationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGcpMetricsIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGcpMetricsIntegrationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListGrafanaDashboards list grafana dashboards API
*/
func (a *Client) ListGrafanaDashboards(params *ListGrafanaDashboardsParams, opts ...ClientOption) (*ListGrafanaDashboardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGrafanaDashboardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListGrafanaDashboards",
		Method:             "GET",
		PathPattern:        "/api/v1/config/grafana-dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListGrafanaDashboardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGrafanaDashboardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGrafanaDashboardsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListLogScaleActions list log scale actions API
*/
func (a *Client) ListLogScaleActions(params *ListLogScaleActionsParams, opts ...ClientOption) (*ListLogScaleActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLogScaleActionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListLogScaleActions",
		Method:             "GET",
		PathPattern:        "/api/v1/config/log-scale-actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListLogScaleActionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLogScaleActionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListLogScaleActionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListLogScaleAlerts list log scale alerts API
*/
func (a *Client) ListLogScaleAlerts(params *ListLogScaleAlertsParams, opts ...ClientOption) (*ListLogScaleAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLogScaleAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListLogScaleAlerts",
		Method:             "GET",
		PathPattern:        "/api/v1/config/log-scale-alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListLogScaleAlertsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLogScaleAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListLogScaleAlertsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListMappingRules list mapping rules API
*/
func (a *Client) ListMappingRules(params *ListMappingRulesParams, opts ...ClientOption) (*ListMappingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMappingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListMappingRules",
		Method:             "GET",
		PathPattern:        "/api/v1/config/mapping-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListMappingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMappingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMappingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListMonitors list monitors API
*/
func (a *Client) ListMonitors(params *ListMonitorsParams, opts ...ClientOption) (*ListMonitorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMonitorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListMonitors",
		Method:             "GET",
		PathPattern:        "/api/v1/config/monitors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListMonitorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMonitorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMonitorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListMutingRules list muting rules API
*/
func (a *Client) ListMutingRules(params *ListMutingRulesParams, opts ...ClientOption) (*ListMutingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMutingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListMutingRules",
		Method:             "GET",
		PathPattern:        "/api/v1/config/muting-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListMutingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMutingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMutingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListNotificationPolicies list notification policies API
*/
func (a *Client) ListNotificationPolicies(params *ListNotificationPoliciesParams, opts ...ClientOption) (*ListNotificationPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNotificationPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListNotificationPolicies",
		Method:             "GET",
		PathPattern:        "/api/v1/config/notification-policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNotificationPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNotificationPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListNotificationPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListNotifiers list notifiers API
*/
func (a *Client) ListNotifiers(params *ListNotifiersParams, opts ...ClientOption) (*ListNotifiersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNotifiersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListNotifiers",
		Method:             "GET",
		PathPattern:        "/api/v1/config/notifiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNotifiersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNotifiersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListNotifiersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListRecordingRules list recording rules API
*/
func (a *Client) ListRecordingRules(params *ListRecordingRulesParams, opts ...ClientOption) (*ListRecordingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRecordingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListRecordingRules",
		Method:             "GET",
		PathPattern:        "/api/v1/config/recording-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRecordingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRecordingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRecordingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListRollupRules list rollup rules API
*/
func (a *Client) ListRollupRules(params *ListRollupRulesParams, opts ...ClientOption) (*ListRollupRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRollupRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListRollupRules",
		Method:             "GET",
		PathPattern:        "/api/v1/config/rollup-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRollupRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRollupRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRollupRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListSLOs list s l os API
*/
func (a *Client) ListSLOs(params *ListSLOsParams, opts ...ClientOption) (*ListSLOsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSLOsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListSLOs",
		Method:             "GET",
		PathPattern:        "/api/v1/config/slos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSLOsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSLOsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSLOsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListServiceAccounts list service accounts API
*/
func (a *Client) ListServiceAccounts(params *ListServiceAccountsParams, opts ...ClientOption) (*ListServiceAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServiceAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListServiceAccounts",
		Method:             "GET",
		PathPattern:        "/api/v1/config/service-accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServiceAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServiceAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListServiceAccountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListServices list services API
*/
func (a *Client) ListServices(params *ListServicesParams, opts ...ClientOption) (*ListServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListServices",
		Method:             "GET",
		PathPattern:        "/api/v1/config/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListTeams list teams API
*/
func (a *Client) ListTeams(params *ListTeamsParams, opts ...ClientOption) (*ListTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTeams",
		Method:             "GET",
		PathPattern:        "/api/v1/config/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTeamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTeamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListTraceBehaviors list trace behaviors API
*/
func (a *Client) ListTraceBehaviors(params *ListTraceBehaviorsParams, opts ...ClientOption) (*ListTraceBehaviorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTraceBehaviorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTraceBehaviors",
		Method:             "GET",
		PathPattern:        "/api/v1/config/trace-behaviors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTraceBehaviorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTraceBehaviorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTraceBehaviorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListTraceJaegerRemoteSamplingStrategies list trace jaeger remote sampling strategies API
*/
func (a *Client) ListTraceJaegerRemoteSamplingStrategies(params *ListTraceJaegerRemoteSamplingStrategiesParams, opts ...ClientOption) (*ListTraceJaegerRemoteSamplingStrategiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTraceJaegerRemoteSamplingStrategiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTraceJaegerRemoteSamplingStrategies",
		Method:             "GET",
		PathPattern:        "/api/v1/config/trace-jaeger-remote-sampling-strategies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTraceJaegerRemoteSamplingStrategiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTraceJaegerRemoteSamplingStrategiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTraceJaegerRemoteSamplingStrategiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListTraceMetricsRules list trace metrics rules API
*/
func (a *Client) ListTraceMetricsRules(params *ListTraceMetricsRulesParams, opts ...ClientOption) (*ListTraceMetricsRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTraceMetricsRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTraceMetricsRules",
		Method:             "GET",
		PathPattern:        "/api/v1/config/trace-metrics-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTraceMetricsRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTraceMetricsRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTraceMetricsRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadBucket read bucket API
*/
func (a *Client) ReadBucket(params *ReadBucketParams, opts ...ClientOption) (*ReadBucketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadBucketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadBucket",
		Method:             "GET",
		PathPattern:        "/api/v1/config/buckets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadBucketReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadBucketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadBucketDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadClassicDashboard read classic dashboard API
*/
func (a *Client) ReadClassicDashboard(params *ReadClassicDashboardParams, opts ...ClientOption) (*ReadClassicDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadClassicDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadClassicDashboard",
		Method:             "GET",
		PathPattern:        "/api/v1/config/classic-dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadClassicDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadClassicDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadClassicDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadCollection read collection API
*/
func (a *Client) ReadCollection(params *ReadCollectionParams, opts ...ClientOption) (*ReadCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCollectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadCollection",
		Method:             "GET",
		PathPattern:        "/api/v1/config/collections/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCollectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadCollectionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadConsumptionBudget read consumption budget API
*/
func (a *Client) ReadConsumptionBudget(params *ReadConsumptionBudgetParams, opts ...ClientOption) (*ReadConsumptionBudgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadConsumptionBudgetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadConsumptionBudget",
		Method:             "GET",
		PathPattern:        "/api/v1/config/consumption-budgets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadConsumptionBudgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadConsumptionBudgetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadConsumptionBudgetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadConsumptionConfig read consumption config API
*/
func (a *Client) ReadConsumptionConfig(params *ReadConsumptionConfigParams, opts ...ClientOption) (*ReadConsumptionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadConsumptionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadConsumptionConfig",
		Method:             "GET",
		PathPattern:        "/api/v1/config/consumption-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadConsumptionConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadConsumptionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadConsumptionConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadDashboard read dashboard API
*/
func (a *Client) ReadDashboard(params *ReadDashboardParams, opts ...ClientOption) (*ReadDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDashboard",
		Method:             "GET",
		PathPattern:        "/api/v1/config/dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadDataset read dataset API
*/
func (a *Client) ReadDataset(params *ReadDatasetParams, opts ...ClientOption) (*ReadDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDataset",
		Method:             "GET",
		PathPattern:        "/api/v1/config/datasets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadDatasetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadDerivedLabel read derived label API
*/
func (a *Client) ReadDerivedLabel(params *ReadDerivedLabelParams, opts ...ClientOption) (*ReadDerivedLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDerivedLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDerivedLabel",
		Method:             "GET",
		PathPattern:        "/api/v1/config/derived-labels/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDerivedLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDerivedLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadDerivedLabelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadDerivedMetric read derived metric API
*/
func (a *Client) ReadDerivedMetric(params *ReadDerivedMetricParams, opts ...ClientOption) (*ReadDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDerivedMetric",
		Method:             "GET",
		PathPattern:        "/api/v1/config/derived-metrics/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDerivedMetricReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadDerivedMetricDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadDropRule read drop rule API
*/
func (a *Client) ReadDropRule(params *ReadDropRuleParams, opts ...ClientOption) (*ReadDropRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDropRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDropRule",
		Method:             "GET",
		PathPattern:        "/api/v1/config/drop-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDropRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDropRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadDropRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadGcpMetricsIntegration read gcp metrics integration API
*/
func (a *Client) ReadGcpMetricsIntegration(params *ReadGcpMetricsIntegrationParams, opts ...ClientOption) (*ReadGcpMetricsIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadGcpMetricsIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadGcpMetricsIntegration",
		Method:             "GET",
		PathPattern:        "/api/v1/config/gcp-metrics-integrations/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadGcpMetricsIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadGcpMetricsIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadGcpMetricsIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadGrafanaDashboard read grafana dashboard API
*/
func (a *Client) ReadGrafanaDashboard(params *ReadGrafanaDashboardParams, opts ...ClientOption) (*ReadGrafanaDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadGrafanaDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadGrafanaDashboard",
		Method:             "GET",
		PathPattern:        "/api/v1/config/grafana-dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadGrafanaDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadGrafanaDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadGrafanaDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadLogAllocationConfig read log allocation config API
*/
func (a *Client) ReadLogAllocationConfig(params *ReadLogAllocationConfigParams, opts ...ClientOption) (*ReadLogAllocationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadLogAllocationConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadLogAllocationConfig",
		Method:             "GET",
		PathPattern:        "/api/v1/config/log-allocation-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadLogAllocationConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadLogAllocationConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadLogAllocationConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadLogControlConfig read log control config API
*/
func (a *Client) ReadLogControlConfig(params *ReadLogControlConfigParams, opts ...ClientOption) (*ReadLogControlConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadLogControlConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadLogControlConfig",
		Method:             "GET",
		PathPattern:        "/api/v1/config/log-control-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadLogControlConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadLogControlConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadLogControlConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadLogIngestConfig read log ingest config API
*/
func (a *Client) ReadLogIngestConfig(params *ReadLogIngestConfigParams, opts ...ClientOption) (*ReadLogIngestConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadLogIngestConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadLogIngestConfig",
		Method:             "GET",
		PathPattern:        "/api/v1/config/log-ingest-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadLogIngestConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadLogIngestConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadLogIngestConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadLogScaleAction read log scale action API
*/
func (a *Client) ReadLogScaleAction(params *ReadLogScaleActionParams, opts ...ClientOption) (*ReadLogScaleActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadLogScaleActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadLogScaleAction",
		Method:             "GET",
		PathPattern:        "/api/v1/config/log-scale-actions/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadLogScaleActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadLogScaleActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadLogScaleActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadLogScaleAlert read log scale alert API
*/
func (a *Client) ReadLogScaleAlert(params *ReadLogScaleAlertParams, opts ...ClientOption) (*ReadLogScaleAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadLogScaleAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadLogScaleAlert",
		Method:             "GET",
		PathPattern:        "/api/v1/config/log-scale-alerts/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadLogScaleAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadLogScaleAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadLogScaleAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadMappingRule read mapping rule API
*/
func (a *Client) ReadMappingRule(params *ReadMappingRuleParams, opts ...ClientOption) (*ReadMappingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadMappingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadMappingRule",
		Method:             "GET",
		PathPattern:        "/api/v1/config/mapping-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadMappingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadMappingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadMappingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadMonitor read monitor API
*/
func (a *Client) ReadMonitor(params *ReadMonitorParams, opts ...ClientOption) (*ReadMonitorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadMonitorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadMonitor",
		Method:             "GET",
		PathPattern:        "/api/v1/config/monitors/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadMonitorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadMonitorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadMonitorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadMutingRule read muting rule API
*/
func (a *Client) ReadMutingRule(params *ReadMutingRuleParams, opts ...ClientOption) (*ReadMutingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadMutingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadMutingRule",
		Method:             "GET",
		PathPattern:        "/api/v1/config/muting-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadMutingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadMutingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadMutingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadNotificationPolicy read notification policy API
*/
func (a *Client) ReadNotificationPolicy(params *ReadNotificationPolicyParams, opts ...ClientOption) (*ReadNotificationPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNotificationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadNotificationPolicy",
		Method:             "GET",
		PathPattern:        "/api/v1/config/notification-policies/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNotificationPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNotificationPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadNotificationPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadNotifier read notifier API
*/
func (a *Client) ReadNotifier(params *ReadNotifierParams, opts ...ClientOption) (*ReadNotifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNotifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadNotifier",
		Method:             "GET",
		PathPattern:        "/api/v1/config/notifiers/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNotifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNotifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadNotifierDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadOtelMetricsIngestion read otel metrics ingestion API
*/
func (a *Client) ReadOtelMetricsIngestion(params *ReadOtelMetricsIngestionParams, opts ...ClientOption) (*ReadOtelMetricsIngestionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadOtelMetricsIngestionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadOtelMetricsIngestion",
		Method:             "GET",
		PathPattern:        "/api/v1/config/otel-metrics-ingestion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadOtelMetricsIngestionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadOtelMetricsIngestionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadOtelMetricsIngestionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadRecordingRule read recording rule API
*/
func (a *Client) ReadRecordingRule(params *ReadRecordingRuleParams, opts ...ClientOption) (*ReadRecordingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRecordingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadRecordingRule",
		Method:             "GET",
		PathPattern:        "/api/v1/config/recording-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRecordingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRecordingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadRecordingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadResourcePools read resource pools API
*/
func (a *Client) ReadResourcePools(params *ReadResourcePoolsParams, opts ...ClientOption) (*ReadResourcePoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadResourcePoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadResourcePools",
		Method:             "GET",
		PathPattern:        "/api/v1/config/resource-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadResourcePoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadResourcePoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadResourcePoolsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadRollupRule read rollup rule API
*/
func (a *Client) ReadRollupRule(params *ReadRollupRuleParams, opts ...ClientOption) (*ReadRollupRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRollupRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadRollupRule",
		Method:             "GET",
		PathPattern:        "/api/v1/config/rollup-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRollupRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRollupRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadRollupRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadSLO read SLO API
*/
func (a *Client) ReadSLO(params *ReadSLOParams, opts ...ClientOption) (*ReadSLOOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadSLOParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadSLO",
		Method:             "GET",
		PathPattern:        "/api/v1/config/slos/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadSLOReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadSLOOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadSLODefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadService read service API
*/
func (a *Client) ReadService(params *ReadServiceParams, opts ...ClientOption) (*ReadServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadService",
		Method:             "GET",
		PathPattern:        "/api/v1/config/services/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadServiceAccount read service account API
*/
func (a *Client) ReadServiceAccount(params *ReadServiceAccountParams, opts ...ClientOption) (*ReadServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadServiceAccount",
		Method:             "GET",
		PathPattern:        "/api/v1/config/service-accounts/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadServiceAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadServiceAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadTeam read team API
*/
func (a *Client) ReadTeam(params *ReadTeamParams, opts ...ClientOption) (*ReadTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadTeam",
		Method:             "GET",
		PathPattern:        "/api/v1/config/teams/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadTeamDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadTraceBehavior read trace behavior API
*/
func (a *Client) ReadTraceBehavior(params *ReadTraceBehaviorParams, opts ...ClientOption) (*ReadTraceBehaviorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadTraceBehaviorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadTraceBehavior",
		Method:             "GET",
		PathPattern:        "/api/v1/config/trace-behaviors/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadTraceBehaviorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadTraceBehaviorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadTraceBehaviorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadTraceBehaviorConfig read trace behavior config API
*/
func (a *Client) ReadTraceBehaviorConfig(params *ReadTraceBehaviorConfigParams, opts ...ClientOption) (*ReadTraceBehaviorConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadTraceBehaviorConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadTraceBehaviorConfig",
		Method:             "GET",
		PathPattern:        "/api/v1/config/trace-behavior-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadTraceBehaviorConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadTraceBehaviorConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadTraceBehaviorConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadTraceJaegerRemoteSamplingStrategy read trace jaeger remote sampling strategy API
*/
func (a *Client) ReadTraceJaegerRemoteSamplingStrategy(params *ReadTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*ReadTraceJaegerRemoteSamplingStrategyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadTraceJaegerRemoteSamplingStrategyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadTraceJaegerRemoteSamplingStrategy",
		Method:             "GET",
		PathPattern:        "/api/v1/config/trace-jaeger-remote-sampling-strategies/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadTraceJaegerRemoteSamplingStrategyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadTraceJaegerRemoteSamplingStrategyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadTraceJaegerRemoteSamplingStrategyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadTraceMetricsRule read trace metrics rule API
*/
func (a *Client) ReadTraceMetricsRule(params *ReadTraceMetricsRuleParams, opts ...ClientOption) (*ReadTraceMetricsRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadTraceMetricsRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadTraceMetricsRule",
		Method:             "GET",
		PathPattern:        "/api/v1/config/trace-metrics-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadTraceMetricsRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadTraceMetricsRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadTraceMetricsRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadTraceTailSamplingRules read trace tail sampling rules API
*/
func (a *Client) ReadTraceTailSamplingRules(params *ReadTraceTailSamplingRulesParams, opts ...ClientOption) (*ReadTraceTailSamplingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadTraceTailSamplingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadTraceTailSamplingRules",
		Method:             "GET",
		PathPattern:        "/api/v1/config/trace-tail-sampling-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadTraceTailSamplingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadTraceTailSamplingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadTraceTailSamplingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateBucket update bucket API
*/
func (a *Client) UpdateBucket(params *UpdateBucketParams, opts ...ClientOption) (*UpdateBucketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBucketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateBucket",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/buckets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBucketReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBucketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateBucketDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateClassicDashboard update classic dashboard API
*/
func (a *Client) UpdateClassicDashboard(params *UpdateClassicDashboardParams, opts ...ClientOption) (*UpdateClassicDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClassicDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateClassicDashboard",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/classic-dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClassicDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClassicDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateClassicDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateCollection update collection API
*/
func (a *Client) UpdateCollection(params *UpdateCollectionParams, opts ...ClientOption) (*UpdateCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCollectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCollection",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/collections/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCollectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateCollectionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateConsumptionBudget update consumption budget API
*/
func (a *Client) UpdateConsumptionBudget(params *UpdateConsumptionBudgetParams, opts ...ClientOption) (*UpdateConsumptionBudgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConsumptionBudgetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateConsumptionBudget",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/consumption-budgets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConsumptionBudgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConsumptionBudgetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateConsumptionBudgetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateConsumptionConfig update consumption config API
*/
func (a *Client) UpdateConsumptionConfig(params *UpdateConsumptionConfigParams, opts ...ClientOption) (*UpdateConsumptionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConsumptionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateConsumptionConfig",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/consumption-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConsumptionConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConsumptionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateConsumptionConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDashboard update dashboard API
*/
func (a *Client) UpdateDashboard(params *UpdateDashboardParams, opts ...ClientOption) (*UpdateDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDashboard",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDataset update dataset API
*/
func (a *Client) UpdateDataset(params *UpdateDatasetParams, opts ...ClientOption) (*UpdateDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDataset",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/datasets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDatasetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDerivedLabel update derived label API
*/
func (a *Client) UpdateDerivedLabel(params *UpdateDerivedLabelParams, opts ...ClientOption) (*UpdateDerivedLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDerivedLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDerivedLabel",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/derived-labels/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDerivedLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDerivedLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDerivedLabelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDerivedMetric update derived metric API
*/
func (a *Client) UpdateDerivedMetric(params *UpdateDerivedMetricParams, opts ...ClientOption) (*UpdateDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDerivedMetric",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/derived-metrics/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDerivedMetricReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDerivedMetricDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDropRule update drop rule API
*/
func (a *Client) UpdateDropRule(params *UpdateDropRuleParams, opts ...ClientOption) (*UpdateDropRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDropRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDropRule",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/drop-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDropRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDropRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDropRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateGcpMetricsIntegration update gcp metrics integration API
*/
func (a *Client) UpdateGcpMetricsIntegration(params *UpdateGcpMetricsIntegrationParams, opts ...ClientOption) (*UpdateGcpMetricsIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGcpMetricsIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateGcpMetricsIntegration",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/gcp-metrics-integrations/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGcpMetricsIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGcpMetricsIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateGcpMetricsIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateGrafanaDashboard update grafana dashboard API
*/
func (a *Client) UpdateGrafanaDashboard(params *UpdateGrafanaDashboardParams, opts ...ClientOption) (*UpdateGrafanaDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGrafanaDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateGrafanaDashboard",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/grafana-dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGrafanaDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGrafanaDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateGrafanaDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateLogAllocationConfig update log allocation config API
*/
func (a *Client) UpdateLogAllocationConfig(params *UpdateLogAllocationConfigParams, opts ...ClientOption) (*UpdateLogAllocationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLogAllocationConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateLogAllocationConfig",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/log-allocation-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLogAllocationConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLogAllocationConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateLogAllocationConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateLogControlConfig update log control config API
*/
func (a *Client) UpdateLogControlConfig(params *UpdateLogControlConfigParams, opts ...ClientOption) (*UpdateLogControlConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLogControlConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateLogControlConfig",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/log-control-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLogControlConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLogControlConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateLogControlConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateLogIngestConfig update log ingest config API
*/
func (a *Client) UpdateLogIngestConfig(params *UpdateLogIngestConfigParams, opts ...ClientOption) (*UpdateLogIngestConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLogIngestConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateLogIngestConfig",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/log-ingest-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLogIngestConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLogIngestConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateLogIngestConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateLogScaleAction update log scale action API
*/
func (a *Client) UpdateLogScaleAction(params *UpdateLogScaleActionParams, opts ...ClientOption) (*UpdateLogScaleActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLogScaleActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateLogScaleAction",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/log-scale-actions/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLogScaleActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLogScaleActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateLogScaleActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateLogScaleAlert update log scale alert API
*/
func (a *Client) UpdateLogScaleAlert(params *UpdateLogScaleAlertParams, opts ...ClientOption) (*UpdateLogScaleAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLogScaleAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateLogScaleAlert",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/log-scale-alerts/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLogScaleAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLogScaleAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateLogScaleAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateMappingRule update mapping rule API
*/
func (a *Client) UpdateMappingRule(params *UpdateMappingRuleParams, opts ...ClientOption) (*UpdateMappingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMappingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateMappingRule",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/mapping-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMappingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMappingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateMappingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateMonitor update monitor API
*/
func (a *Client) UpdateMonitor(params *UpdateMonitorParams, opts ...ClientOption) (*UpdateMonitorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMonitorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateMonitor",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/monitors/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMonitorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMonitorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateMonitorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateMutingRule update muting rule API
*/
func (a *Client) UpdateMutingRule(params *UpdateMutingRuleParams, opts ...ClientOption) (*UpdateMutingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMutingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateMutingRule",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/muting-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMutingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMutingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateMutingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateNotificationPolicy update notification policy API
*/
func (a *Client) UpdateNotificationPolicy(params *UpdateNotificationPolicyParams, opts ...ClientOption) (*UpdateNotificationPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNotificationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNotificationPolicy",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/notification-policies/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNotificationPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNotificationPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateNotificationPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateNotifier update notifier API
*/
func (a *Client) UpdateNotifier(params *UpdateNotifierParams, opts ...ClientOption) (*UpdateNotifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNotifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNotifier",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/notifiers/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNotifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNotifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateNotifierDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateOtelMetricsIngestion update otel metrics ingestion API
*/
func (a *Client) UpdateOtelMetricsIngestion(params *UpdateOtelMetricsIngestionParams, opts ...ClientOption) (*UpdateOtelMetricsIngestionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOtelMetricsIngestionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateOtelMetricsIngestion",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/otel-metrics-ingestion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateOtelMetricsIngestionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOtelMetricsIngestionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateOtelMetricsIngestionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateRecordingRule update recording rule API
*/
func (a *Client) UpdateRecordingRule(params *UpdateRecordingRuleParams, opts ...ClientOption) (*UpdateRecordingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRecordingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRecordingRule",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/recording-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRecordingRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRecordingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateRecordingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateResourcePools update resource pools API
*/
func (a *Client) UpdateResourcePools(params *UpdateResourcePoolsParams, opts ...ClientOption) (*UpdateResourcePoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourcePoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateResourcePools",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/resource-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateResourcePoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateResourcePoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateResourcePoolsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateRollupRule update rollup rule API
*/
func (a *Client) UpdateRollupRule(params *UpdateRollupRuleParams, opts ...ClientOption) (*UpdateRollupRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRollupRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRollupRule",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/rollup-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRollupRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRollupRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateRollupRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateSLO update SLO API
*/
func (a *Client) UpdateSLO(params *UpdateSLOParams, opts ...ClientOption) (*UpdateSLOOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSLOParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSLO",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/slos/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSLOReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSLOOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSLODefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTeam update team API
*/
func (a *Client) UpdateTeam(params *UpdateTeamParams, opts ...ClientOption) (*UpdateTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTeam",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/teams/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTeamDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTraceBehavior update trace behavior API
*/
func (a *Client) UpdateTraceBehavior(params *UpdateTraceBehaviorParams, opts ...ClientOption) (*UpdateTraceBehaviorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTraceBehaviorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTraceBehavior",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/trace-behaviors/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTraceBehaviorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTraceBehaviorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTraceBehaviorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTraceBehaviorConfig update trace behavior config API
*/
func (a *Client) UpdateTraceBehaviorConfig(params *UpdateTraceBehaviorConfigParams, opts ...ClientOption) (*UpdateTraceBehaviorConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTraceBehaviorConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTraceBehaviorConfig",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/trace-behavior-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTraceBehaviorConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTraceBehaviorConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTraceBehaviorConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTraceJaegerRemoteSamplingStrategy update trace jaeger remote sampling strategy API
*/
func (a *Client) UpdateTraceJaegerRemoteSamplingStrategy(params *UpdateTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*UpdateTraceJaegerRemoteSamplingStrategyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTraceJaegerRemoteSamplingStrategyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTraceJaegerRemoteSamplingStrategy",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/trace-jaeger-remote-sampling-strategies/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTraceJaegerRemoteSamplingStrategyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTraceJaegerRemoteSamplingStrategyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTraceJaegerRemoteSamplingStrategyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTraceMetricsRule update trace metrics rule API
*/
func (a *Client) UpdateTraceMetricsRule(params *UpdateTraceMetricsRuleParams, opts ...ClientOption) (*UpdateTraceMetricsRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTraceMetricsRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTraceMetricsRule",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/trace-metrics-rules/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTraceMetricsRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTraceMetricsRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTraceMetricsRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTraceTailSamplingRules update trace tail sampling rules API
*/
func (a *Client) UpdateTraceTailSamplingRules(params *UpdateTraceTailSamplingRulesParams, opts ...ClientOption) (*UpdateTraceTailSamplingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTraceTailSamplingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTraceTailSamplingRules",
		Method:             "PUT",
		PathPattern:        "/api/v1/config/trace-tail-sampling-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTraceTailSamplingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTraceTailSamplingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTraceTailSamplingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
