// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// ReadLogAllocationConfigReader is a Reader for the ReadLogAllocationConfig structure.
type ReadLogAllocationConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadLogAllocationConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadLogAllocationConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewReadLogAllocationConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadLogAllocationConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReadLogAllocationConfigDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReadLogAllocationConfigOK creates a ReadLogAllocationConfigOK with default headers values
func NewReadLogAllocationConfigOK() *ReadLogAllocationConfigOK {
	return &ReadLogAllocationConfigOK{}
}

/*
ReadLogAllocationConfigOK describes a response with status code 200, with default header values.

A successful response.
*/
type ReadLogAllocationConfigOK struct {
	Payload *models.Configv1ReadLogAllocationConfigResponse
}

// IsSuccess returns true when this read log allocation config o k response has a 2xx status code
func (o *ReadLogAllocationConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this read log allocation config o k response has a 3xx status code
func (o *ReadLogAllocationConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read log allocation config o k response has a 4xx status code
func (o *ReadLogAllocationConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this read log allocation config o k response has a 5xx status code
func (o *ReadLogAllocationConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this read log allocation config o k response a status code equal to that given
func (o *ReadLogAllocationConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the read log allocation config o k response
func (o *ReadLogAllocationConfigOK) Code() int {
	return 200
}

func (o *ReadLogAllocationConfigOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/config/log-allocation-config][%d] readLogAllocationConfigOK  %+v", 200, o.Payload)
}

func (o *ReadLogAllocationConfigOK) String() string {
	return fmt.Sprintf("[GET /api/v1/config/log-allocation-config][%d] readLogAllocationConfigOK  %+v", 200, o.Payload)
}

func (o *ReadLogAllocationConfigOK) GetPayload() *models.Configv1ReadLogAllocationConfigResponse {
	return o.Payload
}

func (o *ReadLogAllocationConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1ReadLogAllocationConfigResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogAllocationConfigNotFound creates a ReadLogAllocationConfigNotFound with default headers values
func NewReadLogAllocationConfigNotFound() *ReadLogAllocationConfigNotFound {
	return &ReadLogAllocationConfigNotFound{}
}

/*
ReadLogAllocationConfigNotFound describes a response with status code 404, with default header values.

Cannot read the LogAllocationConfig because LogAllocationConfig has not been created.
*/
type ReadLogAllocationConfigNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this read log allocation config not found response has a 2xx status code
func (o *ReadLogAllocationConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read log allocation config not found response has a 3xx status code
func (o *ReadLogAllocationConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read log allocation config not found response has a 4xx status code
func (o *ReadLogAllocationConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this read log allocation config not found response has a 5xx status code
func (o *ReadLogAllocationConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this read log allocation config not found response a status code equal to that given
func (o *ReadLogAllocationConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the read log allocation config not found response
func (o *ReadLogAllocationConfigNotFound) Code() int {
	return 404
}

func (o *ReadLogAllocationConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/config/log-allocation-config][%d] readLogAllocationConfigNotFound  %+v", 404, o.Payload)
}

func (o *ReadLogAllocationConfigNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/config/log-allocation-config][%d] readLogAllocationConfigNotFound  %+v", 404, o.Payload)
}

func (o *ReadLogAllocationConfigNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *ReadLogAllocationConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogAllocationConfigInternalServerError creates a ReadLogAllocationConfigInternalServerError with default headers values
func NewReadLogAllocationConfigInternalServerError() *ReadLogAllocationConfigInternalServerError {
	return &ReadLogAllocationConfigInternalServerError{}
}

/*
ReadLogAllocationConfigInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type ReadLogAllocationConfigInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this read log allocation config internal server error response has a 2xx status code
func (o *ReadLogAllocationConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read log allocation config internal server error response has a 3xx status code
func (o *ReadLogAllocationConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read log allocation config internal server error response has a 4xx status code
func (o *ReadLogAllocationConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this read log allocation config internal server error response has a 5xx status code
func (o *ReadLogAllocationConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this read log allocation config internal server error response a status code equal to that given
func (o *ReadLogAllocationConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the read log allocation config internal server error response
func (o *ReadLogAllocationConfigInternalServerError) Code() int {
	return 500
}

func (o *ReadLogAllocationConfigInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/config/log-allocation-config][%d] readLogAllocationConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadLogAllocationConfigInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1/config/log-allocation-config][%d] readLogAllocationConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadLogAllocationConfigInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *ReadLogAllocationConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLogAllocationConfigDefault creates a ReadLogAllocationConfigDefault with default headers values
func NewReadLogAllocationConfigDefault(code int) *ReadLogAllocationConfigDefault {
	return &ReadLogAllocationConfigDefault{
		_statusCode: code,
	}
}

/*
ReadLogAllocationConfigDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type ReadLogAllocationConfigDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this read log allocation config default response has a 2xx status code
func (o *ReadLogAllocationConfigDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this read log allocation config default response has a 3xx status code
func (o *ReadLogAllocationConfigDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this read log allocation config default response has a 4xx status code
func (o *ReadLogAllocationConfigDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this read log allocation config default response has a 5xx status code
func (o *ReadLogAllocationConfigDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this read log allocation config default response a status code equal to that given
func (o *ReadLogAllocationConfigDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the read log allocation config default response
func (o *ReadLogAllocationConfigDefault) Code() int {
	return o._statusCode
}

func (o *ReadLogAllocationConfigDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/config/log-allocation-config][%d] ReadLogAllocationConfig default  %+v", o._statusCode, o.Payload)
}

func (o *ReadLogAllocationConfigDefault) String() string {
	return fmt.Sprintf("[GET /api/v1/config/log-allocation-config][%d] ReadLogAllocationConfig default  %+v", o._statusCode, o.Payload)
}

func (o *ReadLogAllocationConfigDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *ReadLogAllocationConfigDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
