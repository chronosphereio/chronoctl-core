// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// UpdateBucketReader is a Reader for the UpdateBucket structure.
type UpdateBucketReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateBucketReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateBucketOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateBucketBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateBucketNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateBucketConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateBucketInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateBucketDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateBucketOK creates a UpdateBucketOK with default headers values
func NewUpdateBucketOK() *UpdateBucketOK {
	return &UpdateBucketOK{}
}

/*
UpdateBucketOK describes a response with status code 200, with default header values.

A successful response containing the updated Bucket.
*/
type UpdateBucketOK struct {
	Payload *models.Configv1UpdateBucketResponse
}

// IsSuccess returns true when this update bucket o k response has a 2xx status code
func (o *UpdateBucketOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update bucket o k response has a 3xx status code
func (o *UpdateBucketOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bucket o k response has a 4xx status code
func (o *UpdateBucketOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update bucket o k response has a 5xx status code
func (o *UpdateBucketOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update bucket o k response a status code equal to that given
func (o *UpdateBucketOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update bucket o k response
func (o *UpdateBucketOK) Code() int {
	return 200
}

func (o *UpdateBucketOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/buckets/{slug}][%d] updateBucketOK  %+v", 200, o.Payload)
}

func (o *UpdateBucketOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/buckets/{slug}][%d] updateBucketOK  %+v", 200, o.Payload)
}

func (o *UpdateBucketOK) GetPayload() *models.Configv1UpdateBucketResponse {
	return o.Payload
}

func (o *UpdateBucketOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1UpdateBucketResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBucketBadRequest creates a UpdateBucketBadRequest with default headers values
func NewUpdateBucketBadRequest() *UpdateBucketBadRequest {
	return &UpdateBucketBadRequest{}
}

/*
UpdateBucketBadRequest describes a response with status code 400, with default header values.

Cannot update the Bucket because the request is invalid.
*/
type UpdateBucketBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update bucket bad request response has a 2xx status code
func (o *UpdateBucketBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update bucket bad request response has a 3xx status code
func (o *UpdateBucketBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bucket bad request response has a 4xx status code
func (o *UpdateBucketBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update bucket bad request response has a 5xx status code
func (o *UpdateBucketBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update bucket bad request response a status code equal to that given
func (o *UpdateBucketBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update bucket bad request response
func (o *UpdateBucketBadRequest) Code() int {
	return 400
}

func (o *UpdateBucketBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/buckets/{slug}][%d] updateBucketBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateBucketBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/buckets/{slug}][%d] updateBucketBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateBucketBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateBucketBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBucketNotFound creates a UpdateBucketNotFound with default headers values
func NewUpdateBucketNotFound() *UpdateBucketNotFound {
	return &UpdateBucketNotFound{}
}

/*
UpdateBucketNotFound describes a response with status code 404, with default header values.

Cannot update the Bucket because the slug does not exist.
*/
type UpdateBucketNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update bucket not found response has a 2xx status code
func (o *UpdateBucketNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update bucket not found response has a 3xx status code
func (o *UpdateBucketNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bucket not found response has a 4xx status code
func (o *UpdateBucketNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update bucket not found response has a 5xx status code
func (o *UpdateBucketNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update bucket not found response a status code equal to that given
func (o *UpdateBucketNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update bucket not found response
func (o *UpdateBucketNotFound) Code() int {
	return 404
}

func (o *UpdateBucketNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/buckets/{slug}][%d] updateBucketNotFound  %+v", 404, o.Payload)
}

func (o *UpdateBucketNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/buckets/{slug}][%d] updateBucketNotFound  %+v", 404, o.Payload)
}

func (o *UpdateBucketNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateBucketNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBucketConflict creates a UpdateBucketConflict with default headers values
func NewUpdateBucketConflict() *UpdateBucketConflict {
	return &UpdateBucketConflict{}
}

/*
UpdateBucketConflict describes a response with status code 409, with default header values.

Cannot update the Bucket because there is a conflict with an existing Bucket.
*/
type UpdateBucketConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update bucket conflict response has a 2xx status code
func (o *UpdateBucketConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update bucket conflict response has a 3xx status code
func (o *UpdateBucketConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bucket conflict response has a 4xx status code
func (o *UpdateBucketConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update bucket conflict response has a 5xx status code
func (o *UpdateBucketConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update bucket conflict response a status code equal to that given
func (o *UpdateBucketConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update bucket conflict response
func (o *UpdateBucketConflict) Code() int {
	return 409
}

func (o *UpdateBucketConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/buckets/{slug}][%d] updateBucketConflict  %+v", 409, o.Payload)
}

func (o *UpdateBucketConflict) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/buckets/{slug}][%d] updateBucketConflict  %+v", 409, o.Payload)
}

func (o *UpdateBucketConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateBucketConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBucketInternalServerError creates a UpdateBucketInternalServerError with default headers values
func NewUpdateBucketInternalServerError() *UpdateBucketInternalServerError {
	return &UpdateBucketInternalServerError{}
}

/*
UpdateBucketInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateBucketInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update bucket internal server error response has a 2xx status code
func (o *UpdateBucketInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update bucket internal server error response has a 3xx status code
func (o *UpdateBucketInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bucket internal server error response has a 4xx status code
func (o *UpdateBucketInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update bucket internal server error response has a 5xx status code
func (o *UpdateBucketInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update bucket internal server error response a status code equal to that given
func (o *UpdateBucketInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update bucket internal server error response
func (o *UpdateBucketInternalServerError) Code() int {
	return 500
}

func (o *UpdateBucketInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/buckets/{slug}][%d] updateBucketInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateBucketInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/buckets/{slug}][%d] updateBucketInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateBucketInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateBucketInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBucketDefault creates a UpdateBucketDefault with default headers values
func NewUpdateBucketDefault(code int) *UpdateBucketDefault {
	return &UpdateBucketDefault{
		_statusCode: code,
	}
}

/*
UpdateBucketDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateBucketDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update bucket default response has a 2xx status code
func (o *UpdateBucketDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update bucket default response has a 3xx status code
func (o *UpdateBucketDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update bucket default response has a 4xx status code
func (o *UpdateBucketDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update bucket default response has a 5xx status code
func (o *UpdateBucketDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update bucket default response a status code equal to that given
func (o *UpdateBucketDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update bucket default response
func (o *UpdateBucketDefault) Code() int {
	return o._statusCode
}

func (o *UpdateBucketDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/buckets/{slug}][%d] UpdateBucket default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateBucketDefault) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/buckets/{slug}][%d] UpdateBucket default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateBucketDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateBucketDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
