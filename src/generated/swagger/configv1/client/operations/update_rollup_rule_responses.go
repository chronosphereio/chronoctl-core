// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// UpdateRollupRuleReader is a Reader for the UpdateRollupRule structure.
type UpdateRollupRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRollupRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRollupRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRollupRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRollupRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateRollupRuleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRollupRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateRollupRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateRollupRuleOK creates a UpdateRollupRuleOK with default headers values
func NewUpdateRollupRuleOK() *UpdateRollupRuleOK {
	return &UpdateRollupRuleOK{}
}

/*
UpdateRollupRuleOK describes a response with status code 200, with default header values.

A successful response containing the updated RollupRule.
*/
type UpdateRollupRuleOK struct {
	Payload *models.Configv1UpdateRollupRuleResponse
}

// IsSuccess returns true when this update rollup rule o k response has a 2xx status code
func (o *UpdateRollupRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update rollup rule o k response has a 3xx status code
func (o *UpdateRollupRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rollup rule o k response has a 4xx status code
func (o *UpdateRollupRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update rollup rule o k response has a 5xx status code
func (o *UpdateRollupRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update rollup rule o k response a status code equal to that given
func (o *UpdateRollupRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update rollup rule o k response
func (o *UpdateRollupRuleOK) Code() int {
	return 200
}

func (o *UpdateRollupRuleOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/rollup-rules/{slug}][%d] updateRollupRuleOK  %+v", 200, o.Payload)
}

func (o *UpdateRollupRuleOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/rollup-rules/{slug}][%d] updateRollupRuleOK  %+v", 200, o.Payload)
}

func (o *UpdateRollupRuleOK) GetPayload() *models.Configv1UpdateRollupRuleResponse {
	return o.Payload
}

func (o *UpdateRollupRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1UpdateRollupRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRollupRuleBadRequest creates a UpdateRollupRuleBadRequest with default headers values
func NewUpdateRollupRuleBadRequest() *UpdateRollupRuleBadRequest {
	return &UpdateRollupRuleBadRequest{}
}

/*
UpdateRollupRuleBadRequest describes a response with status code 400, with default header values.

Cannot update the RollupRule because the request is invalid.
*/
type UpdateRollupRuleBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update rollup rule bad request response has a 2xx status code
func (o *UpdateRollupRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rollup rule bad request response has a 3xx status code
func (o *UpdateRollupRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rollup rule bad request response has a 4xx status code
func (o *UpdateRollupRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update rollup rule bad request response has a 5xx status code
func (o *UpdateRollupRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update rollup rule bad request response a status code equal to that given
func (o *UpdateRollupRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update rollup rule bad request response
func (o *UpdateRollupRuleBadRequest) Code() int {
	return 400
}

func (o *UpdateRollupRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/rollup-rules/{slug}][%d] updateRollupRuleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRollupRuleBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/rollup-rules/{slug}][%d] updateRollupRuleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRollupRuleBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateRollupRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRollupRuleNotFound creates a UpdateRollupRuleNotFound with default headers values
func NewUpdateRollupRuleNotFound() *UpdateRollupRuleNotFound {
	return &UpdateRollupRuleNotFound{}
}

/*
UpdateRollupRuleNotFound describes a response with status code 404, with default header values.

Cannot update the RollupRule because the slug does not exist.
*/
type UpdateRollupRuleNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update rollup rule not found response has a 2xx status code
func (o *UpdateRollupRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rollup rule not found response has a 3xx status code
func (o *UpdateRollupRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rollup rule not found response has a 4xx status code
func (o *UpdateRollupRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update rollup rule not found response has a 5xx status code
func (o *UpdateRollupRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update rollup rule not found response a status code equal to that given
func (o *UpdateRollupRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update rollup rule not found response
func (o *UpdateRollupRuleNotFound) Code() int {
	return 404
}

func (o *UpdateRollupRuleNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/rollup-rules/{slug}][%d] updateRollupRuleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRollupRuleNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/rollup-rules/{slug}][%d] updateRollupRuleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRollupRuleNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateRollupRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRollupRuleConflict creates a UpdateRollupRuleConflict with default headers values
func NewUpdateRollupRuleConflict() *UpdateRollupRuleConflict {
	return &UpdateRollupRuleConflict{}
}

/*
UpdateRollupRuleConflict describes a response with status code 409, with default header values.

Cannot update the RollupRule because there is a conflict with an existing RollupRule.
*/
type UpdateRollupRuleConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update rollup rule conflict response has a 2xx status code
func (o *UpdateRollupRuleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rollup rule conflict response has a 3xx status code
func (o *UpdateRollupRuleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rollup rule conflict response has a 4xx status code
func (o *UpdateRollupRuleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update rollup rule conflict response has a 5xx status code
func (o *UpdateRollupRuleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update rollup rule conflict response a status code equal to that given
func (o *UpdateRollupRuleConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update rollup rule conflict response
func (o *UpdateRollupRuleConflict) Code() int {
	return 409
}

func (o *UpdateRollupRuleConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/rollup-rules/{slug}][%d] updateRollupRuleConflict  %+v", 409, o.Payload)
}

func (o *UpdateRollupRuleConflict) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/rollup-rules/{slug}][%d] updateRollupRuleConflict  %+v", 409, o.Payload)
}

func (o *UpdateRollupRuleConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateRollupRuleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRollupRuleInternalServerError creates a UpdateRollupRuleInternalServerError with default headers values
func NewUpdateRollupRuleInternalServerError() *UpdateRollupRuleInternalServerError {
	return &UpdateRollupRuleInternalServerError{}
}

/*
UpdateRollupRuleInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateRollupRuleInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update rollup rule internal server error response has a 2xx status code
func (o *UpdateRollupRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rollup rule internal server error response has a 3xx status code
func (o *UpdateRollupRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rollup rule internal server error response has a 4xx status code
func (o *UpdateRollupRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update rollup rule internal server error response has a 5xx status code
func (o *UpdateRollupRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update rollup rule internal server error response a status code equal to that given
func (o *UpdateRollupRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update rollup rule internal server error response
func (o *UpdateRollupRuleInternalServerError) Code() int {
	return 500
}

func (o *UpdateRollupRuleInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/rollup-rules/{slug}][%d] updateRollupRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRollupRuleInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/rollup-rules/{slug}][%d] updateRollupRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRollupRuleInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateRollupRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRollupRuleDefault creates a UpdateRollupRuleDefault with default headers values
func NewUpdateRollupRuleDefault(code int) *UpdateRollupRuleDefault {
	return &UpdateRollupRuleDefault{
		_statusCode: code,
	}
}

/*
UpdateRollupRuleDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateRollupRuleDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update rollup rule default response has a 2xx status code
func (o *UpdateRollupRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update rollup rule default response has a 3xx status code
func (o *UpdateRollupRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update rollup rule default response has a 4xx status code
func (o *UpdateRollupRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update rollup rule default response has a 5xx status code
func (o *UpdateRollupRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update rollup rule default response a status code equal to that given
func (o *UpdateRollupRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update rollup rule default response
func (o *UpdateRollupRuleDefault) Code() int {
	return o._statusCode
}

func (o *UpdateRollupRuleDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/rollup-rules/{slug}][%d] UpdateRollupRule default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateRollupRuleDefault) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/rollup-rules/{slug}][%d] UpdateRollupRule default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateRollupRuleDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateRollupRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateRollupRuleBody update rollup rule body
swagger:model UpdateRollupRuleBody
*/
type UpdateRollupRuleBody struct {

	// If true, the RollupRule will be created if it does not already exist, identified by slug. If false, an error will be returned if the RollupRule does not already exist.
	CreateIfMissing bool `json:"create_if_missing,omitempty"`

	// If true, the RollupRule will not be created nor updated, and no response RollupRule will be returned. The response will return an error if the given RollupRule is invalid.
	DryRun bool `json:"dry_run,omitempty"`

	// rollup rule
	RollupRule *models.Configv1RollupRule `json:"rollup_rule,omitempty"`
}

// Validate validates this update rollup rule body
func (o *UpdateRollupRuleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRollupRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateRollupRuleBody) validateRollupRule(formats strfmt.Registry) error {
	if swag.IsZero(o.RollupRule) { // not required
		return nil
	}

	if o.RollupRule != nil {
		if err := o.RollupRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "rollup_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "rollup_rule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update rollup rule body based on the context it is used
func (o *UpdateRollupRuleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRollupRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateRollupRuleBody) contextValidateRollupRule(ctx context.Context, formats strfmt.Registry) error {

	if o.RollupRule != nil {

		if swag.IsZero(o.RollupRule) { // not required
			return nil
		}

		if err := o.RollupRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "rollup_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "rollup_rule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateRollupRuleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateRollupRuleBody) UnmarshalBinary(b []byte) error {
	var res UpdateRollupRuleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
