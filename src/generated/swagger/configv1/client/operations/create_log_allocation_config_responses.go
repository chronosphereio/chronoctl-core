// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// CreateLogAllocationConfigReader is a Reader for the CreateLogAllocationConfig structure.
type CreateLogAllocationConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateLogAllocationConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateLogAllocationConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateLogAllocationConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateLogAllocationConfigConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateLogAllocationConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateLogAllocationConfigDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateLogAllocationConfigOK creates a CreateLogAllocationConfigOK with default headers values
func NewCreateLogAllocationConfigOK() *CreateLogAllocationConfigOK {
	return &CreateLogAllocationConfigOK{}
}

/*
CreateLogAllocationConfigOK describes a response with status code 200, with default header values.

A successful response containing the created LogAllocationConfig.
*/
type CreateLogAllocationConfigOK struct {
	Payload *models.Configv1CreateLogAllocationConfigResponse
}

// IsSuccess returns true when this create log allocation config o k response has a 2xx status code
func (o *CreateLogAllocationConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create log allocation config o k response has a 3xx status code
func (o *CreateLogAllocationConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create log allocation config o k response has a 4xx status code
func (o *CreateLogAllocationConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create log allocation config o k response has a 5xx status code
func (o *CreateLogAllocationConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create log allocation config o k response a status code equal to that given
func (o *CreateLogAllocationConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create log allocation config o k response
func (o *CreateLogAllocationConfigOK) Code() int {
	return 200
}

func (o *CreateLogAllocationConfigOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/log-allocation-config][%d] createLogAllocationConfigOK  %+v", 200, o.Payload)
}

func (o *CreateLogAllocationConfigOK) String() string {
	return fmt.Sprintf("[POST /api/v1/config/log-allocation-config][%d] createLogAllocationConfigOK  %+v", 200, o.Payload)
}

func (o *CreateLogAllocationConfigOK) GetPayload() *models.Configv1CreateLogAllocationConfigResponse {
	return o.Payload
}

func (o *CreateLogAllocationConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1CreateLogAllocationConfigResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogAllocationConfigBadRequest creates a CreateLogAllocationConfigBadRequest with default headers values
func NewCreateLogAllocationConfigBadRequest() *CreateLogAllocationConfigBadRequest {
	return &CreateLogAllocationConfigBadRequest{}
}

/*
CreateLogAllocationConfigBadRequest describes a response with status code 400, with default header values.

Cannot create the LogAllocationConfig because the request is invalid.
*/
type CreateLogAllocationConfigBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create log allocation config bad request response has a 2xx status code
func (o *CreateLogAllocationConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create log allocation config bad request response has a 3xx status code
func (o *CreateLogAllocationConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create log allocation config bad request response has a 4xx status code
func (o *CreateLogAllocationConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create log allocation config bad request response has a 5xx status code
func (o *CreateLogAllocationConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create log allocation config bad request response a status code equal to that given
func (o *CreateLogAllocationConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create log allocation config bad request response
func (o *CreateLogAllocationConfigBadRequest) Code() int {
	return 400
}

func (o *CreateLogAllocationConfigBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/log-allocation-config][%d] createLogAllocationConfigBadRequest  %+v", 400, o.Payload)
}

func (o *CreateLogAllocationConfigBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/config/log-allocation-config][%d] createLogAllocationConfigBadRequest  %+v", 400, o.Payload)
}

func (o *CreateLogAllocationConfigBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateLogAllocationConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogAllocationConfigConflict creates a CreateLogAllocationConfigConflict with default headers values
func NewCreateLogAllocationConfigConflict() *CreateLogAllocationConfigConflict {
	return &CreateLogAllocationConfigConflict{}
}

/*
CreateLogAllocationConfigConflict describes a response with status code 409, with default header values.

Cannot create the LogAllocationConfig because there is a conflict with an existing LogAllocationConfig.
*/
type CreateLogAllocationConfigConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create log allocation config conflict response has a 2xx status code
func (o *CreateLogAllocationConfigConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create log allocation config conflict response has a 3xx status code
func (o *CreateLogAllocationConfigConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create log allocation config conflict response has a 4xx status code
func (o *CreateLogAllocationConfigConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create log allocation config conflict response has a 5xx status code
func (o *CreateLogAllocationConfigConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create log allocation config conflict response a status code equal to that given
func (o *CreateLogAllocationConfigConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create log allocation config conflict response
func (o *CreateLogAllocationConfigConflict) Code() int {
	return 409
}

func (o *CreateLogAllocationConfigConflict) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/log-allocation-config][%d] createLogAllocationConfigConflict  %+v", 409, o.Payload)
}

func (o *CreateLogAllocationConfigConflict) String() string {
	return fmt.Sprintf("[POST /api/v1/config/log-allocation-config][%d] createLogAllocationConfigConflict  %+v", 409, o.Payload)
}

func (o *CreateLogAllocationConfigConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateLogAllocationConfigConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogAllocationConfigInternalServerError creates a CreateLogAllocationConfigInternalServerError with default headers values
func NewCreateLogAllocationConfigInternalServerError() *CreateLogAllocationConfigInternalServerError {
	return &CreateLogAllocationConfigInternalServerError{}
}

/*
CreateLogAllocationConfigInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type CreateLogAllocationConfigInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create log allocation config internal server error response has a 2xx status code
func (o *CreateLogAllocationConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create log allocation config internal server error response has a 3xx status code
func (o *CreateLogAllocationConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create log allocation config internal server error response has a 4xx status code
func (o *CreateLogAllocationConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create log allocation config internal server error response has a 5xx status code
func (o *CreateLogAllocationConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create log allocation config internal server error response a status code equal to that given
func (o *CreateLogAllocationConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create log allocation config internal server error response
func (o *CreateLogAllocationConfigInternalServerError) Code() int {
	return 500
}

func (o *CreateLogAllocationConfigInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/log-allocation-config][%d] createLogAllocationConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateLogAllocationConfigInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/config/log-allocation-config][%d] createLogAllocationConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateLogAllocationConfigInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateLogAllocationConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLogAllocationConfigDefault creates a CreateLogAllocationConfigDefault with default headers values
func NewCreateLogAllocationConfigDefault(code int) *CreateLogAllocationConfigDefault {
	return &CreateLogAllocationConfigDefault{
		_statusCode: code,
	}
}

/*
CreateLogAllocationConfigDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type CreateLogAllocationConfigDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this create log allocation config default response has a 2xx status code
func (o *CreateLogAllocationConfigDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create log allocation config default response has a 3xx status code
func (o *CreateLogAllocationConfigDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create log allocation config default response has a 4xx status code
func (o *CreateLogAllocationConfigDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create log allocation config default response has a 5xx status code
func (o *CreateLogAllocationConfigDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create log allocation config default response a status code equal to that given
func (o *CreateLogAllocationConfigDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create log allocation config default response
func (o *CreateLogAllocationConfigDefault) Code() int {
	return o._statusCode
}

func (o *CreateLogAllocationConfigDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/log-allocation-config][%d] CreateLogAllocationConfig default  %+v", o._statusCode, o.Payload)
}

func (o *CreateLogAllocationConfigDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/config/log-allocation-config][%d] CreateLogAllocationConfig default  %+v", o._statusCode, o.Payload)
}

func (o *CreateLogAllocationConfigDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *CreateLogAllocationConfigDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
