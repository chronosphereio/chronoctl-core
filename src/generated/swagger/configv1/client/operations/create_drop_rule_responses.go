// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// CreateDropRuleReader is a Reader for the CreateDropRule structure.
type CreateDropRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDropRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateDropRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateDropRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateDropRuleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateDropRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateDropRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateDropRuleOK creates a CreateDropRuleOK with default headers values
func NewCreateDropRuleOK() *CreateDropRuleOK {
	return &CreateDropRuleOK{}
}

/*
CreateDropRuleOK describes a response with status code 200, with default header values.

A successful response containing the created DropRule.
*/
type CreateDropRuleOK struct {
	Payload *models.Configv1CreateDropRuleResponse
}

// IsSuccess returns true when this create drop rule o k response has a 2xx status code
func (o *CreateDropRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create drop rule o k response has a 3xx status code
func (o *CreateDropRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create drop rule o k response has a 4xx status code
func (o *CreateDropRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create drop rule o k response has a 5xx status code
func (o *CreateDropRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create drop rule o k response a status code equal to that given
func (o *CreateDropRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create drop rule o k response
func (o *CreateDropRuleOK) Code() int {
	return 200
}

func (o *CreateDropRuleOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/drop-rules][%d] createDropRuleOK  %+v", 200, o.Payload)
}

func (o *CreateDropRuleOK) String() string {
	return fmt.Sprintf("[POST /api/v1/config/drop-rules][%d] createDropRuleOK  %+v", 200, o.Payload)
}

func (o *CreateDropRuleOK) GetPayload() *models.Configv1CreateDropRuleResponse {
	return o.Payload
}

func (o *CreateDropRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1CreateDropRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDropRuleBadRequest creates a CreateDropRuleBadRequest with default headers values
func NewCreateDropRuleBadRequest() *CreateDropRuleBadRequest {
	return &CreateDropRuleBadRequest{}
}

/*
CreateDropRuleBadRequest describes a response with status code 400, with default header values.

Cannot create the DropRule because the request is invalid.
*/
type CreateDropRuleBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create drop rule bad request response has a 2xx status code
func (o *CreateDropRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create drop rule bad request response has a 3xx status code
func (o *CreateDropRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create drop rule bad request response has a 4xx status code
func (o *CreateDropRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create drop rule bad request response has a 5xx status code
func (o *CreateDropRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create drop rule bad request response a status code equal to that given
func (o *CreateDropRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create drop rule bad request response
func (o *CreateDropRuleBadRequest) Code() int {
	return 400
}

func (o *CreateDropRuleBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/drop-rules][%d] createDropRuleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateDropRuleBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/config/drop-rules][%d] createDropRuleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateDropRuleBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateDropRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDropRuleConflict creates a CreateDropRuleConflict with default headers values
func NewCreateDropRuleConflict() *CreateDropRuleConflict {
	return &CreateDropRuleConflict{}
}

/*
CreateDropRuleConflict describes a response with status code 409, with default header values.

Cannot create the DropRule because there is a conflict with an existing DropRule.
*/
type CreateDropRuleConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create drop rule conflict response has a 2xx status code
func (o *CreateDropRuleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create drop rule conflict response has a 3xx status code
func (o *CreateDropRuleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create drop rule conflict response has a 4xx status code
func (o *CreateDropRuleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create drop rule conflict response has a 5xx status code
func (o *CreateDropRuleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create drop rule conflict response a status code equal to that given
func (o *CreateDropRuleConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create drop rule conflict response
func (o *CreateDropRuleConflict) Code() int {
	return 409
}

func (o *CreateDropRuleConflict) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/drop-rules][%d] createDropRuleConflict  %+v", 409, o.Payload)
}

func (o *CreateDropRuleConflict) String() string {
	return fmt.Sprintf("[POST /api/v1/config/drop-rules][%d] createDropRuleConflict  %+v", 409, o.Payload)
}

func (o *CreateDropRuleConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateDropRuleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDropRuleInternalServerError creates a CreateDropRuleInternalServerError with default headers values
func NewCreateDropRuleInternalServerError() *CreateDropRuleInternalServerError {
	return &CreateDropRuleInternalServerError{}
}

/*
CreateDropRuleInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type CreateDropRuleInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create drop rule internal server error response has a 2xx status code
func (o *CreateDropRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create drop rule internal server error response has a 3xx status code
func (o *CreateDropRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create drop rule internal server error response has a 4xx status code
func (o *CreateDropRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create drop rule internal server error response has a 5xx status code
func (o *CreateDropRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create drop rule internal server error response a status code equal to that given
func (o *CreateDropRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create drop rule internal server error response
func (o *CreateDropRuleInternalServerError) Code() int {
	return 500
}

func (o *CreateDropRuleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/drop-rules][%d] createDropRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateDropRuleInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/config/drop-rules][%d] createDropRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateDropRuleInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateDropRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDropRuleDefault creates a CreateDropRuleDefault with default headers values
func NewCreateDropRuleDefault(code int) *CreateDropRuleDefault {
	return &CreateDropRuleDefault{
		_statusCode: code,
	}
}

/*
CreateDropRuleDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type CreateDropRuleDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this create drop rule default response has a 2xx status code
func (o *CreateDropRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create drop rule default response has a 3xx status code
func (o *CreateDropRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create drop rule default response has a 4xx status code
func (o *CreateDropRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create drop rule default response has a 5xx status code
func (o *CreateDropRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create drop rule default response a status code equal to that given
func (o *CreateDropRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create drop rule default response
func (o *CreateDropRuleDefault) Code() int {
	return o._statusCode
}

func (o *CreateDropRuleDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/drop-rules][%d] CreateDropRule default  %+v", o._statusCode, o.Payload)
}

func (o *CreateDropRuleDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/config/drop-rules][%d] CreateDropRule default  %+v", o._statusCode, o.Payload)
}

func (o *CreateDropRuleDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *CreateDropRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
