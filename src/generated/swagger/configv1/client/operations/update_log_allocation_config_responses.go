// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// UpdateLogAllocationConfigReader is a Reader for the UpdateLogAllocationConfig structure.
type UpdateLogAllocationConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLogAllocationConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateLogAllocationConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateLogAllocationConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateLogAllocationConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateLogAllocationConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateLogAllocationConfigDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateLogAllocationConfigOK creates a UpdateLogAllocationConfigOK with default headers values
func NewUpdateLogAllocationConfigOK() *UpdateLogAllocationConfigOK {
	return &UpdateLogAllocationConfigOK{}
}

/*
UpdateLogAllocationConfigOK describes a response with status code 200, with default header values.

A successful response containing the updated LogAllocationConfig.
*/
type UpdateLogAllocationConfigOK struct {
	Payload *models.Configv1UpdateLogAllocationConfigResponse
}

// IsSuccess returns true when this update log allocation config o k response has a 2xx status code
func (o *UpdateLogAllocationConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update log allocation config o k response has a 3xx status code
func (o *UpdateLogAllocationConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log allocation config o k response has a 4xx status code
func (o *UpdateLogAllocationConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update log allocation config o k response has a 5xx status code
func (o *UpdateLogAllocationConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update log allocation config o k response a status code equal to that given
func (o *UpdateLogAllocationConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update log allocation config o k response
func (o *UpdateLogAllocationConfigOK) Code() int {
	return 200
}

func (o *UpdateLogAllocationConfigOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/log-allocation-config][%d] updateLogAllocationConfigOK  %+v", 200, o.Payload)
}

func (o *UpdateLogAllocationConfigOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/log-allocation-config][%d] updateLogAllocationConfigOK  %+v", 200, o.Payload)
}

func (o *UpdateLogAllocationConfigOK) GetPayload() *models.Configv1UpdateLogAllocationConfigResponse {
	return o.Payload
}

func (o *UpdateLogAllocationConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1UpdateLogAllocationConfigResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogAllocationConfigBadRequest creates a UpdateLogAllocationConfigBadRequest with default headers values
func NewUpdateLogAllocationConfigBadRequest() *UpdateLogAllocationConfigBadRequest {
	return &UpdateLogAllocationConfigBadRequest{}
}

/*
UpdateLogAllocationConfigBadRequest describes a response with status code 400, with default header values.

Cannot update the LogAllocationConfig because the request is invalid.
*/
type UpdateLogAllocationConfigBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log allocation config bad request response has a 2xx status code
func (o *UpdateLogAllocationConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log allocation config bad request response has a 3xx status code
func (o *UpdateLogAllocationConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log allocation config bad request response has a 4xx status code
func (o *UpdateLogAllocationConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update log allocation config bad request response has a 5xx status code
func (o *UpdateLogAllocationConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update log allocation config bad request response a status code equal to that given
func (o *UpdateLogAllocationConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update log allocation config bad request response
func (o *UpdateLogAllocationConfigBadRequest) Code() int {
	return 400
}

func (o *UpdateLogAllocationConfigBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/log-allocation-config][%d] updateLogAllocationConfigBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateLogAllocationConfigBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/log-allocation-config][%d] updateLogAllocationConfigBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateLogAllocationConfigBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogAllocationConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogAllocationConfigNotFound creates a UpdateLogAllocationConfigNotFound with default headers values
func NewUpdateLogAllocationConfigNotFound() *UpdateLogAllocationConfigNotFound {
	return &UpdateLogAllocationConfigNotFound{}
}

/*
UpdateLogAllocationConfigNotFound describes a response with status code 404, with default header values.

Cannot update the LogAllocationConfig because LogAllocationConfig has not been created.
*/
type UpdateLogAllocationConfigNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log allocation config not found response has a 2xx status code
func (o *UpdateLogAllocationConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log allocation config not found response has a 3xx status code
func (o *UpdateLogAllocationConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log allocation config not found response has a 4xx status code
func (o *UpdateLogAllocationConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update log allocation config not found response has a 5xx status code
func (o *UpdateLogAllocationConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update log allocation config not found response a status code equal to that given
func (o *UpdateLogAllocationConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update log allocation config not found response
func (o *UpdateLogAllocationConfigNotFound) Code() int {
	return 404
}

func (o *UpdateLogAllocationConfigNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/log-allocation-config][%d] updateLogAllocationConfigNotFound  %+v", 404, o.Payload)
}

func (o *UpdateLogAllocationConfigNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/log-allocation-config][%d] updateLogAllocationConfigNotFound  %+v", 404, o.Payload)
}

func (o *UpdateLogAllocationConfigNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogAllocationConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogAllocationConfigInternalServerError creates a UpdateLogAllocationConfigInternalServerError with default headers values
func NewUpdateLogAllocationConfigInternalServerError() *UpdateLogAllocationConfigInternalServerError {
	return &UpdateLogAllocationConfigInternalServerError{}
}

/*
UpdateLogAllocationConfigInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateLogAllocationConfigInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log allocation config internal server error response has a 2xx status code
func (o *UpdateLogAllocationConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log allocation config internal server error response has a 3xx status code
func (o *UpdateLogAllocationConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log allocation config internal server error response has a 4xx status code
func (o *UpdateLogAllocationConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update log allocation config internal server error response has a 5xx status code
func (o *UpdateLogAllocationConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update log allocation config internal server error response a status code equal to that given
func (o *UpdateLogAllocationConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update log allocation config internal server error response
func (o *UpdateLogAllocationConfigInternalServerError) Code() int {
	return 500
}

func (o *UpdateLogAllocationConfigInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/log-allocation-config][%d] updateLogAllocationConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateLogAllocationConfigInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/log-allocation-config][%d] updateLogAllocationConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateLogAllocationConfigInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogAllocationConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogAllocationConfigDefault creates a UpdateLogAllocationConfigDefault with default headers values
func NewUpdateLogAllocationConfigDefault(code int) *UpdateLogAllocationConfigDefault {
	return &UpdateLogAllocationConfigDefault{
		_statusCode: code,
	}
}

/*
UpdateLogAllocationConfigDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateLogAllocationConfigDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update log allocation config default response has a 2xx status code
func (o *UpdateLogAllocationConfigDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update log allocation config default response has a 3xx status code
func (o *UpdateLogAllocationConfigDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update log allocation config default response has a 4xx status code
func (o *UpdateLogAllocationConfigDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update log allocation config default response has a 5xx status code
func (o *UpdateLogAllocationConfigDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update log allocation config default response a status code equal to that given
func (o *UpdateLogAllocationConfigDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update log allocation config default response
func (o *UpdateLogAllocationConfigDefault) Code() int {
	return o._statusCode
}

func (o *UpdateLogAllocationConfigDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/log-allocation-config][%d] UpdateLogAllocationConfig default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateLogAllocationConfigDefault) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/log-allocation-config][%d] UpdateLogAllocationConfig default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateLogAllocationConfigDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateLogAllocationConfigDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
