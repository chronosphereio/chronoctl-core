// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// DeleteLogAllocationConfigReader is a Reader for the DeleteLogAllocationConfig structure.
type DeleteLogAllocationConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLogAllocationConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteLogAllocationConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteLogAllocationConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteLogAllocationConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteLogAllocationConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteLogAllocationConfigDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteLogAllocationConfigOK creates a DeleteLogAllocationConfigOK with default headers values
func NewDeleteLogAllocationConfigOK() *DeleteLogAllocationConfigOK {
	return &DeleteLogAllocationConfigOK{}
}

/*
DeleteLogAllocationConfigOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteLogAllocationConfigOK struct {
	Payload models.Configv1DeleteLogAllocationConfigResponse
}

// IsSuccess returns true when this delete log allocation config o k response has a 2xx status code
func (o *DeleteLogAllocationConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete log allocation config o k response has a 3xx status code
func (o *DeleteLogAllocationConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log allocation config o k response has a 4xx status code
func (o *DeleteLogAllocationConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete log allocation config o k response has a 5xx status code
func (o *DeleteLogAllocationConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log allocation config o k response a status code equal to that given
func (o *DeleteLogAllocationConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete log allocation config o k response
func (o *DeleteLogAllocationConfigOK) Code() int {
	return 200
}

func (o *DeleteLogAllocationConfigOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-allocation-config][%d] deleteLogAllocationConfigOK  %+v", 200, o.Payload)
}

func (o *DeleteLogAllocationConfigOK) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-allocation-config][%d] deleteLogAllocationConfigOK  %+v", 200, o.Payload)
}

func (o *DeleteLogAllocationConfigOK) GetPayload() models.Configv1DeleteLogAllocationConfigResponse {
	return o.Payload
}

func (o *DeleteLogAllocationConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogAllocationConfigBadRequest creates a DeleteLogAllocationConfigBadRequest with default headers values
func NewDeleteLogAllocationConfigBadRequest() *DeleteLogAllocationConfigBadRequest {
	return &DeleteLogAllocationConfigBadRequest{}
}

/*
DeleteLogAllocationConfigBadRequest describes a response with status code 400, with default header values.

Cannot delete the LogAllocationConfig because it is in use.
*/
type DeleteLogAllocationConfigBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete log allocation config bad request response has a 2xx status code
func (o *DeleteLogAllocationConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log allocation config bad request response has a 3xx status code
func (o *DeleteLogAllocationConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log allocation config bad request response has a 4xx status code
func (o *DeleteLogAllocationConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete log allocation config bad request response has a 5xx status code
func (o *DeleteLogAllocationConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log allocation config bad request response a status code equal to that given
func (o *DeleteLogAllocationConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete log allocation config bad request response
func (o *DeleteLogAllocationConfigBadRequest) Code() int {
	return 400
}

func (o *DeleteLogAllocationConfigBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-allocation-config][%d] deleteLogAllocationConfigBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLogAllocationConfigBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-allocation-config][%d] deleteLogAllocationConfigBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLogAllocationConfigBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteLogAllocationConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogAllocationConfigNotFound creates a DeleteLogAllocationConfigNotFound with default headers values
func NewDeleteLogAllocationConfigNotFound() *DeleteLogAllocationConfigNotFound {
	return &DeleteLogAllocationConfigNotFound{}
}

/*
DeleteLogAllocationConfigNotFound describes a response with status code 404, with default header values.

Cannot delete the LogAllocationConfig because the slug does not exist.
*/
type DeleteLogAllocationConfigNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete log allocation config not found response has a 2xx status code
func (o *DeleteLogAllocationConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log allocation config not found response has a 3xx status code
func (o *DeleteLogAllocationConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log allocation config not found response has a 4xx status code
func (o *DeleteLogAllocationConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete log allocation config not found response has a 5xx status code
func (o *DeleteLogAllocationConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log allocation config not found response a status code equal to that given
func (o *DeleteLogAllocationConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete log allocation config not found response
func (o *DeleteLogAllocationConfigNotFound) Code() int {
	return 404
}

func (o *DeleteLogAllocationConfigNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-allocation-config][%d] deleteLogAllocationConfigNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLogAllocationConfigNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-allocation-config][%d] deleteLogAllocationConfigNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLogAllocationConfigNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteLogAllocationConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogAllocationConfigInternalServerError creates a DeleteLogAllocationConfigInternalServerError with default headers values
func NewDeleteLogAllocationConfigInternalServerError() *DeleteLogAllocationConfigInternalServerError {
	return &DeleteLogAllocationConfigInternalServerError{}
}

/*
DeleteLogAllocationConfigInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type DeleteLogAllocationConfigInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete log allocation config internal server error response has a 2xx status code
func (o *DeleteLogAllocationConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log allocation config internal server error response has a 3xx status code
func (o *DeleteLogAllocationConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log allocation config internal server error response has a 4xx status code
func (o *DeleteLogAllocationConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete log allocation config internal server error response has a 5xx status code
func (o *DeleteLogAllocationConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete log allocation config internal server error response a status code equal to that given
func (o *DeleteLogAllocationConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete log allocation config internal server error response
func (o *DeleteLogAllocationConfigInternalServerError) Code() int {
	return 500
}

func (o *DeleteLogAllocationConfigInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-allocation-config][%d] deleteLogAllocationConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLogAllocationConfigInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-allocation-config][%d] deleteLogAllocationConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLogAllocationConfigInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteLogAllocationConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogAllocationConfigDefault creates a DeleteLogAllocationConfigDefault with default headers values
func NewDeleteLogAllocationConfigDefault(code int) *DeleteLogAllocationConfigDefault {
	return &DeleteLogAllocationConfigDefault{
		_statusCode: code,
	}
}

/*
DeleteLogAllocationConfigDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type DeleteLogAllocationConfigDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this delete log allocation config default response has a 2xx status code
func (o *DeleteLogAllocationConfigDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete log allocation config default response has a 3xx status code
func (o *DeleteLogAllocationConfigDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete log allocation config default response has a 4xx status code
func (o *DeleteLogAllocationConfigDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete log allocation config default response has a 5xx status code
func (o *DeleteLogAllocationConfigDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete log allocation config default response a status code equal to that given
func (o *DeleteLogAllocationConfigDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete log allocation config default response
func (o *DeleteLogAllocationConfigDefault) Code() int {
	return o._statusCode
}

func (o *DeleteLogAllocationConfigDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-allocation-config][%d] DeleteLogAllocationConfig default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteLogAllocationConfigDefault) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-allocation-config][%d] DeleteLogAllocationConfig default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteLogAllocationConfigDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *DeleteLogAllocationConfigDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
