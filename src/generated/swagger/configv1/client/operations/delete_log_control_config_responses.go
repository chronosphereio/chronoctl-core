// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// DeleteLogControlConfigReader is a Reader for the DeleteLogControlConfig structure.
type DeleteLogControlConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLogControlConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteLogControlConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteLogControlConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteLogControlConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteLogControlConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteLogControlConfigDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteLogControlConfigOK creates a DeleteLogControlConfigOK with default headers values
func NewDeleteLogControlConfigOK() *DeleteLogControlConfigOK {
	return &DeleteLogControlConfigOK{}
}

/*
DeleteLogControlConfigOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteLogControlConfigOK struct {
	Payload models.Configv1DeleteLogControlConfigResponse
}

// IsSuccess returns true when this delete log control config o k response has a 2xx status code
func (o *DeleteLogControlConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete log control config o k response has a 3xx status code
func (o *DeleteLogControlConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log control config o k response has a 4xx status code
func (o *DeleteLogControlConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete log control config o k response has a 5xx status code
func (o *DeleteLogControlConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log control config o k response a status code equal to that given
func (o *DeleteLogControlConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete log control config o k response
func (o *DeleteLogControlConfigOK) Code() int {
	return 200
}

func (o *DeleteLogControlConfigOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-control-config][%d] deleteLogControlConfigOK  %+v", 200, o.Payload)
}

func (o *DeleteLogControlConfigOK) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-control-config][%d] deleteLogControlConfigOK  %+v", 200, o.Payload)
}

func (o *DeleteLogControlConfigOK) GetPayload() models.Configv1DeleteLogControlConfigResponse {
	return o.Payload
}

func (o *DeleteLogControlConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogControlConfigBadRequest creates a DeleteLogControlConfigBadRequest with default headers values
func NewDeleteLogControlConfigBadRequest() *DeleteLogControlConfigBadRequest {
	return &DeleteLogControlConfigBadRequest{}
}

/*
DeleteLogControlConfigBadRequest describes a response with status code 400, with default header values.

Cannot delete the LogControlConfig because it is in use.
*/
type DeleteLogControlConfigBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete log control config bad request response has a 2xx status code
func (o *DeleteLogControlConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log control config bad request response has a 3xx status code
func (o *DeleteLogControlConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log control config bad request response has a 4xx status code
func (o *DeleteLogControlConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete log control config bad request response has a 5xx status code
func (o *DeleteLogControlConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log control config bad request response a status code equal to that given
func (o *DeleteLogControlConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete log control config bad request response
func (o *DeleteLogControlConfigBadRequest) Code() int {
	return 400
}

func (o *DeleteLogControlConfigBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-control-config][%d] deleteLogControlConfigBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLogControlConfigBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-control-config][%d] deleteLogControlConfigBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLogControlConfigBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteLogControlConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogControlConfigNotFound creates a DeleteLogControlConfigNotFound with default headers values
func NewDeleteLogControlConfigNotFound() *DeleteLogControlConfigNotFound {
	return &DeleteLogControlConfigNotFound{}
}

/*
DeleteLogControlConfigNotFound describes a response with status code 404, with default header values.

Cannot delete the LogControlConfig because the slug does not exist.
*/
type DeleteLogControlConfigNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete log control config not found response has a 2xx status code
func (o *DeleteLogControlConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log control config not found response has a 3xx status code
func (o *DeleteLogControlConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log control config not found response has a 4xx status code
func (o *DeleteLogControlConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete log control config not found response has a 5xx status code
func (o *DeleteLogControlConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log control config not found response a status code equal to that given
func (o *DeleteLogControlConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete log control config not found response
func (o *DeleteLogControlConfigNotFound) Code() int {
	return 404
}

func (o *DeleteLogControlConfigNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-control-config][%d] deleteLogControlConfigNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLogControlConfigNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-control-config][%d] deleteLogControlConfigNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLogControlConfigNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteLogControlConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogControlConfigInternalServerError creates a DeleteLogControlConfigInternalServerError with default headers values
func NewDeleteLogControlConfigInternalServerError() *DeleteLogControlConfigInternalServerError {
	return &DeleteLogControlConfigInternalServerError{}
}

/*
DeleteLogControlConfigInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type DeleteLogControlConfigInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete log control config internal server error response has a 2xx status code
func (o *DeleteLogControlConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log control config internal server error response has a 3xx status code
func (o *DeleteLogControlConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log control config internal server error response has a 4xx status code
func (o *DeleteLogControlConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete log control config internal server error response has a 5xx status code
func (o *DeleteLogControlConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete log control config internal server error response a status code equal to that given
func (o *DeleteLogControlConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete log control config internal server error response
func (o *DeleteLogControlConfigInternalServerError) Code() int {
	return 500
}

func (o *DeleteLogControlConfigInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-control-config][%d] deleteLogControlConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLogControlConfigInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-control-config][%d] deleteLogControlConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLogControlConfigInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteLogControlConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogControlConfigDefault creates a DeleteLogControlConfigDefault with default headers values
func NewDeleteLogControlConfigDefault(code int) *DeleteLogControlConfigDefault {
	return &DeleteLogControlConfigDefault{
		_statusCode: code,
	}
}

/*
DeleteLogControlConfigDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type DeleteLogControlConfigDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this delete log control config default response has a 2xx status code
func (o *DeleteLogControlConfigDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete log control config default response has a 3xx status code
func (o *DeleteLogControlConfigDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete log control config default response has a 4xx status code
func (o *DeleteLogControlConfigDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete log control config default response has a 5xx status code
func (o *DeleteLogControlConfigDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete log control config default response a status code equal to that given
func (o *DeleteLogControlConfigDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete log control config default response
func (o *DeleteLogControlConfigDefault) Code() int {
	return o._statusCode
}

func (o *DeleteLogControlConfigDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-control-config][%d] DeleteLogControlConfig default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteLogControlConfigDefault) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-control-config][%d] DeleteLogControlConfig default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteLogControlConfigDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *DeleteLogControlConfigDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
