// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// UpdateDropRuleReader is a Reader for the UpdateDropRule structure.
type UpdateDropRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDropRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDropRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDropRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDropRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateDropRuleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDropRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateDropRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateDropRuleOK creates a UpdateDropRuleOK with default headers values
func NewUpdateDropRuleOK() *UpdateDropRuleOK {
	return &UpdateDropRuleOK{}
}

/*
UpdateDropRuleOK describes a response with status code 200, with default header values.

A successful response containing the updated DropRule.
*/
type UpdateDropRuleOK struct {
	Payload *models.Configv1UpdateDropRuleResponse
}

// IsSuccess returns true when this update drop rule o k response has a 2xx status code
func (o *UpdateDropRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update drop rule o k response has a 3xx status code
func (o *UpdateDropRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update drop rule o k response has a 4xx status code
func (o *UpdateDropRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update drop rule o k response has a 5xx status code
func (o *UpdateDropRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update drop rule o k response a status code equal to that given
func (o *UpdateDropRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update drop rule o k response
func (o *UpdateDropRuleOK) Code() int {
	return 200
}

func (o *UpdateDropRuleOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/drop-rules/{slug}][%d] updateDropRuleOK  %+v", 200, o.Payload)
}

func (o *UpdateDropRuleOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/drop-rules/{slug}][%d] updateDropRuleOK  %+v", 200, o.Payload)
}

func (o *UpdateDropRuleOK) GetPayload() *models.Configv1UpdateDropRuleResponse {
	return o.Payload
}

func (o *UpdateDropRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1UpdateDropRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDropRuleBadRequest creates a UpdateDropRuleBadRequest with default headers values
func NewUpdateDropRuleBadRequest() *UpdateDropRuleBadRequest {
	return &UpdateDropRuleBadRequest{}
}

/*
UpdateDropRuleBadRequest describes a response with status code 400, with default header values.

Cannot update the DropRule because the request is invalid.
*/
type UpdateDropRuleBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update drop rule bad request response has a 2xx status code
func (o *UpdateDropRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update drop rule bad request response has a 3xx status code
func (o *UpdateDropRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update drop rule bad request response has a 4xx status code
func (o *UpdateDropRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update drop rule bad request response has a 5xx status code
func (o *UpdateDropRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update drop rule bad request response a status code equal to that given
func (o *UpdateDropRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update drop rule bad request response
func (o *UpdateDropRuleBadRequest) Code() int {
	return 400
}

func (o *UpdateDropRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/drop-rules/{slug}][%d] updateDropRuleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDropRuleBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/drop-rules/{slug}][%d] updateDropRuleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDropRuleBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateDropRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDropRuleNotFound creates a UpdateDropRuleNotFound with default headers values
func NewUpdateDropRuleNotFound() *UpdateDropRuleNotFound {
	return &UpdateDropRuleNotFound{}
}

/*
UpdateDropRuleNotFound describes a response with status code 404, with default header values.

Cannot update the DropRule because the slug does not exist.
*/
type UpdateDropRuleNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update drop rule not found response has a 2xx status code
func (o *UpdateDropRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update drop rule not found response has a 3xx status code
func (o *UpdateDropRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update drop rule not found response has a 4xx status code
func (o *UpdateDropRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update drop rule not found response has a 5xx status code
func (o *UpdateDropRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update drop rule not found response a status code equal to that given
func (o *UpdateDropRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update drop rule not found response
func (o *UpdateDropRuleNotFound) Code() int {
	return 404
}

func (o *UpdateDropRuleNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/drop-rules/{slug}][%d] updateDropRuleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDropRuleNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/drop-rules/{slug}][%d] updateDropRuleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDropRuleNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateDropRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDropRuleConflict creates a UpdateDropRuleConflict with default headers values
func NewUpdateDropRuleConflict() *UpdateDropRuleConflict {
	return &UpdateDropRuleConflict{}
}

/*
UpdateDropRuleConflict describes a response with status code 409, with default header values.

Cannot update the DropRule because there is a conflict with an existing DropRule.
*/
type UpdateDropRuleConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update drop rule conflict response has a 2xx status code
func (o *UpdateDropRuleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update drop rule conflict response has a 3xx status code
func (o *UpdateDropRuleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update drop rule conflict response has a 4xx status code
func (o *UpdateDropRuleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update drop rule conflict response has a 5xx status code
func (o *UpdateDropRuleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update drop rule conflict response a status code equal to that given
func (o *UpdateDropRuleConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update drop rule conflict response
func (o *UpdateDropRuleConflict) Code() int {
	return 409
}

func (o *UpdateDropRuleConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/drop-rules/{slug}][%d] updateDropRuleConflict  %+v", 409, o.Payload)
}

func (o *UpdateDropRuleConflict) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/drop-rules/{slug}][%d] updateDropRuleConflict  %+v", 409, o.Payload)
}

func (o *UpdateDropRuleConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateDropRuleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDropRuleInternalServerError creates a UpdateDropRuleInternalServerError with default headers values
func NewUpdateDropRuleInternalServerError() *UpdateDropRuleInternalServerError {
	return &UpdateDropRuleInternalServerError{}
}

/*
UpdateDropRuleInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateDropRuleInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update drop rule internal server error response has a 2xx status code
func (o *UpdateDropRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update drop rule internal server error response has a 3xx status code
func (o *UpdateDropRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update drop rule internal server error response has a 4xx status code
func (o *UpdateDropRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update drop rule internal server error response has a 5xx status code
func (o *UpdateDropRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update drop rule internal server error response a status code equal to that given
func (o *UpdateDropRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update drop rule internal server error response
func (o *UpdateDropRuleInternalServerError) Code() int {
	return 500
}

func (o *UpdateDropRuleInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/drop-rules/{slug}][%d] updateDropRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDropRuleInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/drop-rules/{slug}][%d] updateDropRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDropRuleInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateDropRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDropRuleDefault creates a UpdateDropRuleDefault with default headers values
func NewUpdateDropRuleDefault(code int) *UpdateDropRuleDefault {
	return &UpdateDropRuleDefault{
		_statusCode: code,
	}
}

/*
UpdateDropRuleDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateDropRuleDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update drop rule default response has a 2xx status code
func (o *UpdateDropRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update drop rule default response has a 3xx status code
func (o *UpdateDropRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update drop rule default response has a 4xx status code
func (o *UpdateDropRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update drop rule default response has a 5xx status code
func (o *UpdateDropRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update drop rule default response a status code equal to that given
func (o *UpdateDropRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update drop rule default response
func (o *UpdateDropRuleDefault) Code() int {
	return o._statusCode
}

func (o *UpdateDropRuleDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/drop-rules/{slug}][%d] UpdateDropRule default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateDropRuleDefault) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/drop-rules/{slug}][%d] UpdateDropRule default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateDropRuleDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateDropRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateDropRuleBody update drop rule body
swagger:model UpdateDropRuleBody
*/
type UpdateDropRuleBody struct {

	// If true, the DropRule will be created if it does not already exist, identified by slug. If false, an error will be returned if the DropRule does not already exist.
	CreateIfMissing bool `json:"create_if_missing,omitempty"`

	// drop rule
	DropRule *models.Configv1DropRule `json:"drop_rule,omitempty"`

	// If true, the DropRule will not be created nor updated, and no response DropRule will be returned. The response will return an error if the given DropRule is invalid.
	DryRun bool `json:"dry_run,omitempty"`
}

// Validate validates this update drop rule body
func (o *UpdateDropRuleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDropRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDropRuleBody) validateDropRule(formats strfmt.Registry) error {
	if swag.IsZero(o.DropRule) { // not required
		return nil
	}

	if o.DropRule != nil {
		if err := o.DropRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "drop_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "drop_rule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update drop rule body based on the context it is used
func (o *UpdateDropRuleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDropRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDropRuleBody) contextValidateDropRule(ctx context.Context, formats strfmt.Registry) error {

	if o.DropRule != nil {

		if swag.IsZero(o.DropRule) { // not required
			return nil
		}

		if err := o.DropRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "drop_rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "drop_rule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDropRuleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDropRuleBody) UnmarshalBinary(b []byte) error {
	var res UpdateDropRuleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
