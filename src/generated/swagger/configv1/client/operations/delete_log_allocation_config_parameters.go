// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteLogAllocationConfigParams creates a new DeleteLogAllocationConfigParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteLogAllocationConfigParams() *DeleteLogAllocationConfigParams {
	return &DeleteLogAllocationConfigParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteLogAllocationConfigParamsWithTimeout creates a new DeleteLogAllocationConfigParams object
// with the ability to set a timeout on a request.
func NewDeleteLogAllocationConfigParamsWithTimeout(timeout time.Duration) *DeleteLogAllocationConfigParams {
	return &DeleteLogAllocationConfigParams{
		timeout: timeout,
	}
}

// NewDeleteLogAllocationConfigParamsWithContext creates a new DeleteLogAllocationConfigParams object
// with the ability to set a context for a request.
func NewDeleteLogAllocationConfigParamsWithContext(ctx context.Context) *DeleteLogAllocationConfigParams {
	return &DeleteLogAllocationConfigParams{
		Context: ctx,
	}
}

// NewDeleteLogAllocationConfigParamsWithHTTPClient creates a new DeleteLogAllocationConfigParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteLogAllocationConfigParamsWithHTTPClient(client *http.Client) *DeleteLogAllocationConfigParams {
	return &DeleteLogAllocationConfigParams{
		HTTPClient: client,
	}
}

/*
DeleteLogAllocationConfigParams contains all the parameters to send to the API endpoint

	for the delete log allocation config operation.

	Typically these are written to a http.Request.
*/
type DeleteLogAllocationConfigParams struct {

	// DryRun.
	DryRun *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete log allocation config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteLogAllocationConfigParams) WithDefaults() *DeleteLogAllocationConfigParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete log allocation config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteLogAllocationConfigParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete log allocation config params
func (o *DeleteLogAllocationConfigParams) WithTimeout(timeout time.Duration) *DeleteLogAllocationConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete log allocation config params
func (o *DeleteLogAllocationConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete log allocation config params
func (o *DeleteLogAllocationConfigParams) WithContext(ctx context.Context) *DeleteLogAllocationConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete log allocation config params
func (o *DeleteLogAllocationConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete log allocation config params
func (o *DeleteLogAllocationConfigParams) WithHTTPClient(client *http.Client) *DeleteLogAllocationConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete log allocation config params
func (o *DeleteLogAllocationConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDryRun adds the dryRun to the delete log allocation config params
func (o *DeleteLogAllocationConfigParams) WithDryRun(dryRun *bool) *DeleteLogAllocationConfigParams {
	o.SetDryRun(dryRun)
	return o
}

// SetDryRun adds the dryRun to the delete log allocation config params
func (o *DeleteLogAllocationConfigParams) SetDryRun(dryRun *bool) {
	o.DryRun = dryRun
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteLogAllocationConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DryRun != nil {

		// query param dry_run
		var qrDryRun bool

		if o.DryRun != nil {
			qrDryRun = *o.DryRun
		}
		qDryRun := swag.FormatBool(qrDryRun)
		if qDryRun != "" {

			if err := r.SetQueryParam("dry_run", qDryRun); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
