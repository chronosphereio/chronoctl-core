// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// ReadMutingRuleReader is a Reader for the ReadMutingRule structure.
type ReadMutingRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadMutingRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadMutingRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewReadMutingRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadMutingRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReadMutingRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReadMutingRuleOK creates a ReadMutingRuleOK with default headers values
func NewReadMutingRuleOK() *ReadMutingRuleOK {
	return &ReadMutingRuleOK{}
}

/*
ReadMutingRuleOK describes a response with status code 200, with default header values.

A successful response.
*/
type ReadMutingRuleOK struct {
	Payload *models.Configv1ReadMutingRuleResponse
}

// IsSuccess returns true when this read muting rule o k response has a 2xx status code
func (o *ReadMutingRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this read muting rule o k response has a 3xx status code
func (o *ReadMutingRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read muting rule o k response has a 4xx status code
func (o *ReadMutingRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this read muting rule o k response has a 5xx status code
func (o *ReadMutingRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this read muting rule o k response a status code equal to that given
func (o *ReadMutingRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the read muting rule o k response
func (o *ReadMutingRuleOK) Code() int {
	return 200
}

func (o *ReadMutingRuleOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/config/muting-rules/{slug}][%d] readMutingRuleOK  %+v", 200, o.Payload)
}

func (o *ReadMutingRuleOK) String() string {
	return fmt.Sprintf("[GET /api/v1/config/muting-rules/{slug}][%d] readMutingRuleOK  %+v", 200, o.Payload)
}

func (o *ReadMutingRuleOK) GetPayload() *models.Configv1ReadMutingRuleResponse {
	return o.Payload
}

func (o *ReadMutingRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1ReadMutingRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadMutingRuleNotFound creates a ReadMutingRuleNotFound with default headers values
func NewReadMutingRuleNotFound() *ReadMutingRuleNotFound {
	return &ReadMutingRuleNotFound{}
}

/*
ReadMutingRuleNotFound describes a response with status code 404, with default header values.

Cannot read the MutingRule because the slug does not exist.
*/
type ReadMutingRuleNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this read muting rule not found response has a 2xx status code
func (o *ReadMutingRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read muting rule not found response has a 3xx status code
func (o *ReadMutingRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read muting rule not found response has a 4xx status code
func (o *ReadMutingRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this read muting rule not found response has a 5xx status code
func (o *ReadMutingRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this read muting rule not found response a status code equal to that given
func (o *ReadMutingRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the read muting rule not found response
func (o *ReadMutingRuleNotFound) Code() int {
	return 404
}

func (o *ReadMutingRuleNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/config/muting-rules/{slug}][%d] readMutingRuleNotFound  %+v", 404, o.Payload)
}

func (o *ReadMutingRuleNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/config/muting-rules/{slug}][%d] readMutingRuleNotFound  %+v", 404, o.Payload)
}

func (o *ReadMutingRuleNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *ReadMutingRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadMutingRuleInternalServerError creates a ReadMutingRuleInternalServerError with default headers values
func NewReadMutingRuleInternalServerError() *ReadMutingRuleInternalServerError {
	return &ReadMutingRuleInternalServerError{}
}

/*
ReadMutingRuleInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type ReadMutingRuleInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this read muting rule internal server error response has a 2xx status code
func (o *ReadMutingRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read muting rule internal server error response has a 3xx status code
func (o *ReadMutingRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read muting rule internal server error response has a 4xx status code
func (o *ReadMutingRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this read muting rule internal server error response has a 5xx status code
func (o *ReadMutingRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this read muting rule internal server error response a status code equal to that given
func (o *ReadMutingRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the read muting rule internal server error response
func (o *ReadMutingRuleInternalServerError) Code() int {
	return 500
}

func (o *ReadMutingRuleInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/config/muting-rules/{slug}][%d] readMutingRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadMutingRuleInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1/config/muting-rules/{slug}][%d] readMutingRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadMutingRuleInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *ReadMutingRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadMutingRuleDefault creates a ReadMutingRuleDefault with default headers values
func NewReadMutingRuleDefault(code int) *ReadMutingRuleDefault {
	return &ReadMutingRuleDefault{
		_statusCode: code,
	}
}

/*
ReadMutingRuleDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type ReadMutingRuleDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this read muting rule default response has a 2xx status code
func (o *ReadMutingRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this read muting rule default response has a 3xx status code
func (o *ReadMutingRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this read muting rule default response has a 4xx status code
func (o *ReadMutingRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this read muting rule default response has a 5xx status code
func (o *ReadMutingRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this read muting rule default response a status code equal to that given
func (o *ReadMutingRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the read muting rule default response
func (o *ReadMutingRuleDefault) Code() int {
	return o._statusCode
}

func (o *ReadMutingRuleDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/config/muting-rules/{slug}][%d] ReadMutingRule default  %+v", o._statusCode, o.Payload)
}

func (o *ReadMutingRuleDefault) String() string {
	return fmt.Sprintf("[GET /api/v1/config/muting-rules/{slug}][%d] ReadMutingRule default  %+v", o._statusCode, o.Payload)
}

func (o *ReadMutingRuleDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *ReadMutingRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
