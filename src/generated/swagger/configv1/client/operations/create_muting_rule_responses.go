// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// CreateMutingRuleReader is a Reader for the CreateMutingRule structure.
type CreateMutingRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateMutingRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateMutingRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateMutingRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateMutingRuleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateMutingRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateMutingRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateMutingRuleOK creates a CreateMutingRuleOK with default headers values
func NewCreateMutingRuleOK() *CreateMutingRuleOK {
	return &CreateMutingRuleOK{}
}

/*
CreateMutingRuleOK describes a response with status code 200, with default header values.

A successful response containing the created MutingRule.
*/
type CreateMutingRuleOK struct {
	Payload *models.Configv1CreateMutingRuleResponse
}

// IsSuccess returns true when this create muting rule o k response has a 2xx status code
func (o *CreateMutingRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create muting rule o k response has a 3xx status code
func (o *CreateMutingRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create muting rule o k response has a 4xx status code
func (o *CreateMutingRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create muting rule o k response has a 5xx status code
func (o *CreateMutingRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create muting rule o k response a status code equal to that given
func (o *CreateMutingRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create muting rule o k response
func (o *CreateMutingRuleOK) Code() int {
	return 200
}

func (o *CreateMutingRuleOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/muting-rules][%d] createMutingRuleOK  %+v", 200, o.Payload)
}

func (o *CreateMutingRuleOK) String() string {
	return fmt.Sprintf("[POST /api/v1/config/muting-rules][%d] createMutingRuleOK  %+v", 200, o.Payload)
}

func (o *CreateMutingRuleOK) GetPayload() *models.Configv1CreateMutingRuleResponse {
	return o.Payload
}

func (o *CreateMutingRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1CreateMutingRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMutingRuleBadRequest creates a CreateMutingRuleBadRequest with default headers values
func NewCreateMutingRuleBadRequest() *CreateMutingRuleBadRequest {
	return &CreateMutingRuleBadRequest{}
}

/*
CreateMutingRuleBadRequest describes a response with status code 400, with default header values.

Cannot create the MutingRule because the request is invalid.
*/
type CreateMutingRuleBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create muting rule bad request response has a 2xx status code
func (o *CreateMutingRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create muting rule bad request response has a 3xx status code
func (o *CreateMutingRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create muting rule bad request response has a 4xx status code
func (o *CreateMutingRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create muting rule bad request response has a 5xx status code
func (o *CreateMutingRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create muting rule bad request response a status code equal to that given
func (o *CreateMutingRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create muting rule bad request response
func (o *CreateMutingRuleBadRequest) Code() int {
	return 400
}

func (o *CreateMutingRuleBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/muting-rules][%d] createMutingRuleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateMutingRuleBadRequest) String() string {
	return fmt.Sprintf("[POST /api/v1/config/muting-rules][%d] createMutingRuleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateMutingRuleBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateMutingRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMutingRuleConflict creates a CreateMutingRuleConflict with default headers values
func NewCreateMutingRuleConflict() *CreateMutingRuleConflict {
	return &CreateMutingRuleConflict{}
}

/*
CreateMutingRuleConflict describes a response with status code 409, with default header values.

Cannot create the MutingRule because there is a conflict with an existing MutingRule.
*/
type CreateMutingRuleConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create muting rule conflict response has a 2xx status code
func (o *CreateMutingRuleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create muting rule conflict response has a 3xx status code
func (o *CreateMutingRuleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create muting rule conflict response has a 4xx status code
func (o *CreateMutingRuleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create muting rule conflict response has a 5xx status code
func (o *CreateMutingRuleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create muting rule conflict response a status code equal to that given
func (o *CreateMutingRuleConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create muting rule conflict response
func (o *CreateMutingRuleConflict) Code() int {
	return 409
}

func (o *CreateMutingRuleConflict) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/muting-rules][%d] createMutingRuleConflict  %+v", 409, o.Payload)
}

func (o *CreateMutingRuleConflict) String() string {
	return fmt.Sprintf("[POST /api/v1/config/muting-rules][%d] createMutingRuleConflict  %+v", 409, o.Payload)
}

func (o *CreateMutingRuleConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateMutingRuleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMutingRuleInternalServerError creates a CreateMutingRuleInternalServerError with default headers values
func NewCreateMutingRuleInternalServerError() *CreateMutingRuleInternalServerError {
	return &CreateMutingRuleInternalServerError{}
}

/*
CreateMutingRuleInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type CreateMutingRuleInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create muting rule internal server error response has a 2xx status code
func (o *CreateMutingRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create muting rule internal server error response has a 3xx status code
func (o *CreateMutingRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create muting rule internal server error response has a 4xx status code
func (o *CreateMutingRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create muting rule internal server error response has a 5xx status code
func (o *CreateMutingRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create muting rule internal server error response a status code equal to that given
func (o *CreateMutingRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create muting rule internal server error response
func (o *CreateMutingRuleInternalServerError) Code() int {
	return 500
}

func (o *CreateMutingRuleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/muting-rules][%d] createMutingRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateMutingRuleInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/v1/config/muting-rules][%d] createMutingRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateMutingRuleInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateMutingRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMutingRuleDefault creates a CreateMutingRuleDefault with default headers values
func NewCreateMutingRuleDefault(code int) *CreateMutingRuleDefault {
	return &CreateMutingRuleDefault{
		_statusCode: code,
	}
}

/*
CreateMutingRuleDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type CreateMutingRuleDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this create muting rule default response has a 2xx status code
func (o *CreateMutingRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create muting rule default response has a 3xx status code
func (o *CreateMutingRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create muting rule default response has a 4xx status code
func (o *CreateMutingRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create muting rule default response has a 5xx status code
func (o *CreateMutingRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create muting rule default response a status code equal to that given
func (o *CreateMutingRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create muting rule default response
func (o *CreateMutingRuleDefault) Code() int {
	return o._statusCode
}

func (o *CreateMutingRuleDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/config/muting-rules][%d] CreateMutingRule default  %+v", o._statusCode, o.Payload)
}

func (o *CreateMutingRuleDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/config/muting-rules][%d] CreateMutingRule default  %+v", o._statusCode, o.Payload)
}

func (o *CreateMutingRuleDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *CreateMutingRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
