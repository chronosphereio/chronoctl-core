// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// UpdateMutingRuleReader is a Reader for the UpdateMutingRule structure.
type UpdateMutingRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMutingRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateMutingRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateMutingRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateMutingRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateMutingRuleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateMutingRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateMutingRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateMutingRuleOK creates a UpdateMutingRuleOK with default headers values
func NewUpdateMutingRuleOK() *UpdateMutingRuleOK {
	return &UpdateMutingRuleOK{}
}

/*
UpdateMutingRuleOK describes a response with status code 200, with default header values.

A successful response containing the updated MutingRule.
*/
type UpdateMutingRuleOK struct {
	Payload *models.Configv1UpdateMutingRuleResponse
}

// IsSuccess returns true when this update muting rule o k response has a 2xx status code
func (o *UpdateMutingRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update muting rule o k response has a 3xx status code
func (o *UpdateMutingRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update muting rule o k response has a 4xx status code
func (o *UpdateMutingRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update muting rule o k response has a 5xx status code
func (o *UpdateMutingRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update muting rule o k response a status code equal to that given
func (o *UpdateMutingRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update muting rule o k response
func (o *UpdateMutingRuleOK) Code() int {
	return 200
}

func (o *UpdateMutingRuleOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/muting-rules/{slug}][%d] updateMutingRuleOK  %+v", 200, o.Payload)
}

func (o *UpdateMutingRuleOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/muting-rules/{slug}][%d] updateMutingRuleOK  %+v", 200, o.Payload)
}

func (o *UpdateMutingRuleOK) GetPayload() *models.Configv1UpdateMutingRuleResponse {
	return o.Payload
}

func (o *UpdateMutingRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1UpdateMutingRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMutingRuleBadRequest creates a UpdateMutingRuleBadRequest with default headers values
func NewUpdateMutingRuleBadRequest() *UpdateMutingRuleBadRequest {
	return &UpdateMutingRuleBadRequest{}
}

/*
UpdateMutingRuleBadRequest describes a response with status code 400, with default header values.

Cannot update the MutingRule because the request is invalid.
*/
type UpdateMutingRuleBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update muting rule bad request response has a 2xx status code
func (o *UpdateMutingRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update muting rule bad request response has a 3xx status code
func (o *UpdateMutingRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update muting rule bad request response has a 4xx status code
func (o *UpdateMutingRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update muting rule bad request response has a 5xx status code
func (o *UpdateMutingRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update muting rule bad request response a status code equal to that given
func (o *UpdateMutingRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update muting rule bad request response
func (o *UpdateMutingRuleBadRequest) Code() int {
	return 400
}

func (o *UpdateMutingRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/muting-rules/{slug}][%d] updateMutingRuleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMutingRuleBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/muting-rules/{slug}][%d] updateMutingRuleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMutingRuleBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateMutingRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMutingRuleNotFound creates a UpdateMutingRuleNotFound with default headers values
func NewUpdateMutingRuleNotFound() *UpdateMutingRuleNotFound {
	return &UpdateMutingRuleNotFound{}
}

/*
UpdateMutingRuleNotFound describes a response with status code 404, with default header values.

Cannot update the MutingRule because the slug does not exist.
*/
type UpdateMutingRuleNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update muting rule not found response has a 2xx status code
func (o *UpdateMutingRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update muting rule not found response has a 3xx status code
func (o *UpdateMutingRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update muting rule not found response has a 4xx status code
func (o *UpdateMutingRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update muting rule not found response has a 5xx status code
func (o *UpdateMutingRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update muting rule not found response a status code equal to that given
func (o *UpdateMutingRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update muting rule not found response
func (o *UpdateMutingRuleNotFound) Code() int {
	return 404
}

func (o *UpdateMutingRuleNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/muting-rules/{slug}][%d] updateMutingRuleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMutingRuleNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/muting-rules/{slug}][%d] updateMutingRuleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMutingRuleNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateMutingRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMutingRuleConflict creates a UpdateMutingRuleConflict with default headers values
func NewUpdateMutingRuleConflict() *UpdateMutingRuleConflict {
	return &UpdateMutingRuleConflict{}
}

/*
UpdateMutingRuleConflict describes a response with status code 409, with default header values.

Cannot update the MutingRule because there is a conflict with an existing MutingRule.
*/
type UpdateMutingRuleConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update muting rule conflict response has a 2xx status code
func (o *UpdateMutingRuleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update muting rule conflict response has a 3xx status code
func (o *UpdateMutingRuleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update muting rule conflict response has a 4xx status code
func (o *UpdateMutingRuleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update muting rule conflict response has a 5xx status code
func (o *UpdateMutingRuleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update muting rule conflict response a status code equal to that given
func (o *UpdateMutingRuleConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update muting rule conflict response
func (o *UpdateMutingRuleConflict) Code() int {
	return 409
}

func (o *UpdateMutingRuleConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/muting-rules/{slug}][%d] updateMutingRuleConflict  %+v", 409, o.Payload)
}

func (o *UpdateMutingRuleConflict) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/muting-rules/{slug}][%d] updateMutingRuleConflict  %+v", 409, o.Payload)
}

func (o *UpdateMutingRuleConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateMutingRuleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMutingRuleInternalServerError creates a UpdateMutingRuleInternalServerError with default headers values
func NewUpdateMutingRuleInternalServerError() *UpdateMutingRuleInternalServerError {
	return &UpdateMutingRuleInternalServerError{}
}

/*
UpdateMutingRuleInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateMutingRuleInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update muting rule internal server error response has a 2xx status code
func (o *UpdateMutingRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update muting rule internal server error response has a 3xx status code
func (o *UpdateMutingRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update muting rule internal server error response has a 4xx status code
func (o *UpdateMutingRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update muting rule internal server error response has a 5xx status code
func (o *UpdateMutingRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update muting rule internal server error response a status code equal to that given
func (o *UpdateMutingRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update muting rule internal server error response
func (o *UpdateMutingRuleInternalServerError) Code() int {
	return 500
}

func (o *UpdateMutingRuleInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/muting-rules/{slug}][%d] updateMutingRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateMutingRuleInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/muting-rules/{slug}][%d] updateMutingRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateMutingRuleInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateMutingRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMutingRuleDefault creates a UpdateMutingRuleDefault with default headers values
func NewUpdateMutingRuleDefault(code int) *UpdateMutingRuleDefault {
	return &UpdateMutingRuleDefault{
		_statusCode: code,
	}
}

/*
UpdateMutingRuleDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateMutingRuleDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update muting rule default response has a 2xx status code
func (o *UpdateMutingRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update muting rule default response has a 3xx status code
func (o *UpdateMutingRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update muting rule default response has a 4xx status code
func (o *UpdateMutingRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update muting rule default response has a 5xx status code
func (o *UpdateMutingRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update muting rule default response a status code equal to that given
func (o *UpdateMutingRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update muting rule default response
func (o *UpdateMutingRuleDefault) Code() int {
	return o._statusCode
}

func (o *UpdateMutingRuleDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/muting-rules/{slug}][%d] UpdateMutingRule default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateMutingRuleDefault) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/muting-rules/{slug}][%d] UpdateMutingRule default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateMutingRuleDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateMutingRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
