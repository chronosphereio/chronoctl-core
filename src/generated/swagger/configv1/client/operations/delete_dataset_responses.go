// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// DeleteDatasetReader is a Reader for the DeleteDataset structure.
type DeleteDatasetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDatasetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteDatasetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteDatasetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteDatasetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteDatasetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteDatasetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteDatasetOK creates a DeleteDatasetOK with default headers values
func NewDeleteDatasetOK() *DeleteDatasetOK {
	return &DeleteDatasetOK{}
}

/*
DeleteDatasetOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteDatasetOK struct {
	Payload models.Configv1DeleteDatasetResponse
}

// IsSuccess returns true when this delete dataset o k response has a 2xx status code
func (o *DeleteDatasetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete dataset o k response has a 3xx status code
func (o *DeleteDatasetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dataset o k response has a 4xx status code
func (o *DeleteDatasetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete dataset o k response has a 5xx status code
func (o *DeleteDatasetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete dataset o k response a status code equal to that given
func (o *DeleteDatasetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete dataset o k response
func (o *DeleteDatasetOK) Code() int {
	return 200
}

func (o *DeleteDatasetOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/datasets/{slug}][%d] deleteDatasetOK  %+v", 200, o.Payload)
}

func (o *DeleteDatasetOK) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/datasets/{slug}][%d] deleteDatasetOK  %+v", 200, o.Payload)
}

func (o *DeleteDatasetOK) GetPayload() models.Configv1DeleteDatasetResponse {
	return o.Payload
}

func (o *DeleteDatasetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDatasetBadRequest creates a DeleteDatasetBadRequest with default headers values
func NewDeleteDatasetBadRequest() *DeleteDatasetBadRequest {
	return &DeleteDatasetBadRequest{}
}

/*
DeleteDatasetBadRequest describes a response with status code 400, with default header values.

Cannot delete the Dataset because it is in use.
*/
type DeleteDatasetBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete dataset bad request response has a 2xx status code
func (o *DeleteDatasetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete dataset bad request response has a 3xx status code
func (o *DeleteDatasetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dataset bad request response has a 4xx status code
func (o *DeleteDatasetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete dataset bad request response has a 5xx status code
func (o *DeleteDatasetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete dataset bad request response a status code equal to that given
func (o *DeleteDatasetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete dataset bad request response
func (o *DeleteDatasetBadRequest) Code() int {
	return 400
}

func (o *DeleteDatasetBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/datasets/{slug}][%d] deleteDatasetBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteDatasetBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/datasets/{slug}][%d] deleteDatasetBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteDatasetBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteDatasetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDatasetNotFound creates a DeleteDatasetNotFound with default headers values
func NewDeleteDatasetNotFound() *DeleteDatasetNotFound {
	return &DeleteDatasetNotFound{}
}

/*
DeleteDatasetNotFound describes a response with status code 404, with default header values.

Cannot delete the Dataset because the slug does not exist.
*/
type DeleteDatasetNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete dataset not found response has a 2xx status code
func (o *DeleteDatasetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete dataset not found response has a 3xx status code
func (o *DeleteDatasetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dataset not found response has a 4xx status code
func (o *DeleteDatasetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete dataset not found response has a 5xx status code
func (o *DeleteDatasetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete dataset not found response a status code equal to that given
func (o *DeleteDatasetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete dataset not found response
func (o *DeleteDatasetNotFound) Code() int {
	return 404
}

func (o *DeleteDatasetNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/datasets/{slug}][%d] deleteDatasetNotFound  %+v", 404, o.Payload)
}

func (o *DeleteDatasetNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/datasets/{slug}][%d] deleteDatasetNotFound  %+v", 404, o.Payload)
}

func (o *DeleteDatasetNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteDatasetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDatasetInternalServerError creates a DeleteDatasetInternalServerError with default headers values
func NewDeleteDatasetInternalServerError() *DeleteDatasetInternalServerError {
	return &DeleteDatasetInternalServerError{}
}

/*
DeleteDatasetInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type DeleteDatasetInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete dataset internal server error response has a 2xx status code
func (o *DeleteDatasetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete dataset internal server error response has a 3xx status code
func (o *DeleteDatasetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dataset internal server error response has a 4xx status code
func (o *DeleteDatasetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete dataset internal server error response has a 5xx status code
func (o *DeleteDatasetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete dataset internal server error response a status code equal to that given
func (o *DeleteDatasetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete dataset internal server error response
func (o *DeleteDatasetInternalServerError) Code() int {
	return 500
}

func (o *DeleteDatasetInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/datasets/{slug}][%d] deleteDatasetInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteDatasetInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/datasets/{slug}][%d] deleteDatasetInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteDatasetInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteDatasetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDatasetDefault creates a DeleteDatasetDefault with default headers values
func NewDeleteDatasetDefault(code int) *DeleteDatasetDefault {
	return &DeleteDatasetDefault{
		_statusCode: code,
	}
}

/*
DeleteDatasetDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type DeleteDatasetDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this delete dataset default response has a 2xx status code
func (o *DeleteDatasetDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete dataset default response has a 3xx status code
func (o *DeleteDatasetDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete dataset default response has a 4xx status code
func (o *DeleteDatasetDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete dataset default response has a 5xx status code
func (o *DeleteDatasetDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete dataset default response a status code equal to that given
func (o *DeleteDatasetDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete dataset default response
func (o *DeleteDatasetDefault) Code() int {
	return o._statusCode
}

func (o *DeleteDatasetDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/datasets/{slug}][%d] DeleteDataset default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteDatasetDefault) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/datasets/{slug}][%d] DeleteDataset default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteDatasetDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *DeleteDatasetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
