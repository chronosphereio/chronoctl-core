// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// DeleteLogIngestConfigReader is a Reader for the DeleteLogIngestConfig structure.
type DeleteLogIngestConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLogIngestConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteLogIngestConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteLogIngestConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteLogIngestConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteLogIngestConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteLogIngestConfigDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteLogIngestConfigOK creates a DeleteLogIngestConfigOK with default headers values
func NewDeleteLogIngestConfigOK() *DeleteLogIngestConfigOK {
	return &DeleteLogIngestConfigOK{}
}

/*
DeleteLogIngestConfigOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteLogIngestConfigOK struct {
	Payload models.Configv1DeleteLogIngestConfigResponse
}

// IsSuccess returns true when this delete log ingest config o k response has a 2xx status code
func (o *DeleteLogIngestConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete log ingest config o k response has a 3xx status code
func (o *DeleteLogIngestConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log ingest config o k response has a 4xx status code
func (o *DeleteLogIngestConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete log ingest config o k response has a 5xx status code
func (o *DeleteLogIngestConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log ingest config o k response a status code equal to that given
func (o *DeleteLogIngestConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete log ingest config o k response
func (o *DeleteLogIngestConfigOK) Code() int {
	return 200
}

func (o *DeleteLogIngestConfigOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-ingest-config][%d] deleteLogIngestConfigOK  %+v", 200, o.Payload)
}

func (o *DeleteLogIngestConfigOK) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-ingest-config][%d] deleteLogIngestConfigOK  %+v", 200, o.Payload)
}

func (o *DeleteLogIngestConfigOK) GetPayload() models.Configv1DeleteLogIngestConfigResponse {
	return o.Payload
}

func (o *DeleteLogIngestConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogIngestConfigBadRequest creates a DeleteLogIngestConfigBadRequest with default headers values
func NewDeleteLogIngestConfigBadRequest() *DeleteLogIngestConfigBadRequest {
	return &DeleteLogIngestConfigBadRequest{}
}

/*
DeleteLogIngestConfigBadRequest describes a response with status code 400, with default header values.

Cannot delete the LogIngestConfig because it is in use.
*/
type DeleteLogIngestConfigBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete log ingest config bad request response has a 2xx status code
func (o *DeleteLogIngestConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log ingest config bad request response has a 3xx status code
func (o *DeleteLogIngestConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log ingest config bad request response has a 4xx status code
func (o *DeleteLogIngestConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete log ingest config bad request response has a 5xx status code
func (o *DeleteLogIngestConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log ingest config bad request response a status code equal to that given
func (o *DeleteLogIngestConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete log ingest config bad request response
func (o *DeleteLogIngestConfigBadRequest) Code() int {
	return 400
}

func (o *DeleteLogIngestConfigBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-ingest-config][%d] deleteLogIngestConfigBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLogIngestConfigBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-ingest-config][%d] deleteLogIngestConfigBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLogIngestConfigBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteLogIngestConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogIngestConfigNotFound creates a DeleteLogIngestConfigNotFound with default headers values
func NewDeleteLogIngestConfigNotFound() *DeleteLogIngestConfigNotFound {
	return &DeleteLogIngestConfigNotFound{}
}

/*
DeleteLogIngestConfigNotFound describes a response with status code 404, with default header values.

Cannot delete the LogIngestConfig because the slug does not exist.
*/
type DeleteLogIngestConfigNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete log ingest config not found response has a 2xx status code
func (o *DeleteLogIngestConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log ingest config not found response has a 3xx status code
func (o *DeleteLogIngestConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log ingest config not found response has a 4xx status code
func (o *DeleteLogIngestConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete log ingest config not found response has a 5xx status code
func (o *DeleteLogIngestConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log ingest config not found response a status code equal to that given
func (o *DeleteLogIngestConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete log ingest config not found response
func (o *DeleteLogIngestConfigNotFound) Code() int {
	return 404
}

func (o *DeleteLogIngestConfigNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-ingest-config][%d] deleteLogIngestConfigNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLogIngestConfigNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-ingest-config][%d] deleteLogIngestConfigNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLogIngestConfigNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteLogIngestConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogIngestConfigInternalServerError creates a DeleteLogIngestConfigInternalServerError with default headers values
func NewDeleteLogIngestConfigInternalServerError() *DeleteLogIngestConfigInternalServerError {
	return &DeleteLogIngestConfigInternalServerError{}
}

/*
DeleteLogIngestConfigInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type DeleteLogIngestConfigInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete log ingest config internal server error response has a 2xx status code
func (o *DeleteLogIngestConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log ingest config internal server error response has a 3xx status code
func (o *DeleteLogIngestConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log ingest config internal server error response has a 4xx status code
func (o *DeleteLogIngestConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete log ingest config internal server error response has a 5xx status code
func (o *DeleteLogIngestConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete log ingest config internal server error response a status code equal to that given
func (o *DeleteLogIngestConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete log ingest config internal server error response
func (o *DeleteLogIngestConfigInternalServerError) Code() int {
	return 500
}

func (o *DeleteLogIngestConfigInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-ingest-config][%d] deleteLogIngestConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLogIngestConfigInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-ingest-config][%d] deleteLogIngestConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLogIngestConfigInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteLogIngestConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogIngestConfigDefault creates a DeleteLogIngestConfigDefault with default headers values
func NewDeleteLogIngestConfigDefault(code int) *DeleteLogIngestConfigDefault {
	return &DeleteLogIngestConfigDefault{
		_statusCode: code,
	}
}

/*
DeleteLogIngestConfigDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type DeleteLogIngestConfigDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this delete log ingest config default response has a 2xx status code
func (o *DeleteLogIngestConfigDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete log ingest config default response has a 3xx status code
func (o *DeleteLogIngestConfigDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete log ingest config default response has a 4xx status code
func (o *DeleteLogIngestConfigDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete log ingest config default response has a 5xx status code
func (o *DeleteLogIngestConfigDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete log ingest config default response a status code equal to that given
func (o *DeleteLogIngestConfigDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete log ingest config default response
func (o *DeleteLogIngestConfigDefault) Code() int {
	return o._statusCode
}

func (o *DeleteLogIngestConfigDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-ingest-config][%d] DeleteLogIngestConfig default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteLogIngestConfigDefault) String() string {
	return fmt.Sprintf("[DELETE /api/v1/config/log-ingest-config][%d] DeleteLogIngestConfig default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteLogIngestConfigDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *DeleteLogIngestConfigDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
