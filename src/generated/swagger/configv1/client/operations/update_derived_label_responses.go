// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// UpdateDerivedLabelReader is a Reader for the UpdateDerivedLabel structure.
type UpdateDerivedLabelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDerivedLabelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDerivedLabelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDerivedLabelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDerivedLabelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateDerivedLabelConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDerivedLabelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateDerivedLabelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateDerivedLabelOK creates a UpdateDerivedLabelOK with default headers values
func NewUpdateDerivedLabelOK() *UpdateDerivedLabelOK {
	return &UpdateDerivedLabelOK{}
}

/*
UpdateDerivedLabelOK describes a response with status code 200, with default header values.

A successful response containing the updated DerivedLabel.
*/
type UpdateDerivedLabelOK struct {
	Payload *models.Configv1UpdateDerivedLabelResponse
}

// IsSuccess returns true when this update derived label o k response has a 2xx status code
func (o *UpdateDerivedLabelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update derived label o k response has a 3xx status code
func (o *UpdateDerivedLabelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update derived label o k response has a 4xx status code
func (o *UpdateDerivedLabelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update derived label o k response has a 5xx status code
func (o *UpdateDerivedLabelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update derived label o k response a status code equal to that given
func (o *UpdateDerivedLabelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update derived label o k response
func (o *UpdateDerivedLabelOK) Code() int {
	return 200
}

func (o *UpdateDerivedLabelOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/derived-labels/{slug}][%d] updateDerivedLabelOK  %+v", 200, o.Payload)
}

func (o *UpdateDerivedLabelOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/derived-labels/{slug}][%d] updateDerivedLabelOK  %+v", 200, o.Payload)
}

func (o *UpdateDerivedLabelOK) GetPayload() *models.Configv1UpdateDerivedLabelResponse {
	return o.Payload
}

func (o *UpdateDerivedLabelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1UpdateDerivedLabelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDerivedLabelBadRequest creates a UpdateDerivedLabelBadRequest with default headers values
func NewUpdateDerivedLabelBadRequest() *UpdateDerivedLabelBadRequest {
	return &UpdateDerivedLabelBadRequest{}
}

/*
UpdateDerivedLabelBadRequest describes a response with status code 400, with default header values.

Cannot update the DerivedLabel because the request is invalid.
*/
type UpdateDerivedLabelBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update derived label bad request response has a 2xx status code
func (o *UpdateDerivedLabelBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update derived label bad request response has a 3xx status code
func (o *UpdateDerivedLabelBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update derived label bad request response has a 4xx status code
func (o *UpdateDerivedLabelBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update derived label bad request response has a 5xx status code
func (o *UpdateDerivedLabelBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update derived label bad request response a status code equal to that given
func (o *UpdateDerivedLabelBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update derived label bad request response
func (o *UpdateDerivedLabelBadRequest) Code() int {
	return 400
}

func (o *UpdateDerivedLabelBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/derived-labels/{slug}][%d] updateDerivedLabelBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDerivedLabelBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/derived-labels/{slug}][%d] updateDerivedLabelBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDerivedLabelBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateDerivedLabelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDerivedLabelNotFound creates a UpdateDerivedLabelNotFound with default headers values
func NewUpdateDerivedLabelNotFound() *UpdateDerivedLabelNotFound {
	return &UpdateDerivedLabelNotFound{}
}

/*
UpdateDerivedLabelNotFound describes a response with status code 404, with default header values.

Cannot update the DerivedLabel because the slug does not exist.
*/
type UpdateDerivedLabelNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update derived label not found response has a 2xx status code
func (o *UpdateDerivedLabelNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update derived label not found response has a 3xx status code
func (o *UpdateDerivedLabelNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update derived label not found response has a 4xx status code
func (o *UpdateDerivedLabelNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update derived label not found response has a 5xx status code
func (o *UpdateDerivedLabelNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update derived label not found response a status code equal to that given
func (o *UpdateDerivedLabelNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update derived label not found response
func (o *UpdateDerivedLabelNotFound) Code() int {
	return 404
}

func (o *UpdateDerivedLabelNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/derived-labels/{slug}][%d] updateDerivedLabelNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDerivedLabelNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/derived-labels/{slug}][%d] updateDerivedLabelNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDerivedLabelNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateDerivedLabelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDerivedLabelConflict creates a UpdateDerivedLabelConflict with default headers values
func NewUpdateDerivedLabelConflict() *UpdateDerivedLabelConflict {
	return &UpdateDerivedLabelConflict{}
}

/*
UpdateDerivedLabelConflict describes a response with status code 409, with default header values.

Cannot update the DerivedLabel because there is a conflict with an existing DerivedLabel.
*/
type UpdateDerivedLabelConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update derived label conflict response has a 2xx status code
func (o *UpdateDerivedLabelConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update derived label conflict response has a 3xx status code
func (o *UpdateDerivedLabelConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update derived label conflict response has a 4xx status code
func (o *UpdateDerivedLabelConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update derived label conflict response has a 5xx status code
func (o *UpdateDerivedLabelConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update derived label conflict response a status code equal to that given
func (o *UpdateDerivedLabelConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update derived label conflict response
func (o *UpdateDerivedLabelConflict) Code() int {
	return 409
}

func (o *UpdateDerivedLabelConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/derived-labels/{slug}][%d] updateDerivedLabelConflict  %+v", 409, o.Payload)
}

func (o *UpdateDerivedLabelConflict) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/derived-labels/{slug}][%d] updateDerivedLabelConflict  %+v", 409, o.Payload)
}

func (o *UpdateDerivedLabelConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateDerivedLabelConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDerivedLabelInternalServerError creates a UpdateDerivedLabelInternalServerError with default headers values
func NewUpdateDerivedLabelInternalServerError() *UpdateDerivedLabelInternalServerError {
	return &UpdateDerivedLabelInternalServerError{}
}

/*
UpdateDerivedLabelInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateDerivedLabelInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update derived label internal server error response has a 2xx status code
func (o *UpdateDerivedLabelInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update derived label internal server error response has a 3xx status code
func (o *UpdateDerivedLabelInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update derived label internal server error response has a 4xx status code
func (o *UpdateDerivedLabelInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update derived label internal server error response has a 5xx status code
func (o *UpdateDerivedLabelInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update derived label internal server error response a status code equal to that given
func (o *UpdateDerivedLabelInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update derived label internal server error response
func (o *UpdateDerivedLabelInternalServerError) Code() int {
	return 500
}

func (o *UpdateDerivedLabelInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/derived-labels/{slug}][%d] updateDerivedLabelInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDerivedLabelInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/derived-labels/{slug}][%d] updateDerivedLabelInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDerivedLabelInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateDerivedLabelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDerivedLabelDefault creates a UpdateDerivedLabelDefault with default headers values
func NewUpdateDerivedLabelDefault(code int) *UpdateDerivedLabelDefault {
	return &UpdateDerivedLabelDefault{
		_statusCode: code,
	}
}

/*
UpdateDerivedLabelDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateDerivedLabelDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update derived label default response has a 2xx status code
func (o *UpdateDerivedLabelDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update derived label default response has a 3xx status code
func (o *UpdateDerivedLabelDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update derived label default response has a 4xx status code
func (o *UpdateDerivedLabelDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update derived label default response has a 5xx status code
func (o *UpdateDerivedLabelDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update derived label default response a status code equal to that given
func (o *UpdateDerivedLabelDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update derived label default response
func (o *UpdateDerivedLabelDefault) Code() int {
	return o._statusCode
}

func (o *UpdateDerivedLabelDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/config/derived-labels/{slug}][%d] UpdateDerivedLabel default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateDerivedLabelDefault) String() string {
	return fmt.Sprintf("[PUT /api/v1/config/derived-labels/{slug}][%d] UpdateDerivedLabel default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateDerivedLabelDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateDerivedLabelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
