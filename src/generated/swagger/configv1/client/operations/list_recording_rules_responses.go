// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
)

// ListRecordingRulesReader is a Reader for the ListRecordingRules structure.
type ListRecordingRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListRecordingRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListRecordingRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewListRecordingRulesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListRecordingRulesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListRecordingRulesOK creates a ListRecordingRulesOK with default headers values
func NewListRecordingRulesOK() *ListRecordingRulesOK {
	return &ListRecordingRulesOK{}
}

/*
ListRecordingRulesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListRecordingRulesOK struct {
	Payload *models.Configv1ListRecordingRulesResponse
}

// IsSuccess returns true when this list recording rules o k response has a 2xx status code
func (o *ListRecordingRulesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list recording rules o k response has a 3xx status code
func (o *ListRecordingRulesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list recording rules o k response has a 4xx status code
func (o *ListRecordingRulesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list recording rules o k response has a 5xx status code
func (o *ListRecordingRulesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list recording rules o k response a status code equal to that given
func (o *ListRecordingRulesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list recording rules o k response
func (o *ListRecordingRulesOK) Code() int {
	return 200
}

func (o *ListRecordingRulesOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/config/recording-rules][%d] listRecordingRulesOK  %+v", 200, o.Payload)
}

func (o *ListRecordingRulesOK) String() string {
	return fmt.Sprintf("[GET /api/v1/config/recording-rules][%d] listRecordingRulesOK  %+v", 200, o.Payload)
}

func (o *ListRecordingRulesOK) GetPayload() *models.Configv1ListRecordingRulesResponse {
	return o.Payload
}

func (o *ListRecordingRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Configv1ListRecordingRulesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRecordingRulesInternalServerError creates a ListRecordingRulesInternalServerError with default headers values
func NewListRecordingRulesInternalServerError() *ListRecordingRulesInternalServerError {
	return &ListRecordingRulesInternalServerError{}
}

/*
ListRecordingRulesInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type ListRecordingRulesInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this list recording rules internal server error response has a 2xx status code
func (o *ListRecordingRulesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list recording rules internal server error response has a 3xx status code
func (o *ListRecordingRulesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list recording rules internal server error response has a 4xx status code
func (o *ListRecordingRulesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list recording rules internal server error response has a 5xx status code
func (o *ListRecordingRulesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list recording rules internal server error response a status code equal to that given
func (o *ListRecordingRulesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list recording rules internal server error response
func (o *ListRecordingRulesInternalServerError) Code() int {
	return 500
}

func (o *ListRecordingRulesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/config/recording-rules][%d] listRecordingRulesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListRecordingRulesInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/v1/config/recording-rules][%d] listRecordingRulesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListRecordingRulesInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *ListRecordingRulesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRecordingRulesDefault creates a ListRecordingRulesDefault with default headers values
func NewListRecordingRulesDefault(code int) *ListRecordingRulesDefault {
	return &ListRecordingRulesDefault{
		_statusCode: code,
	}
}

/*
ListRecordingRulesDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type ListRecordingRulesDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this list recording rules default response has a 2xx status code
func (o *ListRecordingRulesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list recording rules default response has a 3xx status code
func (o *ListRecordingRulesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list recording rules default response has a 4xx status code
func (o *ListRecordingRulesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list recording rules default response has a 5xx status code
func (o *ListRecordingRulesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list recording rules default response a status code equal to that given
func (o *ListRecordingRulesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list recording rules default response
func (o *ListRecordingRulesDefault) Code() int {
	return o._statusCode
}

func (o *ListRecordingRulesDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/config/recording-rules][%d] ListRecordingRules default  %+v", o._statusCode, o.Payload)
}

func (o *ListRecordingRulesDefault) String() string {
	return fmt.Sprintf("[GET /api/v1/config/recording-rules][%d] ListRecordingRules default  %+v", o._statusCode, o.Payload)
}

func (o *ListRecordingRulesDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *ListRecordingRulesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
