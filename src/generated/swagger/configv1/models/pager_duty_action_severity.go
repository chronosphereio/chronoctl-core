// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PagerDutyActionSeverity pager duty action severity
//
// swagger:model PagerDutyActionSeverity
type PagerDutyActionSeverity string

func NewPagerDutyActionSeverity(value PagerDutyActionSeverity) *PagerDutyActionSeverity {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PagerDutyActionSeverity.
func (m PagerDutyActionSeverity) Pointer() *PagerDutyActionSeverity {
	return &m
}

const (

	// PagerDutyActionSeverityCRITICAL captures enum value "CRITICAL"
	PagerDutyActionSeverityCRITICAL PagerDutyActionSeverity = "CRITICAL"

	// PagerDutyActionSeverityERROR captures enum value "ERROR"
	PagerDutyActionSeverityERROR PagerDutyActionSeverity = "ERROR"

	// PagerDutyActionSeverityWARNING captures enum value "WARNING"
	PagerDutyActionSeverityWARNING PagerDutyActionSeverity = "WARNING"

	// PagerDutyActionSeverityINFO captures enum value "INFO"
	PagerDutyActionSeverityINFO PagerDutyActionSeverity = "INFO"
)

// for schema
var pagerDutyActionSeverityEnum []interface{}

func init() {
	var res []PagerDutyActionSeverity
	if err := json.Unmarshal([]byte(`["CRITICAL","ERROR","WARNING","INFO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pagerDutyActionSeverityEnum = append(pagerDutyActionSeverityEnum, v)
	}
}

func (m PagerDutyActionSeverity) validatePagerDutyActionSeverityEnum(path, location string, value PagerDutyActionSeverity) error {
	if err := validate.EnumCase(path, location, value, pagerDutyActionSeverityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this pager duty action severity
func (m PagerDutyActionSeverity) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePagerDutyActionSeverityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this pager duty action severity based on context it is used
func (m PagerDutyActionSeverity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
