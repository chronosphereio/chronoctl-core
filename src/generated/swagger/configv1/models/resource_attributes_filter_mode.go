// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResourceAttributesFilterMode resource attributes filter mode
//
// swagger:model ResourceAttributesFilterMode
type ResourceAttributesFilterMode string

func NewResourceAttributesFilterMode(value ResourceAttributesFilterMode) *ResourceAttributesFilterMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResourceAttributesFilterMode.
func (m ResourceAttributesFilterMode) Pointer() *ResourceAttributesFilterMode {
	return &m
}

const (

	// ResourceAttributesFilterModeAPPENDDEFAULTEXCLUDEKEYS captures enum value "APPEND_DEFAULT_EXCLUDE_KEYS"
	ResourceAttributesFilterModeAPPENDDEFAULTEXCLUDEKEYS ResourceAttributesFilterMode = "APPEND_DEFAULT_EXCLUDE_KEYS"

	// ResourceAttributesFilterModeCUSTOMEXCLUDEKEYS captures enum value "CUSTOM_EXCLUDE_KEYS"
	ResourceAttributesFilterModeCUSTOMEXCLUDEKEYS ResourceAttributesFilterMode = "CUSTOM_EXCLUDE_KEYS"
)

// for schema
var resourceAttributesFilterModeEnum []interface{}

func init() {
	var res []ResourceAttributesFilterMode
	if err := json.Unmarshal([]byte(`["APPEND_DEFAULT_EXCLUDE_KEYS","CUSTOM_EXCLUDE_KEYS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceAttributesFilterModeEnum = append(resourceAttributesFilterModeEnum, v)
	}
}

func (m ResourceAttributesFilterMode) validateResourceAttributesFilterModeEnum(path, location string, value ResourceAttributesFilterMode) error {
	if err := validate.EnumCase(path, location, value, resourceAttributesFilterModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this resource attributes filter mode
func (m ResourceAttributesFilterMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResourceAttributesFilterModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this resource attributes filter mode based on context it is used
func (m ResourceAttributesFilterMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
