// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Configv1LabelMatcherMatcherType configv1 label matcher matcher type
//
// swagger:model configv1LabelMatcherMatcherType
type Configv1LabelMatcherMatcherType string

func NewConfigv1LabelMatcherMatcherType(value Configv1LabelMatcherMatcherType) *Configv1LabelMatcherMatcherType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Configv1LabelMatcherMatcherType.
func (m Configv1LabelMatcherMatcherType) Pointer() *Configv1LabelMatcherMatcherType {
	return &m
}

const (

	// Configv1LabelMatcherMatcherTypeEXACT captures enum value "EXACT"
	Configv1LabelMatcherMatcherTypeEXACT Configv1LabelMatcherMatcherType = "EXACT"

	// Configv1LabelMatcherMatcherTypeREGEX captures enum value "REGEX"
	Configv1LabelMatcherMatcherTypeREGEX Configv1LabelMatcherMatcherType = "REGEX"
)

// for schema
var configv1LabelMatcherMatcherTypeEnum []interface{}

func init() {
	var res []Configv1LabelMatcherMatcherType
	if err := json.Unmarshal([]byte(`["EXACT","REGEX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configv1LabelMatcherMatcherTypeEnum = append(configv1LabelMatcherMatcherTypeEnum, v)
	}
}

func (m Configv1LabelMatcherMatcherType) validateConfigv1LabelMatcherMatcherTypeEnum(path, location string, value Configv1LabelMatcherMatcherType) error {
	if err := validate.EnumCase(path, location, value, configv1LabelMatcherMatcherTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configv1 label matcher matcher type
func (m Configv1LabelMatcherMatcherType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigv1LabelMatcherMatcherTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configv1 label matcher matcher type based on context it is used
func (m Configv1LabelMatcherMatcherType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
