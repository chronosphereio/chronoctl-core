// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Configv1MappingRuleMode  - ENABLED: ENABLED rules are applied. Rules default to ENABLED.
//   - PREVIEW: PREVIEW rules are not applied, but shaping impact stats
//
// for them rule are recorded.
//
// swagger:model configv1MappingRuleMode
type Configv1MappingRuleMode string

func NewConfigv1MappingRuleMode(value Configv1MappingRuleMode) *Configv1MappingRuleMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Configv1MappingRuleMode.
func (m Configv1MappingRuleMode) Pointer() *Configv1MappingRuleMode {
	return &m
}

const (

	// Configv1MappingRuleModeENABLED captures enum value "ENABLED"
	Configv1MappingRuleModeENABLED Configv1MappingRuleMode = "ENABLED"

	// Configv1MappingRuleModePREVIEW captures enum value "PREVIEW"
	Configv1MappingRuleModePREVIEW Configv1MappingRuleMode = "PREVIEW"
)

// for schema
var configv1MappingRuleModeEnum []interface{}

func init() {
	var res []Configv1MappingRuleMode
	if err := json.Unmarshal([]byte(`["ENABLED","PREVIEW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configv1MappingRuleModeEnum = append(configv1MappingRuleModeEnum, v)
	}
}

func (m Configv1MappingRuleMode) validateConfigv1MappingRuleModeEnum(path, location string, value Configv1MappingRuleMode) error {
	if err := validate.EnumCase(path, location, value, configv1MappingRuleModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configv1 mapping rule mode
func (m Configv1MappingRuleMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigv1MappingRuleModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configv1 mapping rule mode based on context it is used
func (m Configv1MappingRuleMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
