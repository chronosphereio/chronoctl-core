// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LogScaleAlertAlertType log scale alert alert type
//
// swagger:model LogScaleAlertAlertType
type LogScaleAlertAlertType string

func NewLogScaleAlertAlertType(value LogScaleAlertAlertType) *LogScaleAlertAlertType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LogScaleAlertAlertType.
func (m LogScaleAlertAlertType) Pointer() *LogScaleAlertAlertType {
	return &m
}

const (

	// LogScaleAlertAlertTypeSTANDARD captures enum value "STANDARD"
	LogScaleAlertAlertTypeSTANDARD LogScaleAlertAlertType = "STANDARD"

	// LogScaleAlertAlertTypeFILTER captures enum value "FILTER"
	LogScaleAlertAlertTypeFILTER LogScaleAlertAlertType = "FILTER"
)

// for schema
var logScaleAlertAlertTypeEnum []interface{}

func init() {
	var res []LogScaleAlertAlertType
	if err := json.Unmarshal([]byte(`["STANDARD","FILTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logScaleAlertAlertTypeEnum = append(logScaleAlertAlertTypeEnum, v)
	}
}

func (m LogScaleAlertAlertType) validateLogScaleAlertAlertTypeEnum(path, location string, value LogScaleAlertAlertType) error {
	if err := validate.EnumCase(path, location, value, logScaleAlertAlertTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this log scale alert alert type
func (m LogScaleAlertAlertType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLogScaleAlertAlertTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this log scale alert alert type based on context it is used
func (m LogScaleAlertAlertType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
