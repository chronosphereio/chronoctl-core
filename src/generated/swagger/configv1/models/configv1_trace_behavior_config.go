// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Configv1TraceBehaviorConfig TraceBehaviorConfig is a singleton configuration object that specifies the
// configuration for trace behaviors.
//
// swagger:model configv1TraceBehaviorConfig
type Configv1TraceBehaviorConfig struct {

	// Timestamp of when the TraceBehaviorConfig was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the TraceBehaviorConfig was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// List of assignments for the main behavior. The referenced datasets are datasets
	// to be enrolled in behaviors. The referenced behaviors are the active behaviors
	// for the dataset when there is no override in place.
	// * Only one main behavior can be assigned to a dataset.
	MainBehaviorAssignments []*TraceBehaviorConfigMainBehaviorAssignment `json:"main_behavior_assignments"`

	// List of assignments for the override behavior. OverrideBehaviorAssignments are used to
	// specify the active behavior for a dataset over a specific time range.
	// * Only one override behavior can be assigned to a dataset.
	OverrideBehaviorAssignments []*TraceBehaviorConfigOverrideBehaviorAssignment `json:"override_behavior_assignments"`

	// List of dataset priorities. This list specifies the order in which datasets
	// are considered when determining the behavior to follow for a trace. Dataset
	// priorities are used to break ties when a trace matches more than one dataset
	// with an active behavior.
	// * Each entry in this list must refer to the slug of an existing dataset.
	// * The order of the list is the order in which the datasets are considered.
	// * The list must contain all datasets referenced in either main_behavior_assignments
	//   and override_behavior_assignments.
	// * The list may contain datasets that are not referenced in either of the above.
	DatasetPriorities []string `json:"dataset_priorities"`

	// The baseline behavior to use for behavior assignments and base head sampling rates.
	BaselineBehaviorSlug string `json:"baseline_behavior_slug,omitempty"`

	// List of assignments for the preview behavior. The
	// referenced behaviors are in preview mode for the assigned dataset.
	// You can assign only one preview behavior to a dataset.
	PreviewBehaviorAssignments []*TraceBehaviorConfigOverrideBehaviorAssignment `json:"preview_behavior_assignments"`
}

// Validate validates this configv1 trace behavior config
func (m *Configv1TraceBehaviorConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMainBehaviorAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideBehaviorAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviewBehaviorAssignments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1TraceBehaviorConfig) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1TraceBehaviorConfig) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1TraceBehaviorConfig) validateMainBehaviorAssignments(formats strfmt.Registry) error {
	if swag.IsZero(m.MainBehaviorAssignments) { // not required
		return nil
	}

	for i := 0; i < len(m.MainBehaviorAssignments); i++ {
		if swag.IsZero(m.MainBehaviorAssignments[i]) { // not required
			continue
		}

		if m.MainBehaviorAssignments[i] != nil {
			if err := m.MainBehaviorAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("main_behavior_assignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("main_behavior_assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Configv1TraceBehaviorConfig) validateOverrideBehaviorAssignments(formats strfmt.Registry) error {
	if swag.IsZero(m.OverrideBehaviorAssignments) { // not required
		return nil
	}

	for i := 0; i < len(m.OverrideBehaviorAssignments); i++ {
		if swag.IsZero(m.OverrideBehaviorAssignments[i]) { // not required
			continue
		}

		if m.OverrideBehaviorAssignments[i] != nil {
			if err := m.OverrideBehaviorAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("override_behavior_assignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("override_behavior_assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Configv1TraceBehaviorConfig) validatePreviewBehaviorAssignments(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviewBehaviorAssignments) { // not required
		return nil
	}

	for i := 0; i < len(m.PreviewBehaviorAssignments); i++ {
		if swag.IsZero(m.PreviewBehaviorAssignments[i]) { // not required
			continue
		}

		if m.PreviewBehaviorAssignments[i] != nil {
			if err := m.PreviewBehaviorAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preview_behavior_assignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preview_behavior_assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this configv1 trace behavior config based on the context it is used
func (m *Configv1TraceBehaviorConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMainBehaviorAssignments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverrideBehaviorAssignments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreviewBehaviorAssignments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1TraceBehaviorConfig) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1TraceBehaviorConfig) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1TraceBehaviorConfig) contextValidateMainBehaviorAssignments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MainBehaviorAssignments); i++ {

		if m.MainBehaviorAssignments[i] != nil {

			if swag.IsZero(m.MainBehaviorAssignments[i]) { // not required
				return nil
			}

			if err := m.MainBehaviorAssignments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("main_behavior_assignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("main_behavior_assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Configv1TraceBehaviorConfig) contextValidateOverrideBehaviorAssignments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverrideBehaviorAssignments); i++ {

		if m.OverrideBehaviorAssignments[i] != nil {

			if swag.IsZero(m.OverrideBehaviorAssignments[i]) { // not required
				return nil
			}

			if err := m.OverrideBehaviorAssignments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("override_behavior_assignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("override_behavior_assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Configv1TraceBehaviorConfig) contextValidatePreviewBehaviorAssignments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreviewBehaviorAssignments); i++ {

		if m.PreviewBehaviorAssignments[i] != nil {

			if swag.IsZero(m.PreviewBehaviorAssignments[i]) { // not required
				return nil
			}

			if err := m.PreviewBehaviorAssignments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preview_behavior_assignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preview_behavior_assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Configv1TraceBehaviorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Configv1TraceBehaviorConfig) UnmarshalBinary(b []byte) error {
	var res Configv1TraceBehaviorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
