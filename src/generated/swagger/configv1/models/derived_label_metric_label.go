// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DerivedLabelMetricLabel derived label metric label
//
// swagger:model DerivedLabelMetricLabel
type DerivedLabelMetricLabel struct {

	// constructed label
	ConstructedLabel *MetricLabelConstructedLabel `json:"constructed_label,omitempty"`

	// mapping label
	MappingLabel *MetricLabelMappingLabel `json:"mapping_label,omitempty"`
}

// Validate validates this derived label metric label
func (m *DerivedLabelMetricLabel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstructedLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappingLabel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DerivedLabelMetricLabel) validateConstructedLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.ConstructedLabel) { // not required
		return nil
	}

	if m.ConstructedLabel != nil {
		if err := m.ConstructedLabel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("constructed_label")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("constructed_label")
			}
			return err
		}
	}

	return nil
}

func (m *DerivedLabelMetricLabel) validateMappingLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.MappingLabel) { // not required
		return nil
	}

	if m.MappingLabel != nil {
		if err := m.MappingLabel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mapping_label")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mapping_label")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this derived label metric label based on the context it is used
func (m *DerivedLabelMetricLabel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConstructedLabel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMappingLabel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DerivedLabelMetricLabel) contextValidateConstructedLabel(ctx context.Context, formats strfmt.Registry) error {

	if m.ConstructedLabel != nil {

		if swag.IsZero(m.ConstructedLabel) { // not required
			return nil
		}

		if err := m.ConstructedLabel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("constructed_label")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("constructed_label")
			}
			return err
		}
	}

	return nil
}

func (m *DerivedLabelMetricLabel) contextValidateMappingLabel(ctx context.Context, formats strfmt.Registry) error {

	if m.MappingLabel != nil {

		if swag.IsZero(m.MappingLabel) { // not required
			return nil
		}

		if err := m.MappingLabel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mapping_label")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mapping_label")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DerivedLabelMetricLabel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DerivedLabelMetricLabel) UnmarshalBinary(b []byte) error {
	var res DerivedLabelMetricLabel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
