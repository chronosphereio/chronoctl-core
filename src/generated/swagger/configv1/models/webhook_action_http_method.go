// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WebhookActionHTTPMethod webhook action HTTP method
//
// swagger:model WebhookActionHTTPMethod
type WebhookActionHTTPMethod string

func NewWebhookActionHTTPMethod(value WebhookActionHTTPMethod) *WebhookActionHTTPMethod {
	return &value
}

// Pointer returns a pointer to a freshly-allocated WebhookActionHTTPMethod.
func (m WebhookActionHTTPMethod) Pointer() *WebhookActionHTTPMethod {
	return &m
}

const (

	// WebhookActionHTTPMethodGET captures enum value "GET"
	WebhookActionHTTPMethodGET WebhookActionHTTPMethod = "GET"

	// WebhookActionHTTPMethodPOST captures enum value "POST"
	WebhookActionHTTPMethodPOST WebhookActionHTTPMethod = "POST"

	// WebhookActionHTTPMethodPUT captures enum value "PUT"
	WebhookActionHTTPMethodPUT WebhookActionHTTPMethod = "PUT"

	// WebhookActionHTTPMethodPATCH captures enum value "PATCH"
	WebhookActionHTTPMethodPATCH WebhookActionHTTPMethod = "PATCH"

	// WebhookActionHTTPMethodDELETE captures enum value "DELETE"
	WebhookActionHTTPMethodDELETE WebhookActionHTTPMethod = "DELETE"

	// WebhookActionHTTPMethodHEAD captures enum value "HEAD"
	WebhookActionHTTPMethodHEAD WebhookActionHTTPMethod = "HEAD"

	// WebhookActionHTTPMethodOPTIONS captures enum value "OPTIONS"
	WebhookActionHTTPMethodOPTIONS WebhookActionHTTPMethod = "OPTIONS"
)

// for schema
var webhookActionHttpMethodEnum []interface{}

func init() {
	var res []WebhookActionHTTPMethod
	if err := json.Unmarshal([]byte(`["GET","POST","PUT","PATCH","DELETE","HEAD","OPTIONS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webhookActionHttpMethodEnum = append(webhookActionHttpMethodEnum, v)
	}
}

func (m WebhookActionHTTPMethod) validateWebhookActionHTTPMethodEnum(path, location string, value WebhookActionHTTPMethod) error {
	if err := validate.EnumCase(path, location, value, webhookActionHttpMethodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this webhook action HTTP method
func (m WebhookActionHTTPMethod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWebhookActionHTTPMethodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this webhook action HTTP method based on context it is used
func (m WebhookActionHTTPMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
