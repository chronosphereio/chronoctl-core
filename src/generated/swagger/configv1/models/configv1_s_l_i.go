// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Configv1SLI configv1 s l i
//
// swagger:model configv1SLI
type Configv1SLI struct {

	// custom indicator
	CustomIndicator *SLICustomIndicatorConfig `json:"custom_indicator,omitempty"`

	// custom timeslice indicator
	CustomTimesliceIndicator *SLICustomTimeSliceIndicatorConfig `json:"custom_timeslice_indicator,omitempty"`

	// Used to configure additional labels to export from
	// the underlying queries. This feature provides a logical budget to group
	// unique combination of dimensions. For example, if you want to track a
	// budget per endpoint, add the endpoint label as a dimension. These dimensions
	// are provided on the top-level SLI so that SLOs will receive them
	// in `.GroupBy`.
	CustomDimensionLabels []string `json:"custom_dimension_labels"`

	// These are made available to the SLO queries and are intended to be used for things
	// like `cluster!~"dev"`
	AdditionalPromqlFilters []*CommonPromQLMatcher `json:"additional_promql_filters"`
}

// Validate validates this configv1 s l i
func (m *Configv1SLI) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomTimesliceIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdditionalPromqlFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1SLI) validateCustomIndicator(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomIndicator) { // not required
		return nil
	}

	if m.CustomIndicator != nil {
		if err := m.CustomIndicator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_indicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_indicator")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1SLI) validateCustomTimesliceIndicator(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomTimesliceIndicator) { // not required
		return nil
	}

	if m.CustomTimesliceIndicator != nil {
		if err := m.CustomTimesliceIndicator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_timeslice_indicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_timeslice_indicator")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1SLI) validateAdditionalPromqlFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalPromqlFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalPromqlFilters); i++ {
		if swag.IsZero(m.AdditionalPromqlFilters[i]) { // not required
			continue
		}

		if m.AdditionalPromqlFilters[i] != nil {
			if err := m.AdditionalPromqlFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additional_promql_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additional_promql_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this configv1 s l i based on the context it is used
func (m *Configv1SLI) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomIndicator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomTimesliceIndicator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdditionalPromqlFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1SLI) contextValidateCustomIndicator(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomIndicator != nil {

		if swag.IsZero(m.CustomIndicator) { // not required
			return nil
		}

		if err := m.CustomIndicator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_indicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_indicator")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1SLI) contextValidateCustomTimesliceIndicator(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomTimesliceIndicator != nil {

		if swag.IsZero(m.CustomTimesliceIndicator) { // not required
			return nil
		}

		if err := m.CustomTimesliceIndicator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_timeslice_indicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_timeslice_indicator")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1SLI) contextValidateAdditionalPromqlFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalPromqlFilters); i++ {

		if m.AdditionalPromqlFilters[i] != nil {

			if swag.IsZero(m.AdditionalPromqlFilters[i]) { // not required
				return nil
			}

			if err := m.AdditionalPromqlFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additional_promql_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additional_promql_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Configv1SLI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Configv1SLI) UnmarshalBinary(b []byte) error {
	var res Configv1SLI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
