// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResourceChangeAction resource change action
//
// swagger:model ResourceChangeAction
type ResourceChangeAction string

func NewResourceChangeAction(value ResourceChangeAction) *ResourceChangeAction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResourceChangeAction.
func (m ResourceChangeAction) Pointer() *ResourceChangeAction {
	return &m
}

const (

	// ResourceChangeActionCREATED captures enum value "CREATED"
	ResourceChangeActionCREATED ResourceChangeAction = "CREATED"

	// ResourceChangeActionUPDATED captures enum value "UPDATED"
	ResourceChangeActionUPDATED ResourceChangeAction = "UPDATED"

	// ResourceChangeActionDELETED captures enum value "DELETED"
	ResourceChangeActionDELETED ResourceChangeAction = "DELETED"

	// ResourceChangeActionNOOP captures enum value "NOOP"
	ResourceChangeActionNOOP ResourceChangeAction = "NOOP"
)

// for schema
var resourceChangeActionEnum []interface{}

func init() {
	var res []ResourceChangeAction
	if err := json.Unmarshal([]byte(`["CREATED","UPDATED","DELETED","NOOP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceChangeActionEnum = append(resourceChangeActionEnum, v)
	}
}

func (m ResourceChangeAction) validateResourceChangeActionEnum(path, location string, value ResourceChangeAction) error {
	if err := validate.EnumCase(path, location, value, resourceChangeActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this resource change action
func (m ResourceChangeAction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResourceChangeActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this resource change action based on context it is used
func (m ResourceChangeAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
