// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Configv1LogControlRuleType configv1 log control rule type
//
// swagger:model configv1LogControlRuleType
type Configv1LogControlRuleType string

func NewConfigv1LogControlRuleType(value Configv1LogControlRuleType) *Configv1LogControlRuleType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Configv1LogControlRuleType.
func (m Configv1LogControlRuleType) Pointer() *Configv1LogControlRuleType {
	return &m
}

const (

	// Configv1LogControlRuleTypeDROP captures enum value "DROP"
	Configv1LogControlRuleTypeDROP Configv1LogControlRuleType = "DROP"

	// Configv1LogControlRuleTypeSAMPLE captures enum value "SAMPLE"
	Configv1LogControlRuleTypeSAMPLE Configv1LogControlRuleType = "SAMPLE"

	// Configv1LogControlRuleTypeDROPFIELD captures enum value "DROP_FIELD"
	Configv1LogControlRuleTypeDROPFIELD Configv1LogControlRuleType = "DROP_FIELD"

	// Configv1LogControlRuleTypeREPLACEFIELD captures enum value "REPLACE_FIELD"
	Configv1LogControlRuleTypeREPLACEFIELD Configv1LogControlRuleType = "REPLACE_FIELD"

	// Configv1LogControlRuleTypeEMITMETRICS captures enum value "EMIT_METRICS"
	Configv1LogControlRuleTypeEMITMETRICS Configv1LogControlRuleType = "EMIT_METRICS"
)

// for schema
var configv1LogControlRuleTypeEnum []interface{}

func init() {
	var res []Configv1LogControlRuleType
	if err := json.Unmarshal([]byte(`["DROP","SAMPLE","DROP_FIELD","REPLACE_FIELD","EMIT_METRICS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configv1LogControlRuleTypeEnum = append(configv1LogControlRuleTypeEnum, v)
	}
}

func (m Configv1LogControlRuleType) validateConfigv1LogControlRuleTypeEnum(path, location string, value Configv1LogControlRuleType) error {
	if err := validate.EnumCase(path, location, value, configv1LogControlRuleTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configv1 log control rule type
func (m Configv1LogControlRuleType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigv1LogControlRuleTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configv1 log control rule type based on context it is used
func (m Configv1LogControlRuleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
