// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Configv1DerivedLabelLabelPolicy configv1 derived label label policy
//
// swagger:model configv1DerivedLabelLabelPolicy
type Configv1DerivedLabelLabelPolicy string

func NewConfigv1DerivedLabelLabelPolicy(value Configv1DerivedLabelLabelPolicy) *Configv1DerivedLabelLabelPolicy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Configv1DerivedLabelLabelPolicy.
func (m Configv1DerivedLabelLabelPolicy) Pointer() *Configv1DerivedLabelLabelPolicy {
	return &m
}

const (

	// Configv1DerivedLabelLabelPolicyKEEP captures enum value "KEEP"
	Configv1DerivedLabelLabelPolicyKEEP Configv1DerivedLabelLabelPolicy = "KEEP"

	// Configv1DerivedLabelLabelPolicyOVERRIDE captures enum value "OVERRIDE"
	Configv1DerivedLabelLabelPolicyOVERRIDE Configv1DerivedLabelLabelPolicy = "OVERRIDE"
)

// for schema
var configv1DerivedLabelLabelPolicyEnum []interface{}

func init() {
	var res []Configv1DerivedLabelLabelPolicy
	if err := json.Unmarshal([]byte(`["KEEP","OVERRIDE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configv1DerivedLabelLabelPolicyEnum = append(configv1DerivedLabelLabelPolicyEnum, v)
	}
}

func (m Configv1DerivedLabelLabelPolicy) validateConfigv1DerivedLabelLabelPolicyEnum(path, location string, value Configv1DerivedLabelLabelPolicy) error {
	if err := validate.EnumCase(path, location, value, configv1DerivedLabelLabelPolicyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configv1 derived label label policy
func (m Configv1DerivedLabelLabelPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigv1DerivedLabelLabelPolicyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configv1 derived label label policy based on context it is used
func (m Configv1DerivedLabelLabelPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
