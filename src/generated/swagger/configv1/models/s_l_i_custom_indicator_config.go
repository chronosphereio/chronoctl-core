// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SLICustomIndicatorConfig CustomIndicatorConfig is for SLIs that are not associated with Chronosphere
// Lens supported SLO types. They are provided with several variables that can
// be used in the template to generate the query:
// - Window (required)
// - GroupBy (required)
//
// swagger:model SLICustomIndicatorConfig
type SLICustomIndicatorConfig struct {

	// A PromQL query that measures the number of "good" events for this SLI.
	// Either this or the bad_query_template must be set.
	GoodQueryTemplate string `json:"good_query_template,omitempty"`

	// A PromQL query that measures the number of "bad" events for this SLI.
	// Either this or the good_query_template must be set.
	BadQueryTemplate string `json:"bad_query_template,omitempty"`

	// A PromQL query that measures the total number of events for this SLI.
	// This is required for all advanced SLIs.
	TotalQueryTemplate string `json:"total_query_template,omitempty"`
}

// Validate validates this s l i custom indicator config
func (m *SLICustomIndicatorConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this s l i custom indicator config based on context it is used
func (m *SLICustomIndicatorConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SLICustomIndicatorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SLICustomIndicatorConfig) UnmarshalBinary(b []byte) error {
	var res SLICustomIndicatorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
