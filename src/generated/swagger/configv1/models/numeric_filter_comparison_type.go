// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NumericFilterComparisonType numeric filter comparison type
//
// swagger:model NumericFilterComparisonType
type NumericFilterComparisonType string

func NewNumericFilterComparisonType(value NumericFilterComparisonType) *NumericFilterComparisonType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NumericFilterComparisonType.
func (m NumericFilterComparisonType) Pointer() *NumericFilterComparisonType {
	return &m
}

const (

	// NumericFilterComparisonTypeEQUAL captures enum value "EQUAL"
	NumericFilterComparisonTypeEQUAL NumericFilterComparisonType = "EQUAL"

	// NumericFilterComparisonTypeNOTEQUAL captures enum value "NOT_EQUAL"
	NumericFilterComparisonTypeNOTEQUAL NumericFilterComparisonType = "NOT_EQUAL"

	// NumericFilterComparisonTypeGREATERTHAN captures enum value "GREATER_THAN"
	NumericFilterComparisonTypeGREATERTHAN NumericFilterComparisonType = "GREATER_THAN"

	// NumericFilterComparisonTypeGREATERTHANOREQUAL captures enum value "GREATER_THAN_OR_EQUAL"
	NumericFilterComparisonTypeGREATERTHANOREQUAL NumericFilterComparisonType = "GREATER_THAN_OR_EQUAL"

	// NumericFilterComparisonTypeLESSTHAN captures enum value "LESS_THAN"
	NumericFilterComparisonTypeLESSTHAN NumericFilterComparisonType = "LESS_THAN"

	// NumericFilterComparisonTypeLESSTHANOREQUAL captures enum value "LESS_THAN_OR_EQUAL"
	NumericFilterComparisonTypeLESSTHANOREQUAL NumericFilterComparisonType = "LESS_THAN_OR_EQUAL"
)

// for schema
var numericFilterComparisonTypeEnum []interface{}

func init() {
	var res []NumericFilterComparisonType
	if err := json.Unmarshal([]byte(`["EQUAL","NOT_EQUAL","GREATER_THAN","GREATER_THAN_OR_EQUAL","LESS_THAN","LESS_THAN_OR_EQUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		numericFilterComparisonTypeEnum = append(numericFilterComparisonTypeEnum, v)
	}
}

func (m NumericFilterComparisonType) validateNumericFilterComparisonTypeEnum(path, location string, value NumericFilterComparisonType) error {
	if err := validate.EnumCase(path, location, value, numericFilterComparisonTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this numeric filter comparison type
func (m NumericFilterComparisonType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNumericFilterComparisonTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this numeric filter comparison type based on context it is used
func (m NumericFilterComparisonType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
