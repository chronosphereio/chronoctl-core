// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Configv1AggregationType configv1 aggregation type
//
// swagger:model configv1AggregationType
type Configv1AggregationType string

func NewConfigv1AggregationType(value Configv1AggregationType) *Configv1AggregationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Configv1AggregationType.
func (m Configv1AggregationType) Pointer() *Configv1AggregationType {
	return &m
}

const (

	// Configv1AggregationTypeLAST captures enum value "LAST"
	Configv1AggregationTypeLAST Configv1AggregationType = "LAST"

	// Configv1AggregationTypeMIN captures enum value "MIN"
	Configv1AggregationTypeMIN Configv1AggregationType = "MIN"

	// Configv1AggregationTypeMAX captures enum value "MAX"
	Configv1AggregationTypeMAX Configv1AggregationType = "MAX"

	// Configv1AggregationTypeMEAN captures enum value "MEAN"
	Configv1AggregationTypeMEAN Configv1AggregationType = "MEAN"

	// Configv1AggregationTypeMEDIAN captures enum value "MEDIAN"
	Configv1AggregationTypeMEDIAN Configv1AggregationType = "MEDIAN"

	// Configv1AggregationTypeCOUNT captures enum value "COUNT"
	Configv1AggregationTypeCOUNT Configv1AggregationType = "COUNT"

	// Configv1AggregationTypeSUM captures enum value "SUM"
	Configv1AggregationTypeSUM Configv1AggregationType = "SUM"

	// Configv1AggregationTypeSUMSQ captures enum value "SUMSQ"
	Configv1AggregationTypeSUMSQ Configv1AggregationType = "SUMSQ"

	// Configv1AggregationTypeSTDEV captures enum value "STDEV"
	Configv1AggregationTypeSTDEV Configv1AggregationType = "STDEV"

	// Configv1AggregationTypeP10 captures enum value "P10"
	Configv1AggregationTypeP10 Configv1AggregationType = "P10"

	// Configv1AggregationTypeP20 captures enum value "P20"
	Configv1AggregationTypeP20 Configv1AggregationType = "P20"

	// Configv1AggregationTypeP30 captures enum value "P30"
	Configv1AggregationTypeP30 Configv1AggregationType = "P30"

	// Configv1AggregationTypeP40 captures enum value "P40"
	Configv1AggregationTypeP40 Configv1AggregationType = "P40"

	// Configv1AggregationTypeP50 captures enum value "P50"
	Configv1AggregationTypeP50 Configv1AggregationType = "P50"

	// Configv1AggregationTypeP60 captures enum value "P60"
	Configv1AggregationTypeP60 Configv1AggregationType = "P60"

	// Configv1AggregationTypeP70 captures enum value "P70"
	Configv1AggregationTypeP70 Configv1AggregationType = "P70"

	// Configv1AggregationTypeP80 captures enum value "P80"
	Configv1AggregationTypeP80 Configv1AggregationType = "P80"

	// Configv1AggregationTypeP90 captures enum value "P90"
	Configv1AggregationTypeP90 Configv1AggregationType = "P90"

	// Configv1AggregationTypeP95 captures enum value "P95"
	Configv1AggregationTypeP95 Configv1AggregationType = "P95"

	// Configv1AggregationTypeP99 captures enum value "P99"
	Configv1AggregationTypeP99 Configv1AggregationType = "P99"

	// Configv1AggregationTypeP999 captures enum value "P999"
	Configv1AggregationTypeP999 Configv1AggregationType = "P999"

	// Configv1AggregationTypeP9999 captures enum value "P9999"
	Configv1AggregationTypeP9999 Configv1AggregationType = "P9999"

	// Configv1AggregationTypeP25 captures enum value "P25"
	Configv1AggregationTypeP25 Configv1AggregationType = "P25"

	// Configv1AggregationTypeP75 captures enum value "P75"
	Configv1AggregationTypeP75 Configv1AggregationType = "P75"

	// Configv1AggregationTypeCOUNTSAMPLES captures enum value "COUNT_SAMPLES"
	Configv1AggregationTypeCOUNTSAMPLES Configv1AggregationType = "COUNT_SAMPLES"

	// Configv1AggregationTypeHISTOGRAM captures enum value "HISTOGRAM"
	Configv1AggregationTypeHISTOGRAM Configv1AggregationType = "HISTOGRAM"
)

// for schema
var configv1AggregationTypeEnum []interface{}

func init() {
	var res []Configv1AggregationType
	if err := json.Unmarshal([]byte(`["LAST","MIN","MAX","MEAN","MEDIAN","COUNT","SUM","SUMSQ","STDEV","P10","P20","P30","P40","P50","P60","P70","P80","P90","P95","P99","P999","P9999","P25","P75","COUNT_SAMPLES","HISTOGRAM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configv1AggregationTypeEnum = append(configv1AggregationTypeEnum, v)
	}
}

func (m Configv1AggregationType) validateConfigv1AggregationTypeEnum(path, location string, value Configv1AggregationType) error {
	if err := validate.EnumCase(path, location, value, configv1AggregationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configv1 aggregation type
func (m Configv1AggregationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigv1AggregationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configv1 aggregation type based on context it is used
func (m Configv1AggregationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
