// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Configv1DropRuleMode configv1 drop rule mode
//
// swagger:model configv1DropRuleMode
type Configv1DropRuleMode string

func NewConfigv1DropRuleMode(value Configv1DropRuleMode) *Configv1DropRuleMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Configv1DropRuleMode.
func (m Configv1DropRuleMode) Pointer() *Configv1DropRuleMode {
	return &m
}

const (

	// Configv1DropRuleModeENABLED captures enum value "ENABLED"
	Configv1DropRuleModeENABLED Configv1DropRuleMode = "ENABLED"

	// Configv1DropRuleModeDISABLED captures enum value "DISABLED"
	Configv1DropRuleModeDISABLED Configv1DropRuleMode = "DISABLED"
)

// for schema
var configv1DropRuleModeEnum []interface{}

func init() {
	var res []Configv1DropRuleMode
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configv1DropRuleModeEnum = append(configv1DropRuleModeEnum, v)
	}
}

func (m Configv1DropRuleMode) validateConfigv1DropRuleModeEnum(path, location string, value Configv1DropRuleMode) error {
	if err := validate.EnumCase(path, location, value, configv1DropRuleModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configv1 drop rule mode
func (m Configv1DropRuleMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigv1DropRuleModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configv1 drop rule mode based on context it is used
func (m Configv1DropRuleMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
