// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponderResponderType responder responder type
//
// swagger:model ResponderResponderType
type ResponderResponderType string

func NewResponderResponderType(value ResponderResponderType) *ResponderResponderType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResponderResponderType.
func (m ResponderResponderType) Pointer() *ResponderResponderType {
	return &m
}

const (

	// ResponderResponderTypeTEAM captures enum value "TEAM"
	ResponderResponderTypeTEAM ResponderResponderType = "TEAM"

	// ResponderResponderTypeUSER captures enum value "USER"
	ResponderResponderTypeUSER ResponderResponderType = "USER"

	// ResponderResponderTypeESCALATION captures enum value "ESCALATION"
	ResponderResponderTypeESCALATION ResponderResponderType = "ESCALATION"

	// ResponderResponderTypeSCHEDULE captures enum value "SCHEDULE"
	ResponderResponderTypeSCHEDULE ResponderResponderType = "SCHEDULE"
)

// for schema
var responderResponderTypeEnum []interface{}

func init() {
	var res []ResponderResponderType
	if err := json.Unmarshal([]byte(`["TEAM","USER","ESCALATION","SCHEDULE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responderResponderTypeEnum = append(responderResponderTypeEnum, v)
	}
}

func (m ResponderResponderType) validateResponderResponderTypeEnum(path, location string, value ResponderResponderType) error {
	if err := validate.EnumCase(path, location, value, responderResponderTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this responder responder type
func (m ResponderResponderType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResponderResponderTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this responder responder type based on context it is used
func (m ResponderResponderType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
