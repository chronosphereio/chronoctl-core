// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Configv1ConsumptionBudget configv1 consumption budget
//
// swagger:model configv1ConsumptionBudget
type Configv1ConsumptionBudget struct {

	// The unique identifier of the ConsumptionBudget. If a `slug` isn't provided, one is generated based on the `name` field. You can't modify this field after the ConsumptionBudget is created.
	Slug string `json:"slug,omitempty"`

	// The name of the ConsumptionBudget. You can modify this value after the ConsumptionBudget is created.
	Name string `json:"name,omitempty"`

	// Timestamp of when the ConsumptionBudget was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the ConsumptionBudget was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// resource
	Resource Configv1ConsumptionBudgetResource `json:"resource,omitempty"`

	// Path of the budget's partition, delimited by forward slashes (`/`), in the
	// format `global/SLUG1/SLUG2`, where `SLUG1` is a top-level partition, and `SLUG2`
	// is a child partition of `SLUG1`.
	//
	// A well-formed partition path always starts with the `global` partition slug, and
	// has no leading or trailing forward slashes.
	PartitionSlugPath string `json:"partition_slug_path,omitempty"`

	// Optional. Controls the order in which data is dropped when a drop action is
	// applied. For example, a priority of 10 is dropped first, and a priority of 1 is
	// dropped last. Priorities are evaluated in match order, and the first priority to
	// match is applied. All other priorities are ignored. If a request does not match
	// any priority, then it is assigned the `default_priority`.
	Priorities []*ConsumptionBudgetPriority `json:"priorities"`

	// Optional. Defines which actions to take when a threshold is exceeded.
	Thresholds []*Configv1ConsumptionBudgetThreshold `json:"thresholds"`

	// Optional. The default priority for requests that don't match any priority in the
	// `priorities` list. If not set, then `priority=10` (dropped first) is used as the
	// default.
	DefaultPriority int32 `json:"default_priority,omitempty"`

	// Notification policy slug for routing alerts. Required only if `ALERT_WARN` or
	// `ALERT_CRITICAL` actions are configured.
	NotificationPolicySlug string `json:"notification_policy_slug,omitempty"`

	// alert action config
	AlertActionConfig *ConsumptionBudgetAlertActionConfig `json:"alert_action_config,omitempty"`
}

// Validate validates this configv1 consumption budget
func (m *Configv1ConsumptionBudget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriorities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertActionConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1ConsumptionBudget) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1ConsumptionBudget) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1ConsumptionBudget) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if err := m.Resource.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("resource")
		}
		return err
	}

	return nil
}

func (m *Configv1ConsumptionBudget) validatePriorities(formats strfmt.Registry) error {
	if swag.IsZero(m.Priorities) { // not required
		return nil
	}

	for i := 0; i < len(m.Priorities); i++ {
		if swag.IsZero(m.Priorities[i]) { // not required
			continue
		}

		if m.Priorities[i] != nil {
			if err := m.Priorities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priorities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priorities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Configv1ConsumptionBudget) validateThresholds(formats strfmt.Registry) error {
	if swag.IsZero(m.Thresholds) { // not required
		return nil
	}

	for i := 0; i < len(m.Thresholds); i++ {
		if swag.IsZero(m.Thresholds[i]) { // not required
			continue
		}

		if m.Thresholds[i] != nil {
			if err := m.Thresholds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("thresholds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("thresholds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Configv1ConsumptionBudget) validateAlertActionConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertActionConfig) { // not required
		return nil
	}

	if m.AlertActionConfig != nil {
		if err := m.AlertActionConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alert_action_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alert_action_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configv1 consumption budget based on the context it is used
func (m *Configv1ConsumptionBudget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriorities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThresholds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAlertActionConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1ConsumptionBudget) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1ConsumptionBudget) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1ConsumptionBudget) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if err := m.Resource.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("resource")
		}
		return err
	}

	return nil
}

func (m *Configv1ConsumptionBudget) contextValidatePriorities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Priorities); i++ {

		if m.Priorities[i] != nil {

			if swag.IsZero(m.Priorities[i]) { // not required
				return nil
			}

			if err := m.Priorities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priorities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priorities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Configv1ConsumptionBudget) contextValidateThresholds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Thresholds); i++ {

		if m.Thresholds[i] != nil {

			if swag.IsZero(m.Thresholds[i]) { // not required
				return nil
			}

			if err := m.Thresholds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("thresholds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("thresholds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Configv1ConsumptionBudget) contextValidateAlertActionConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AlertActionConfig != nil {

		if swag.IsZero(m.AlertActionConfig) { // not required
			return nil
		}

		if err := m.AlertActionConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alert_action_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alert_action_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Configv1ConsumptionBudget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Configv1ConsumptionBudget) UnmarshalBinary(b []byte) error {
	var res Configv1ConsumptionBudget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
