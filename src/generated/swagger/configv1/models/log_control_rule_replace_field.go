// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogControlRuleReplaceField ReplaceField is the configuration for a replace field action.
//
// swagger:model LogControlRuleReplaceField
type LogControlRuleReplaceField struct {

	// field
	Field *Configv1LogFieldPath `json:"field,omitempty"`

	// Regular expression to specify what part of the field to replace.
	ReplaceRegex string `json:"replace_regex,omitempty"`

	// Whether to replace all matches or just the first one.
	ReplaceAll bool `json:"replace_all,omitempty"`

	// replace mode
	ReplaceMode ReplaceFieldReplaceMode `json:"replace_mode,omitempty"`

	// static value
	StaticValue *ReplaceFieldStaticValue `json:"static_value,omitempty"`

	// mapped value
	MappedValue *ReplaceFieldMappedValue `json:"mapped_value,omitempty"`
}

// Validate validates this log control rule replace field
func (m *LogControlRuleReplaceField) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplaceMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaticValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappedValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogControlRuleReplaceField) validateField(formats strfmt.Registry) error {
	if swag.IsZero(m.Field) { // not required
		return nil
	}

	if m.Field != nil {
		if err := m.Field.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("field")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("field")
			}
			return err
		}
	}

	return nil
}

func (m *LogControlRuleReplaceField) validateReplaceMode(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplaceMode) { // not required
		return nil
	}

	if err := m.ReplaceMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("replace_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("replace_mode")
		}
		return err
	}

	return nil
}

func (m *LogControlRuleReplaceField) validateStaticValue(formats strfmt.Registry) error {
	if swag.IsZero(m.StaticValue) { // not required
		return nil
	}

	if m.StaticValue != nil {
		if err := m.StaticValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("static_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("static_value")
			}
			return err
		}
	}

	return nil
}

func (m *LogControlRuleReplaceField) validateMappedValue(formats strfmt.Registry) error {
	if swag.IsZero(m.MappedValue) { // not required
		return nil
	}

	if m.MappedValue != nil {
		if err := m.MappedValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mapped_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mapped_value")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this log control rule replace field based on the context it is used
func (m *LogControlRuleReplaceField) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateField(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplaceMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStaticValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMappedValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogControlRuleReplaceField) contextValidateField(ctx context.Context, formats strfmt.Registry) error {

	if m.Field != nil {

		if swag.IsZero(m.Field) { // not required
			return nil
		}

		if err := m.Field.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("field")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("field")
			}
			return err
		}
	}

	return nil
}

func (m *LogControlRuleReplaceField) contextValidateReplaceMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ReplaceMode) { // not required
		return nil
	}

	if err := m.ReplaceMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("replace_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("replace_mode")
		}
		return err
	}

	return nil
}

func (m *LogControlRuleReplaceField) contextValidateStaticValue(ctx context.Context, formats strfmt.Registry) error {

	if m.StaticValue != nil {

		if swag.IsZero(m.StaticValue) { // not required
			return nil
		}

		if err := m.StaticValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("static_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("static_value")
			}
			return err
		}
	}

	return nil
}

func (m *LogControlRuleReplaceField) contextValidateMappedValue(ctx context.Context, formats strfmt.Registry) error {

	if m.MappedValue != nil {

		if swag.IsZero(m.MappedValue) { // not required
			return nil
		}

		if err := m.MappedValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mapped_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mapped_value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogControlRuleReplaceField) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogControlRuleReplaceField) UnmarshalBinary(b []byte) error {
	var res LogControlRuleReplaceField
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
