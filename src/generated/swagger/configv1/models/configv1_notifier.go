// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Configv1Notifier configv1 notifier
//
// swagger:model configv1Notifier
type Configv1Notifier struct {

	// Unique identifier of the Notifier. If slug is not provided, one will be generated based of the name field. Cannot be modified after the Notifier is created.
	Slug string `json:"slug,omitempty"`

	// Required name of the Notifier. May be modified after the Notifier is created.
	Name string `json:"name,omitempty"`

	// Timestamp of when the Notifier was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the Notifier was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// If true, do not notify on resolved alerts. Cannot set if discard is set.
	SkipResolved bool `json:"skip_resolved,omitempty"`

	// webhook
	Webhook *NotifierWebhookConfig `json:"webhook,omitempty"`

	// slack
	Slack *NotifierSlackConfig `json:"slack,omitempty"`

	// pagerduty
	Pagerduty *NotifierPagerdutyConfig `json:"pagerduty,omitempty"`

	// email
	Email *NotifierEmailConfig `json:"email,omitempty"`

	// ops genie
	OpsGenie *NotifierOpsGenieConfig `json:"ops_genie,omitempty"`

	// victor ops
	VictorOps *NotifierVictorOpsConfig `json:"victor_ops,omitempty"`

	// If set, enables the "discard" integration which simply discards all
	// notifications. Cannot set if another integration is set.
	Discard bool `json:"discard,omitempty"`
}

// Validate validates this configv1 notifier
func (m *Configv1Notifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhook(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePagerduty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpsGenie(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVictorOps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1Notifier) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1Notifier) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1Notifier) validateWebhook(formats strfmt.Registry) error {
	if swag.IsZero(m.Webhook) { // not required
		return nil
	}

	if m.Webhook != nil {
		if err := m.Webhook.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Notifier) validateSlack(formats strfmt.Registry) error {
	if swag.IsZero(m.Slack) { // not required
		return nil
	}

	if m.Slack != nil {
		if err := m.Slack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slack")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Notifier) validatePagerduty(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagerduty) { // not required
		return nil
	}

	if m.Pagerduty != nil {
		if err := m.Pagerduty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagerduty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagerduty")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Notifier) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if m.Email != nil {
		if err := m.Email.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Notifier) validateOpsGenie(formats strfmt.Registry) error {
	if swag.IsZero(m.OpsGenie) { // not required
		return nil
	}

	if m.OpsGenie != nil {
		if err := m.OpsGenie.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ops_genie")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ops_genie")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Notifier) validateVictorOps(formats strfmt.Registry) error {
	if swag.IsZero(m.VictorOps) { // not required
		return nil
	}

	if m.VictorOps != nil {
		if err := m.VictorOps.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("victor_ops")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("victor_ops")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configv1 notifier based on the context it is used
func (m *Configv1Notifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebhook(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSlack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePagerduty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpsGenie(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVictorOps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1Notifier) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1Notifier) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1Notifier) contextValidateWebhook(ctx context.Context, formats strfmt.Registry) error {

	if m.Webhook != nil {

		if swag.IsZero(m.Webhook) { // not required
			return nil
		}

		if err := m.Webhook.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("webhook")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Notifier) contextValidateSlack(ctx context.Context, formats strfmt.Registry) error {

	if m.Slack != nil {

		if swag.IsZero(m.Slack) { // not required
			return nil
		}

		if err := m.Slack.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slack")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Notifier) contextValidatePagerduty(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagerduty != nil {

		if swag.IsZero(m.Pagerduty) { // not required
			return nil
		}

		if err := m.Pagerduty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagerduty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagerduty")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Notifier) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if m.Email != nil {

		if swag.IsZero(m.Email) { // not required
			return nil
		}

		if err := m.Email.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Notifier) contextValidateOpsGenie(ctx context.Context, formats strfmt.Registry) error {

	if m.OpsGenie != nil {

		if swag.IsZero(m.OpsGenie) { // not required
			return nil
		}

		if err := m.OpsGenie.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ops_genie")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ops_genie")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Notifier) contextValidateVictorOps(ctx context.Context, formats strfmt.Registry) error {

	if m.VictorOps != nil {

		if swag.IsZero(m.VictorOps) { // not required
			return nil
		}

		if err := m.VictorOps.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("victor_ops")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("victor_ops")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Configv1Notifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Configv1Notifier) UnmarshalBinary(b []byte) error {
	var res Configv1Notifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
