// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogControlRuleEmitMetrics EmitMetrics is the configuration for emit metrics action.
//
// swagger:model LogControlRuleEmitMetrics
type LogControlRuleEmitMetrics struct {

	// mode
	Mode EmitMetricsMetricMode `json:"mode,omitempty"`

	// The name of the metric to emit. This name has to be unique, and conform to Prometheus naming conventions.
	Name string `json:"name,omitempty"`

	// The labels to emit the metric with. This is a prom-valid label name mapped to a log key.
	Labels []*LogControlRuleEmitMetricsLabel `json:"labels"`

	// Drop log after emitting the metric.
	DropLog bool `json:"drop_log,omitempty"`

	// counter
	Counter *EmitMetricsCounter `json:"counter,omitempty"`

	// gauge
	Gauge *EmitMetricsGauge `json:"gauge,omitempty"`

	// histogram
	Histogram *EmitMetricsHistogram `json:"histogram,omitempty"`
}

// Validate validates this log control rule emit metrics
func (m *LogControlRuleEmitMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGauge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistogram(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogControlRuleEmitMetrics) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mode")
		}
		return err
	}

	return nil
}

func (m *LogControlRuleEmitMetrics) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogControlRuleEmitMetrics) validateCounter(formats strfmt.Registry) error {
	if swag.IsZero(m.Counter) { // not required
		return nil
	}

	if m.Counter != nil {
		if err := m.Counter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("counter")
			}
			return err
		}
	}

	return nil
}

func (m *LogControlRuleEmitMetrics) validateGauge(formats strfmt.Registry) error {
	if swag.IsZero(m.Gauge) { // not required
		return nil
	}

	if m.Gauge != nil {
		if err := m.Gauge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gauge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gauge")
			}
			return err
		}
	}

	return nil
}

func (m *LogControlRuleEmitMetrics) validateHistogram(formats strfmt.Registry) error {
	if swag.IsZero(m.Histogram) { // not required
		return nil
	}

	if m.Histogram != nil {
		if err := m.Histogram.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("histogram")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("histogram")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this log control rule emit metrics based on the context it is used
func (m *LogControlRuleEmitMetrics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCounter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGauge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHistogram(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogControlRuleEmitMetrics) contextValidateMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mode")
		}
		return err
	}

	return nil
}

func (m *LogControlRuleEmitMetrics) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Labels); i++ {

		if m.Labels[i] != nil {

			if swag.IsZero(m.Labels[i]) { // not required
				return nil
			}

			if err := m.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogControlRuleEmitMetrics) contextValidateCounter(ctx context.Context, formats strfmt.Registry) error {

	if m.Counter != nil {

		if swag.IsZero(m.Counter) { // not required
			return nil
		}

		if err := m.Counter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("counter")
			}
			return err
		}
	}

	return nil
}

func (m *LogControlRuleEmitMetrics) contextValidateGauge(ctx context.Context, formats strfmt.Registry) error {

	if m.Gauge != nil {

		if swag.IsZero(m.Gauge) { // not required
			return nil
		}

		if err := m.Gauge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gauge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gauge")
			}
			return err
		}
	}

	return nil
}

func (m *LogControlRuleEmitMetrics) contextValidateHistogram(ctx context.Context, formats strfmt.Registry) error {

	if m.Histogram != nil {

		if swag.IsZero(m.Histogram) { // not required
			return nil
		}

		if err := m.Histogram.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("histogram")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("histogram")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogControlRuleEmitMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogControlRuleEmitMetrics) UnmarshalBinary(b []byte) error {
	var res LogControlRuleEmitMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
