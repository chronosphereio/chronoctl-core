// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RoutesSeverityNotifiers routes severity notifiers
//
// swagger:model RoutesSeverityNotifiers
type RoutesSeverityNotifiers struct {

	// warn
	Warn *RoutesNotifierList `json:"warn,omitempty"`

	// critical
	Critical *RoutesNotifierList `json:"critical,omitempty"`
}

// Validate validates this routes severity notifiers
func (m *RoutesSeverityNotifiers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWarn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCritical(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoutesSeverityNotifiers) validateWarn(formats strfmt.Registry) error {
	if swag.IsZero(m.Warn) { // not required
		return nil
	}

	if m.Warn != nil {
		if err := m.Warn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("warn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("warn")
			}
			return err
		}
	}

	return nil
}

func (m *RoutesSeverityNotifiers) validateCritical(formats strfmt.Registry) error {
	if swag.IsZero(m.Critical) { // not required
		return nil
	}

	if m.Critical != nil {
		if err := m.Critical.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("critical")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("critical")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this routes severity notifiers based on the context it is used
func (m *RoutesSeverityNotifiers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWarn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCritical(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoutesSeverityNotifiers) contextValidateWarn(ctx context.Context, formats strfmt.Registry) error {

	if m.Warn != nil {

		if swag.IsZero(m.Warn) { // not required
			return nil
		}

		if err := m.Warn.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("warn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("warn")
			}
			return err
		}
	}

	return nil
}

func (m *RoutesSeverityNotifiers) contextValidateCritical(ctx context.Context, formats strfmt.Registry) error {

	if m.Critical != nil {

		if swag.IsZero(m.Critical) { // not required
			return nil
		}

		if err := m.Critical.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("critical")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("critical")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoutesSeverityNotifiers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoutesSeverityNotifiers) UnmarshalBinary(b []byte) error {
	var res RoutesSeverityNotifiers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
