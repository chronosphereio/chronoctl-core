// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NotificationPolicyRoutesOverride notification policy routes override
//
// swagger:model NotificationPolicyRoutesOverride
type NotificationPolicyRoutesOverride struct {

	// Set of matchers on an alert's labels.
	// If all labels match then the override notifiers apply.
	AlertLabelMatchers []*Configv1LabelMatcher `json:"alert_label_matchers"`

	// notifiers
	Notifiers *RoutesSeverityNotifiers `json:"notifiers,omitempty"`
}

// Validate validates this notification policy routes override
func (m *NotificationPolicyRoutesOverride) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertLabelMatchers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifiers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationPolicyRoutesOverride) validateAlertLabelMatchers(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertLabelMatchers) { // not required
		return nil
	}

	for i := 0; i < len(m.AlertLabelMatchers); i++ {
		if swag.IsZero(m.AlertLabelMatchers[i]) { // not required
			continue
		}

		if m.AlertLabelMatchers[i] != nil {
			if err := m.AlertLabelMatchers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alert_label_matchers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alert_label_matchers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NotificationPolicyRoutesOverride) validateNotifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.Notifiers) { // not required
		return nil
	}

	if m.Notifiers != nil {
		if err := m.Notifiers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifiers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notifiers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this notification policy routes override based on the context it is used
func (m *NotificationPolicyRoutesOverride) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertLabelMatchers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationPolicyRoutesOverride) contextValidateAlertLabelMatchers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AlertLabelMatchers); i++ {

		if m.AlertLabelMatchers[i] != nil {

			if swag.IsZero(m.AlertLabelMatchers[i]) { // not required
				return nil
			}

			if err := m.AlertLabelMatchers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alert_label_matchers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alert_label_matchers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NotificationPolicyRoutesOverride) contextValidateNotifiers(ctx context.Context, formats strfmt.Registry) error {

	if m.Notifiers != nil {

		if swag.IsZero(m.Notifiers) { // not required
			return nil
		}

		if err := m.Notifiers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifiers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notifiers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotificationPolicyRoutesOverride) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationPolicyRoutesOverride) UnmarshalBinary(b []byte) error {
	var res NotificationPolicyRoutesOverride
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
