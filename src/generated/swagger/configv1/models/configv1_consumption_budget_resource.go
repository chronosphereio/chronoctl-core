// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Configv1ConsumptionBudgetResource configv1 consumption budget resource
//
// swagger:model configv1ConsumptionBudgetResource
type Configv1ConsumptionBudgetResource string

func NewConfigv1ConsumptionBudgetResource(value Configv1ConsumptionBudgetResource) *Configv1ConsumptionBudgetResource {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Configv1ConsumptionBudgetResource.
func (m Configv1ConsumptionBudgetResource) Pointer() *Configv1ConsumptionBudgetResource {
	return &m
}

const (

	// Configv1ConsumptionBudgetResourceLOGPERSISTEDBYTES captures enum value "LOG_PERSISTED_BYTES"
	Configv1ConsumptionBudgetResourceLOGPERSISTEDBYTES Configv1ConsumptionBudgetResource = "LOG_PERSISTED_BYTES"
)

// for schema
var configv1ConsumptionBudgetResourceEnum []interface{}

func init() {
	var res []Configv1ConsumptionBudgetResource
	if err := json.Unmarshal([]byte(`["LOG_PERSISTED_BYTES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configv1ConsumptionBudgetResourceEnum = append(configv1ConsumptionBudgetResourceEnum, v)
	}
}

func (m Configv1ConsumptionBudgetResource) validateConfigv1ConsumptionBudgetResourceEnum(path, location string, value Configv1ConsumptionBudgetResource) error {
	if err := validate.EnumCase(path, location, value, configv1ConsumptionBudgetResourceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configv1 consumption budget resource
func (m Configv1ConsumptionBudgetResource) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigv1ConsumptionBudgetResourceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configv1 consumption budget resource based on context it is used
func (m Configv1ConsumptionBudgetResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
