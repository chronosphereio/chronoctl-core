// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FilterOperator filter operator
//
// swagger:model FilterOperator
type FilterOperator string

func NewFilterOperator(value FilterOperator) *FilterOperator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FilterOperator.
func (m FilterOperator) Pointer() *FilterOperator {
	return &m
}

const (

	// FilterOperatorIN captures enum value "IN"
	FilterOperatorIN FilterOperator = "IN"

	// FilterOperatorNOTIN captures enum value "NOT_IN"
	FilterOperatorNOTIN FilterOperator = "NOT_IN"
)

// for schema
var filterOperatorEnum []interface{}

func init() {
	var res []FilterOperator
	if err := json.Unmarshal([]byte(`["IN","NOT_IN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterOperatorEnum = append(filterOperatorEnum, v)
	}
}

func (m FilterOperator) validateFilterOperatorEnum(path, location string, value FilterOperator) error {
	if err := validate.EnumCase(path, location, value, filterOperatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this filter operator
func (m FilterOperator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFilterOperatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this filter operator based on context it is used
func (m FilterOperator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
