// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Configv1ResourceType configv1 resource type
//
// swagger:model configv1ResourceType
type Configv1ResourceType string

func NewConfigv1ResourceType(value Configv1ResourceType) *Configv1ResourceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Configv1ResourceType.
func (m Configv1ResourceType) Pointer() *Configv1ResourceType {
	return &m
}

const (

	// Configv1ResourceTypeBUCKET captures enum value "BUCKET"
	Configv1ResourceTypeBUCKET Configv1ResourceType = "BUCKET"

	// Configv1ResourceTypeDASHBOARD captures enum value "DASHBOARD"
	Configv1ResourceTypeDASHBOARD Configv1ResourceType = "DASHBOARD"

	// Configv1ResourceTypeGRAFANADASHBOARD captures enum value "GRAFANA_DASHBOARD"
	Configv1ResourceTypeGRAFANADASHBOARD Configv1ResourceType = "GRAFANA_DASHBOARD"

	// Configv1ResourceTypeMONITOR captures enum value "MONITOR"
	Configv1ResourceTypeMONITOR Configv1ResourceType = "MONITOR"

	// Configv1ResourceTypeNOTIFICATIONPOLICY captures enum value "NOTIFICATION_POLICY"
	Configv1ResourceTypeNOTIFICATIONPOLICY Configv1ResourceType = "NOTIFICATION_POLICY"

	// Configv1ResourceTypeRECORDINGRULE captures enum value "RECORDING_RULE"
	Configv1ResourceTypeRECORDINGRULE Configv1ResourceType = "RECORDING_RULE"

	// Configv1ResourceTypeMAPPINGRULE captures enum value "MAPPING_RULE"
	Configv1ResourceTypeMAPPINGRULE Configv1ResourceType = "MAPPING_RULE"

	// Configv1ResourceTypeROLLUPRULE captures enum value "ROLLUP_RULE"
	Configv1ResourceTypeROLLUPRULE Configv1ResourceType = "ROLLUP_RULE"
)

// for schema
var configv1ResourceTypeEnum []interface{}

func init() {
	var res []Configv1ResourceType
	if err := json.Unmarshal([]byte(`["BUCKET","DASHBOARD","GRAFANA_DASHBOARD","MONITOR","NOTIFICATION_POLICY","RECORDING_RULE","MAPPING_RULE","ROLLUP_RULE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configv1ResourceTypeEnum = append(configv1ResourceTypeEnum, v)
	}
}

func (m Configv1ResourceType) validateConfigv1ResourceTypeEnum(path, location string, value Configv1ResourceType) error {
	if err := validate.EnumCase(path, location, value, configv1ResourceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configv1 resource type
func (m Configv1ResourceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigv1ResourceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configv1 resource type based on context it is used
func (m Configv1ResourceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
