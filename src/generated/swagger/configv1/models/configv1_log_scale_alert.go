// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Configv1LogScaleAlert configv1 log scale alert
//
// swagger:model configv1LogScaleAlert
type Configv1LogScaleAlert struct {

	// The unique identifier of the LogScaleAlert. If a `slug` isn't provided, one is generated based on the `name` field. You can't modify this field after the LogScaleAlert is created.
	Slug string `json:"slug,omitempty"`

	// Name of LogScale repository the alerts belongs to. Required.
	Repository string `json:"repository,omitempty"`

	// Name of the alert.
	Name string `json:"name,omitempty"`

	// Timestamp of when the LogScaleAlert was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the LogScaleAlert was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// Description of the alert.
	Description string `json:"description,omitempty"`

	// Flag indicating whether the alert is disabled.
	Disabled bool `json:"disabled,omitempty"`

	// LogScale query to execute.
	// Example: level = ERROR | severity \u003e 3 | count(as=numErrors) | numErrors \u003e 500
	LogScaleQuery string `json:"log_scale_query,omitempty"`

	// Lookback window used for an alert's evaluation.
	// If this is set to 86400 seconds (24 hours), only the events from the last 24 hours will be considered when the alert query is run.
	// Example: 3600
	TimeWindowSecs int32 `json:"time_window_secs,omitempty"`

	// Throttle time in seconds. The alert is triggered at most once per throttle period.
	ThrottleSecs int32 `json:"throttle_secs,omitempty"`

	// Field to throttle on. Optional.
	ThrottleField string `json:"throttle_field,omitempty"`

	// Slugs of LogScale actions that will receive the alerts. When the value is empty
	// this alert won't trigger. Optional.
	LogScaleActionSlugs []string `json:"log_scale_action_slugs"`

	// Tags attached to the alert.
	Tags []string `json:"tags"`

	// Email of the user that the alert runs on behalf of. Required.
	RunAsUser string `json:"run_as_user,omitempty"`

	// alert type
	AlertType LogScaleAlertAlertType `json:"alert_type,omitempty"`
}

// Validate validates this configv1 log scale alert
func (m *Configv1LogScaleAlert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1LogScaleAlert) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1LogScaleAlert) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1LogScaleAlert) validateAlertType(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertType) { // not required
		return nil
	}

	if err := m.AlertType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alert_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alert_type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this configv1 log scale alert based on the context it is used
func (m *Configv1LogScaleAlert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAlertType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1LogScaleAlert) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1LogScaleAlert) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1LogScaleAlert) contextValidateAlertType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.AlertType) { // not required
		return nil
	}

	if err := m.AlertType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alert_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alert_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Configv1LogScaleAlert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Configv1LogScaleAlert) UnmarshalBinary(b []byte) error {
	var res Configv1LogScaleAlert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
