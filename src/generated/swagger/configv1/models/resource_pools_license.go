// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResourcePoolsLicense resource pools license
//
// swagger:model ResourcePoolsLicense
type ResourcePoolsLicense string

func NewResourcePoolsLicense(value ResourcePoolsLicense) *ResourcePoolsLicense {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResourcePoolsLicense.
func (m ResourcePoolsLicense) Pointer() *ResourcePoolsLicense {
	return &m
}

const (

	// ResourcePoolsLicensePERSISTEDWRITESSTANDARD captures enum value "PERSISTED_WRITES_STANDARD"
	ResourcePoolsLicensePERSISTEDWRITESSTANDARD ResourcePoolsLicense = "PERSISTED_WRITES_STANDARD"

	// ResourcePoolsLicensePERSISTEDWRITESHISTOGRAM captures enum value "PERSISTED_WRITES_HISTOGRAM"
	ResourcePoolsLicensePERSISTEDWRITESHISTOGRAM ResourcePoolsLicense = "PERSISTED_WRITES_HISTOGRAM"

	// ResourcePoolsLicensePERSISTEDCARDINALITYSTANDARD captures enum value "PERSISTED_CARDINALITY_STANDARD"
	ResourcePoolsLicensePERSISTEDCARDINALITYSTANDARD ResourcePoolsLicense = "PERSISTED_CARDINALITY_STANDARD"

	// ResourcePoolsLicensePERSISTEDCARDINALITYHISTOGRAM captures enum value "PERSISTED_CARDINALITY_HISTOGRAM"
	ResourcePoolsLicensePERSISTEDCARDINALITYHISTOGRAM ResourcePoolsLicense = "PERSISTED_CARDINALITY_HISTOGRAM"

	// ResourcePoolsLicenseMATCHEDWRITESSTANDARD captures enum value "MATCHED_WRITES_STANDARD"
	ResourcePoolsLicenseMATCHEDWRITESSTANDARD ResourcePoolsLicense = "MATCHED_WRITES_STANDARD"

	// ResourcePoolsLicenseMATCHEDWRITESHISTOGRAM captures enum value "MATCHED_WRITES_HISTOGRAM"
	ResourcePoolsLicenseMATCHEDWRITESHISTOGRAM ResourcePoolsLicense = "MATCHED_WRITES_HISTOGRAM"
)

// for schema
var resourcePoolsLicenseEnum []interface{}

func init() {
	var res []ResourcePoolsLicense
	if err := json.Unmarshal([]byte(`["PERSISTED_WRITES_STANDARD","PERSISTED_WRITES_HISTOGRAM","PERSISTED_CARDINALITY_STANDARD","PERSISTED_CARDINALITY_HISTOGRAM","MATCHED_WRITES_STANDARD","MATCHED_WRITES_HISTOGRAM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourcePoolsLicenseEnum = append(resourcePoolsLicenseEnum, v)
	}
}

func (m ResourcePoolsLicense) validateResourcePoolsLicenseEnum(path, location string, value ResourcePoolsLicense) error {
	if err := validate.EnumCase(path, location, value, resourcePoolsLicenseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this resource pools license
func (m ResourcePoolsLicense) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResourcePoolsLicenseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this resource pools license based on context it is used
func (m ResourcePoolsLicense) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
