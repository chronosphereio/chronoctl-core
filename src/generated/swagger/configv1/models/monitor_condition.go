// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MonitorCondition monitor condition
//
// swagger:model MonitorCondition
type MonitorCondition struct {

	// op
	Op ConditionOp `json:"op,omitempty"`

	// The value to compare to the metric value using the `op` operation.
	Value float64 `json:"value,omitempty"`

	// Optional. Amount of time the query needs to fail the condition check before an
	// alert is triggered. Must be an integer. Accepts one of `s` (seconds), `m`
	// (minutes), or `h` (hours) as units.
	SustainSecs int32 `json:"sustain_secs,omitempty"`

	// Amount of time the query needs to no longer fire before resolving. Must be an
	// integer. Accepts one of `s` (seconds), `m` (minutes), or `h` (hours) as units.
	ResolveSustainSecs int32 `json:"resolve_sustain_secs,omitempty"`
}

// Validate validates this monitor condition
func (m *MonitorCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitorCondition) validateOp(formats strfmt.Registry) error {
	if swag.IsZero(m.Op) { // not required
		return nil
	}

	if err := m.Op.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("op")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("op")
		}
		return err
	}

	return nil
}

// ContextValidate validate this monitor condition based on the context it is used
func (m *MonitorCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitorCondition) contextValidateOp(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Op) { // not required
		return nil
	}

	if err := m.Op.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("op")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("op")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitorCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitorCondition) UnmarshalBinary(b []byte) error {
	var res MonitorCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
