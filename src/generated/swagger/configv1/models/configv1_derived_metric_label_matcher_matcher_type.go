// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Configv1DerivedMetricLabelMatcherMatcherType configv1 derived metric label matcher matcher type
//
// swagger:model configv1DerivedMetricLabelMatcherMatcherType
type Configv1DerivedMetricLabelMatcherMatcherType string

func NewConfigv1DerivedMetricLabelMatcherMatcherType(value Configv1DerivedMetricLabelMatcherMatcherType) *Configv1DerivedMetricLabelMatcherMatcherType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Configv1DerivedMetricLabelMatcherMatcherType.
func (m Configv1DerivedMetricLabelMatcherMatcherType) Pointer() *Configv1DerivedMetricLabelMatcherMatcherType {
	return &m
}

const (

	// Configv1DerivedMetricLabelMatcherMatcherTypeEXACT captures enum value "EXACT"
	Configv1DerivedMetricLabelMatcherMatcherTypeEXACT Configv1DerivedMetricLabelMatcherMatcherType = "EXACT"
)

// for schema
var configv1DerivedMetricLabelMatcherMatcherTypeEnum []interface{}

func init() {
	var res []Configv1DerivedMetricLabelMatcherMatcherType
	if err := json.Unmarshal([]byte(`["EXACT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configv1DerivedMetricLabelMatcherMatcherTypeEnum = append(configv1DerivedMetricLabelMatcherMatcherTypeEnum, v)
	}
}

func (m Configv1DerivedMetricLabelMatcherMatcherType) validateConfigv1DerivedMetricLabelMatcherMatcherTypeEnum(path, location string, value Configv1DerivedMetricLabelMatcherMatcherType) error {
	if err := validate.EnumCase(path, location, value, configv1DerivedMetricLabelMatcherMatcherTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configv1 derived metric label matcher matcher type
func (m Configv1DerivedMetricLabelMatcherMatcherType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigv1DerivedMetricLabelMatcherMatcherTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configv1 derived metric label matcher matcher type based on context it is used
func (m Configv1DerivedMetricLabelMatcherMatcherType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
