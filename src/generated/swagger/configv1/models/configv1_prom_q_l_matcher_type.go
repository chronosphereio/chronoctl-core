// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Configv1PromQLMatcherType configv1 prom q l matcher type
//
// swagger:model configv1PromQLMatcherType
type Configv1PromQLMatcherType string

func NewConfigv1PromQLMatcherType(value Configv1PromQLMatcherType) *Configv1PromQLMatcherType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Configv1PromQLMatcherType.
func (m Configv1PromQLMatcherType) Pointer() *Configv1PromQLMatcherType {
	return &m
}

const (

	// Configv1PromQLMatcherTypeMatchEqual captures enum value "MatchEqual"
	Configv1PromQLMatcherTypeMatchEqual Configv1PromQLMatcherType = "MatchEqual"

	// Configv1PromQLMatcherTypeMatchRegexp captures enum value "MatchRegexp"
	Configv1PromQLMatcherTypeMatchRegexp Configv1PromQLMatcherType = "MatchRegexp"

	// Configv1PromQLMatcherTypeMatchNotEqual captures enum value "MatchNotEqual"
	Configv1PromQLMatcherTypeMatchNotEqual Configv1PromQLMatcherType = "MatchNotEqual"

	// Configv1PromQLMatcherTypeMatchNotRegexp captures enum value "MatchNotRegexp"
	Configv1PromQLMatcherTypeMatchNotRegexp Configv1PromQLMatcherType = "MatchNotRegexp"
)

// for schema
var configv1PromQLMatcherTypeEnum []interface{}

func init() {
	var res []Configv1PromQLMatcherType
	if err := json.Unmarshal([]byte(`["MatchEqual","MatchRegexp","MatchNotEqual","MatchNotRegexp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configv1PromQLMatcherTypeEnum = append(configv1PromQLMatcherTypeEnum, v)
	}
}

func (m Configv1PromQLMatcherType) validateConfigv1PromQLMatcherTypeEnum(path, location string, value Configv1PromQLMatcherType) error {
	if err := validate.EnumCase(path, location, value, configv1PromQLMatcherTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configv1 prom q l matcher type
func (m Configv1PromQLMatcherType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigv1PromQLMatcherTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configv1 prom q l matcher type based on context it is used
func (m Configv1PromQLMatcherType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
