// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ScheduleDayActive schedule day active
//
// swagger:model ScheduleDayActive
type ScheduleDayActive string

func NewScheduleDayActive(value ScheduleDayActive) *ScheduleDayActive {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ScheduleDayActive.
func (m ScheduleDayActive) Pointer() *ScheduleDayActive {
	return &m
}

const (

	// ScheduleDayActiveALLDAY captures enum value "ALL_DAY"
	ScheduleDayActiveALLDAY ScheduleDayActive = "ALL_DAY"

	// ScheduleDayActiveONLYDURINGRANGES captures enum value "ONLY_DURING_RANGES"
	ScheduleDayActiveONLYDURINGRANGES ScheduleDayActive = "ONLY_DURING_RANGES"

	// ScheduleDayActiveNEVER captures enum value "NEVER"
	ScheduleDayActiveNEVER ScheduleDayActive = "NEVER"
)

// for schema
var scheduleDayActiveEnum []interface{}

func init() {
	var res []ScheduleDayActive
	if err := json.Unmarshal([]byte(`["ALL_DAY","ONLY_DURING_RANGES","NEVER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleDayActiveEnum = append(scheduleDayActiveEnum, v)
	}
}

func (m ScheduleDayActive) validateScheduleDayActiveEnum(path, location string, value ScheduleDayActive) error {
	if err := validate.EnumCase(path, location, value, scheduleDayActiveEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this schedule day active
func (m ScheduleDayActive) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateScheduleDayActiveEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this schedule day active based on context it is used
func (m ScheduleDayActive) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
