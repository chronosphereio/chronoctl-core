// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConsumptionBudgetAlertActionConfig consumption budget alert action config
//
// swagger:model ConsumptionBudgetAlertActionConfig
type ConsumptionBudgetAlertActionConfig struct {

	// Additional annotations to set on the generated monitor. By default, the
	// monitors already contain "description", "dashboard", "resource",
	// "consumption_budget_slug", "threshold_type", and "partition" annotations.
	// Setting any of these annotations will override its default value.
	Annotations map[string]string `json:"annotations,omitempty"`

	// Additional labels to set on the generated monitor, which can be used for
	// notification routing. The following labels are reserved and cannot be
	// override: "resource", "partition", and "threshold_type".
	Labels map[string]string `json:"labels,omitempty"`

	// How long instant rate consumption must sustain above the threshold in
	// order to fire an alert. By default, the sustain is 0: any consumption
	// over the threshold will fire an alert.
	InstantRateSustainSecs int32 `json:"instant_rate_sustain_secs,omitempty"`
}

// Validate validates this consumption budget alert action config
func (m *ConsumptionBudgetAlertActionConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this consumption budget alert action config based on context it is used
func (m *ConsumptionBudgetAlertActionConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConsumptionBudgetAlertActionConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsumptionBudgetAlertActionConfig) UnmarshalBinary(b []byte) error {
	var res ConsumptionBudgetAlertActionConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
