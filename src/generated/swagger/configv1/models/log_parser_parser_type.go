// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LogParserParserType log parser parser type
//
// swagger:model LogParserParserType
type LogParserParserType string

func NewLogParserParserType(value LogParserParserType) *LogParserParserType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LogParserParserType.
func (m LogParserParserType) Pointer() *LogParserParserType {
	return &m
}

const (

	// LogParserParserTypeJSON captures enum value "JSON"
	LogParserParserTypeJSON LogParserParserType = "JSON"

	// LogParserParserTypeREGEX captures enum value "REGEX"
	LogParserParserTypeREGEX LogParserParserType = "REGEX"

	// LogParserParserTypeKEYVALUE captures enum value "KEY_VALUE"
	LogParserParserTypeKEYVALUE LogParserParserType = "KEY_VALUE"
)

// for schema
var logParserParserTypeEnum []interface{}

func init() {
	var res []LogParserParserType
	if err := json.Unmarshal([]byte(`["JSON","REGEX","KEY_VALUE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logParserParserTypeEnum = append(logParserParserTypeEnum, v)
	}
}

func (m LogParserParserType) validateLogParserParserTypeEnum(path, location string, value LogParserParserType) error {
	if err := validate.EnumCase(path, location, value, logParserParserTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this log parser parser type
func (m LogParserParserType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLogParserParserTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this log parser parser type based on context it is used
func (m LogParserParserType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
