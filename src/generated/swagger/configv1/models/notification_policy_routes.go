// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NotificationPolicyRoutes notification policy routes
//
// swagger:model NotificationPolicyRoutes
type NotificationPolicyRoutes struct {

	// defaults
	Defaults *RoutesSeverityNotifiers `json:"defaults,omitempty"`

	// A list of overrides to use for alert notification policies. Each
	// override defines the labels that potentially match an alert. If an alert has
	// matching labels, the override notification policy is used for that alert
	// instead of the default notification policy. If multiple overrides match
	// the same alert, the first matching override notification policy is used.
	Overrides []*NotificationPolicyRoutesOverride `json:"overrides"`
}

// Validate validates this notification policy routes
func (m *NotificationPolicyRoutes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrides(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationPolicyRoutes) validateDefaults(formats strfmt.Registry) error {
	if swag.IsZero(m.Defaults) { // not required
		return nil
	}

	if m.Defaults != nil {
		if err := m.Defaults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaults")
			}
			return err
		}
	}

	return nil
}

func (m *NotificationPolicyRoutes) validateOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.Overrides) { // not required
		return nil
	}

	for i := 0; i < len(m.Overrides); i++ {
		if swag.IsZero(m.Overrides[i]) { // not required
			continue
		}

		if m.Overrides[i] != nil {
			if err := m.Overrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("overrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("overrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this notification policy routes based on the context it is used
func (m *NotificationPolicyRoutes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationPolicyRoutes) contextValidateDefaults(ctx context.Context, formats strfmt.Registry) error {

	if m.Defaults != nil {

		if swag.IsZero(m.Defaults) { // not required
			return nil
		}

		if err := m.Defaults.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaults")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaults")
			}
			return err
		}
	}

	return nil
}

func (m *NotificationPolicyRoutes) contextValidateOverrides(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Overrides); i++ {

		if m.Overrides[i] != nil {

			if swag.IsZero(m.Overrides[i]) { // not required
				return nil
			}

			if err := m.Overrides[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("overrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("overrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotificationPolicyRoutes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationPolicyRoutes) UnmarshalBinary(b []byte) error {
	var res NotificationPolicyRoutes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
