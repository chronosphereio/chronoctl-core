// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogIngestConfigLogParser log ingest config log parser
//
// swagger:model LogIngestConfigLogParser
type LogIngestConfigLogParser struct {

	// parser type
	ParserType LogParserParserType `json:"parser_type,omitempty"`

	// regex parser
	RegexParser *LogParserRegexParser `json:"regex_parser,omitempty"`

	// key value parser
	KeyValueParser *LogParserKeyValueParser `json:"key_value_parser,omitempty"`
}

// Validate validates this log ingest config log parser
func (m *LogIngestConfigLogParser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParserType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegexParser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyValueParser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogIngestConfigLogParser) validateParserType(formats strfmt.Registry) error {
	if swag.IsZero(m.ParserType) { // not required
		return nil
	}

	if err := m.ParserType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parser_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("parser_type")
		}
		return err
	}

	return nil
}

func (m *LogIngestConfigLogParser) validateRegexParser(formats strfmt.Registry) error {
	if swag.IsZero(m.RegexParser) { // not required
		return nil
	}

	if m.RegexParser != nil {
		if err := m.RegexParser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regex_parser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("regex_parser")
			}
			return err
		}
	}

	return nil
}

func (m *LogIngestConfigLogParser) validateKeyValueParser(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyValueParser) { // not required
		return nil
	}

	if m.KeyValueParser != nil {
		if err := m.KeyValueParser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("key_value_parser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("key_value_parser")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this log ingest config log parser based on the context it is used
func (m *LogIngestConfigLogParser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParserType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegexParser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyValueParser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogIngestConfigLogParser) contextValidateParserType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ParserType) { // not required
		return nil
	}

	if err := m.ParserType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parser_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("parser_type")
		}
		return err
	}

	return nil
}

func (m *LogIngestConfigLogParser) contextValidateRegexParser(ctx context.Context, formats strfmt.Registry) error {

	if m.RegexParser != nil {

		if swag.IsZero(m.RegexParser) { // not required
			return nil
		}

		if err := m.RegexParser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regex_parser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("regex_parser")
			}
			return err
		}
	}

	return nil
}

func (m *LogIngestConfigLogParser) contextValidateKeyValueParser(ctx context.Context, formats strfmt.Registry) error {

	if m.KeyValueParser != nil {

		if swag.IsZero(m.KeyValueParser) { // not required
			return nil
		}

		if err := m.KeyValueParser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("key_value_parser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("key_value_parser")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogIngestConfigLogParser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogIngestConfigLogParser) UnmarshalBinary(b []byte) error {
	var res LogIngestConfigLogParser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
