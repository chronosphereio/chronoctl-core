// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogScaleActionWebhookAction log scale action webhook action
//
// swagger:model LogScaleActionWebhookAction
type LogScaleActionWebhookAction struct {

	// method
	Method WebhookActionHTTPMethod `json:"method,omitempty"`

	// URL to send the HTTP or HTTPS request to.
	URL string `json:"url,omitempty"`

	// Headers of the HTTP or HTTPS request.
	Headers map[string]string `json:"headers,omitempty"`

	// Body of the HTTP or HTTPS request. Can be templated with values from the query result.
	BodyTemplate string `json:"body_template,omitempty"`

	// Flag indicating whether SSL should be ignored for the request.
	IgnoreSsl bool `json:"ignore_ssl,omitempty"`

	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy bool `json:"use_proxy,omitempty"`
}

// Validate validates this log scale action webhook action
func (m *LogScaleActionWebhookAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogScaleActionWebhookAction) validateMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.Method) { // not required
		return nil
	}

	if err := m.Method.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("method")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("method")
		}
		return err
	}

	return nil
}

// ContextValidate validate this log scale action webhook action based on the context it is used
func (m *LogScaleActionWebhookAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogScaleActionWebhookAction) contextValidateMethod(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Method) { // not required
		return nil
	}

	if err := m.Method.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("method")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("method")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogScaleActionWebhookAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogScaleActionWebhookAction) UnmarshalBinary(b []byte) error {
	var res LogScaleActionWebhookAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
