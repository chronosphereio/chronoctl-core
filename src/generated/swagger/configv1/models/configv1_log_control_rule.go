// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Configv1LogControlRule LogControlRule is the configuration for a log control rule.
//
// swagger:model configv1LogControlRule
type Configv1LogControlRule struct {

	// Name is the name of the control rule.
	Name string `json:"name,omitempty"`

	// mode
	Mode Configv1LogControlRuleMode `json:"mode,omitempty"`

	// Log query syntax to select logs. Only matching logs will have control action applied.
	Filter string `json:"filter,omitempty"`

	// type
	Type Configv1LogControlRuleType `json:"type,omitempty"`

	// sample
	Sample *LogControlRuleSample `json:"sample,omitempty"`

	// drop field
	DropField *LogControlRuleDropField `json:"drop_field,omitempty"`

	// replace field
	ReplaceField *LogControlRuleReplaceField `json:"replace_field,omitempty"`

	// emit metrics
	EmitMetrics *LogControlRuleEmitMetrics `json:"emit_metrics,omitempty"`
}

// Validate validates this configv1 log control rule
func (m *Configv1LogControlRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSample(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDropField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplaceField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmitMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1LogControlRule) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mode")
		}
		return err
	}

	return nil
}

func (m *Configv1LogControlRule) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *Configv1LogControlRule) validateSample(formats strfmt.Registry) error {
	if swag.IsZero(m.Sample) { // not required
		return nil
	}

	if m.Sample != nil {
		if err := m.Sample.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sample")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sample")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1LogControlRule) validateDropField(formats strfmt.Registry) error {
	if swag.IsZero(m.DropField) { // not required
		return nil
	}

	if m.DropField != nil {
		if err := m.DropField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("drop_field")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("drop_field")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1LogControlRule) validateReplaceField(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplaceField) { // not required
		return nil
	}

	if m.ReplaceField != nil {
		if err := m.ReplaceField.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replace_field")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replace_field")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1LogControlRule) validateEmitMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.EmitMetrics) { // not required
		return nil
	}

	if m.EmitMetrics != nil {
		if err := m.EmitMetrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emit_metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emit_metrics")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configv1 log control rule based on the context it is used
func (m *Configv1LogControlRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSample(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDropField(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplaceField(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmitMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1LogControlRule) contextValidateMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mode")
		}
		return err
	}

	return nil
}

func (m *Configv1LogControlRule) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *Configv1LogControlRule) contextValidateSample(ctx context.Context, formats strfmt.Registry) error {

	if m.Sample != nil {

		if swag.IsZero(m.Sample) { // not required
			return nil
		}

		if err := m.Sample.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sample")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sample")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1LogControlRule) contextValidateDropField(ctx context.Context, formats strfmt.Registry) error {

	if m.DropField != nil {

		if swag.IsZero(m.DropField) { // not required
			return nil
		}

		if err := m.DropField.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("drop_field")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("drop_field")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1LogControlRule) contextValidateReplaceField(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplaceField != nil {

		if swag.IsZero(m.ReplaceField) { // not required
			return nil
		}

		if err := m.ReplaceField.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replace_field")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replace_field")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1LogControlRule) contextValidateEmitMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.EmitMetrics != nil {

		if swag.IsZero(m.EmitMetrics) { // not required
			return nil
		}

		if err := m.EmitMetrics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emit_metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emit_metrics")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Configv1LogControlRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Configv1LogControlRule) UnmarshalBinary(b []byte) error {
	var res Configv1LogControlRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
