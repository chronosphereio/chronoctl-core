// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EmitMetricsMetricMode emit metrics metric mode
//
// swagger:model EmitMetricsMetricMode
type EmitMetricsMetricMode string

func NewEmitMetricsMetricMode(value EmitMetricsMetricMode) *EmitMetricsMetricMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EmitMetricsMetricMode.
func (m EmitMetricsMetricMode) Pointer() *EmitMetricsMetricMode {
	return &m
}

const (

	// EmitMetricsMetricModeCOUNTER captures enum value "COUNTER"
	EmitMetricsMetricModeCOUNTER EmitMetricsMetricMode = "COUNTER"

	// EmitMetricsMetricModeGAUGE captures enum value "GAUGE"
	EmitMetricsMetricModeGAUGE EmitMetricsMetricMode = "GAUGE"

	// EmitMetricsMetricModeHISTOGRAM captures enum value "HISTOGRAM"
	EmitMetricsMetricModeHISTOGRAM EmitMetricsMetricMode = "HISTOGRAM"
)

// for schema
var emitMetricsMetricModeEnum []interface{}

func init() {
	var res []EmitMetricsMetricMode
	if err := json.Unmarshal([]byte(`["COUNTER","GAUGE","HISTOGRAM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		emitMetricsMetricModeEnum = append(emitMetricsMetricModeEnum, v)
	}
}

func (m EmitMetricsMetricMode) validateEmitMetricsMetricModeEnum(path, location string, value EmitMetricsMetricMode) error {
	if err := validate.EnumCase(path, location, value, emitMetricsMetricModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this emit metrics metric mode
func (m EmitMetricsMetricMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEmitMetricsMetricModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this emit metrics metric mode based on context it is used
func (m EmitMetricsMetricMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
