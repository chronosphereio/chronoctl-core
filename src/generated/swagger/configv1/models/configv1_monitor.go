// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Configv1Monitor configv1 monitor
//
// swagger:model configv1Monitor
type Configv1Monitor struct {

	// The unique identifier of the Monitor. If a `slug` isn't provided, one is generated based on the `name` field. You can't modify this field after the Monitor is created.
	Slug string `json:"slug,omitempty"`

	// The name of the Monitor. You can modify this value after the Monitor is created.
	Name string `json:"name,omitempty"`

	// Timestamp of when the Monitor was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the Monitor was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// Slug of the bucket the monitor belongs to. Required if `collection_slug` isn't
	// set.
	BucketSlug string `json:"bucket_slug,omitempty"`

	// Slug of the collection the monitor belongs to. Required if `bucket_slug` isn't
	// set.
	CollectionSlug string `json:"collection_slug,omitempty"`

	// collection
	Collection *Configv1CollectionReference `json:"collection,omitempty"`

	// Required. Labels to include in notifications generated by this monitor, and can
	// be used to route alerts with notification overrides.
	Labels map[string]string `json:"labels,omitempty"`

	// Annotations are visible in notifications generated by this monitor.
	// They can be be templated with labels from notifications.
	Annotations map[string]string `json:"annotations,omitempty"`

	// signal grouping
	SignalGrouping *MonitorSignalGrouping `json:"signal_grouping,omitempty"`

	// series conditions
	SeriesConditions *MonitorSeriesConditions `json:"series_conditions,omitempty"`

	// Specifies the notification policy used to route alerts generated by the monitor.
	// If omitted, the notification policy is inherited from the monitor.
	NotificationPolicySlug string `json:"notification_policy_slug,omitempty"`

	// Specifies how often alerts are evaluated. Default: `60s`.
	IntervalSecs int32 `json:"interval_secs,omitempty"`

	// PromQL query to evaluate for the alert. If set, no other queries can be set.
	// Example: up{job=\"prometheus\"} == 0
	PrometheusQuery string `json:"prometheus_query,omitempty"`

	// Graphite query to evaluate for the alert. If set, no other queries can be set.
	// Example: sumSeries(stats.timers.*.mean_90)
	GraphiteQuery string `json:"graphite_query,omitempty"`

	// schedule
	Schedule *MonitorSchedule `json:"schedule,omitempty"`

	// Logging query to evaluate for the alert. If set, no other queries can be set.
	LoggingQuery string `json:"logging_query,omitempty"`
}

// Validate validates this configv1 monitor
func (m *Configv1Monitor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalGrouping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeriesConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1Monitor) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1Monitor) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1Monitor) validateCollection(formats strfmt.Registry) error {
	if swag.IsZero(m.Collection) { // not required
		return nil
	}

	if m.Collection != nil {
		if err := m.Collection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("collection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("collection")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Monitor) validateSignalGrouping(formats strfmt.Registry) error {
	if swag.IsZero(m.SignalGrouping) { // not required
		return nil
	}

	if m.SignalGrouping != nil {
		if err := m.SignalGrouping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signal_grouping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signal_grouping")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Monitor) validateSeriesConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.SeriesConditions) { // not required
		return nil
	}

	if m.SeriesConditions != nil {
		if err := m.SeriesConditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("series_conditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("series_conditions")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Monitor) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configv1 monitor based on the context it is used
func (m *Configv1Monitor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCollection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignalGrouping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeriesConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1Monitor) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1Monitor) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1Monitor) contextValidateCollection(ctx context.Context, formats strfmt.Registry) error {

	if m.Collection != nil {

		if swag.IsZero(m.Collection) { // not required
			return nil
		}

		if err := m.Collection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("collection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("collection")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Monitor) contextValidateSignalGrouping(ctx context.Context, formats strfmt.Registry) error {

	if m.SignalGrouping != nil {

		if swag.IsZero(m.SignalGrouping) { // not required
			return nil
		}

		if err := m.SignalGrouping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signal_grouping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signal_grouping")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Monitor) contextValidateSeriesConditions(ctx context.Context, formats strfmt.Registry) error {

	if m.SeriesConditions != nil {

		if swag.IsZero(m.SeriesConditions) { // not required
			return nil
		}

		if err := m.SeriesConditions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("series_conditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("series_conditions")
			}
			return err
		}
	}

	return nil
}

func (m *Configv1Monitor) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.Schedule != nil {

		if swag.IsZero(m.Schedule) { // not required
			return nil
		}

		if err := m.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Configv1Monitor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Configv1Monitor) UnmarshalBinary(b []byte) error {
	var res Configv1Monitor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
