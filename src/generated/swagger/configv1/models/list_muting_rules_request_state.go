// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ListMutingRulesRequestState list muting rules request state
//
// swagger:model ListMutingRulesRequestState
type ListMutingRulesRequestState string

func NewListMutingRulesRequestState(value ListMutingRulesRequestState) *ListMutingRulesRequestState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ListMutingRulesRequestState.
func (m ListMutingRulesRequestState) Pointer() *ListMutingRulesRequestState {
	return &m
}

const (

	// ListMutingRulesRequestStatePENDING captures enum value "PENDING"
	ListMutingRulesRequestStatePENDING ListMutingRulesRequestState = "PENDING"

	// ListMutingRulesRequestStateACTIVE captures enum value "ACTIVE"
	ListMutingRulesRequestStateACTIVE ListMutingRulesRequestState = "ACTIVE"

	// ListMutingRulesRequestStateEXPIRED captures enum value "EXPIRED"
	ListMutingRulesRequestStateEXPIRED ListMutingRulesRequestState = "EXPIRED"
)

// for schema
var listMutingRulesRequestStateEnum []interface{}

func init() {
	var res []ListMutingRulesRequestState
	if err := json.Unmarshal([]byte(`["PENDING","ACTIVE","EXPIRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listMutingRulesRequestStateEnum = append(listMutingRulesRequestStateEnum, v)
	}
}

func (m ListMutingRulesRequestState) validateListMutingRulesRequestStateEnum(path, location string, value ListMutingRulesRequestState) error {
	if err := validate.EnumCase(path, location, value, listMutingRulesRequestStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this list muting rules request state
func (m ListMutingRulesRequestState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateListMutingRulesRequestStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this list muting rules request state based on context it is used
func (m ListMutingRulesRequestState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
