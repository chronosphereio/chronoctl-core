// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Configv1CreateGrafanaDashboardRequest configv1 create grafana dashboard request
//
// swagger:model configv1CreateGrafanaDashboardRequest
type Configv1CreateGrafanaDashboardRequest struct {

	// grafana dashboard
	GrafanaDashboard *Configv1GrafanaDashboard `json:"grafana_dashboard,omitempty"`

	// If true, the GrafanaDashboard will not be created, and no response GrafanaDashboard will be returned. The response will return an error if the given GrafanaDashboard is invalid.
	DryRun bool `json:"dry_run,omitempty"`
}

// Validate validates this configv1 create grafana dashboard request
func (m *Configv1CreateGrafanaDashboardRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGrafanaDashboard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1CreateGrafanaDashboardRequest) validateGrafanaDashboard(formats strfmt.Registry) error {
	if swag.IsZero(m.GrafanaDashboard) { // not required
		return nil
	}

	if m.GrafanaDashboard != nil {
		if err := m.GrafanaDashboard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grafana_dashboard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grafana_dashboard")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configv1 create grafana dashboard request based on the context it is used
func (m *Configv1CreateGrafanaDashboardRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGrafanaDashboard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1CreateGrafanaDashboardRequest) contextValidateGrafanaDashboard(ctx context.Context, formats strfmt.Registry) error {

	if m.GrafanaDashboard != nil {

		if swag.IsZero(m.GrafanaDashboard) { // not required
			return nil
		}

		if err := m.GrafanaDashboard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grafana_dashboard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grafana_dashboard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Configv1CreateGrafanaDashboardRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Configv1CreateGrafanaDashboardRequest) UnmarshalBinary(b []byte) error {
	var res Configv1CreateGrafanaDashboardRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
