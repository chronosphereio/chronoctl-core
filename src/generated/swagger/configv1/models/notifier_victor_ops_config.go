// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NotifierVictorOpsConfig notifier victor ops config
//
// swagger:model NotifierVictorOpsConfig
type NotifierVictorOpsConfig struct {

	// http config
	HTTPConfig *NotifierHTTPConfig `json:"http_config,omitempty"`

	// Required VictorOps API key.
	APIKey string `json:"api_key,omitempty"`

	// Required VictorOps API URL.
	APIURL string `json:"api_url,omitempty"`

	// Required VictorOps routing key.
	RoutingKey string `json:"routing_key,omitempty"`

	// Describes the behavior of the alert (CRITICAL, WARNING, INFO).
	MessageType string `json:"message_type,omitempty"`

	// Summary of the alerted problem.
	EntityDisplayName string `json:"entity_display_name,omitempty"`

	// Long explanation of the alerted problem.
	StateMessage string `json:"state_message,omitempty"`

	// The monitoring tool the state message is from.
	MonitoringTool string `json:"monitoring_tool,omitempty"`

	// custom fields
	CustomFields map[string]string `json:"custom_fields,omitempty"`
}

// Validate validates this notifier victor ops config
func (m *NotifierVictorOpsConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTPConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotifierVictorOpsConfig) validateHTTPConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPConfig) { // not required
		return nil
	}

	if m.HTTPConfig != nil {
		if err := m.HTTPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this notifier victor ops config based on the context it is used
func (m *NotifierVictorOpsConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHTTPConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotifierVictorOpsConfig) contextValidateHTTPConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.HTTPConfig != nil {

		if swag.IsZero(m.HTTPConfig) { // not required
			return nil
		}

		if err := m.HTTPConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotifierVictorOpsConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotifierVictorOpsConfig) UnmarshalBinary(b []byte) error {
	var res NotifierVictorOpsConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
