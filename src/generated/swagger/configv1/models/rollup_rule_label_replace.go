// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RollupRuleLabelReplace LabelReplace can be used to either create or modify an existing label on
// incoming aggregator series, optionally based on a matching regex.
//
// swagger:model RollupRuleLabelReplace
type RollupRuleLabelReplace struct {

	// The source label name; this can be equal to dst_label_name to replace
	// this label’s value in place.
	SrcLabelName string `json:"src_label_name,omitempty"`

	// The new value for the label matching this LabelReplace. This supports
	// regex expansion if a label_value_regex is supplied, and is used as a
	// literal otherwise.
	NewLabelValue string `json:"new_label_value,omitempty"`

	// The optional destination label name; if this is present, a new tag with
	// this name is added to the aggregated series (or an existing tag with this
	// name is overwritten).
	// This can be omitted to replace the label’s value in-place, and should be
	// either omitted or equal to src_label_name for Graphite rules.
	DstLabelName string `json:"dst_label_name,omitempty"`

	// The optional regex that should match label value. If this regex is
	// provided, it needs to match the value of the label with the name
	// src_label_name to apply the replacement.
	// This supports capture groups to extract parts of the label value.
	// If omitted, the new_label_value is used as a literal to replace any
	// src_label_name label value.
	LabelValueRegex string `json:"label_value_regex,omitempty"`

	// If src_label_name differs from dst_label_name keep_label determines if
	// the label with src_label_name is kept.
	KeepLabel bool `json:"keep_label,omitempty"`
}

// Validate validates this rollup rule label replace
func (m *RollupRuleLabelReplace) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this rollup rule label replace based on context it is used
func (m *RollupRuleLabelReplace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RollupRuleLabelReplace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RollupRuleLabelReplace) UnmarshalBinary(b []byte) error {
	var res RollupRuleLabelReplace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
