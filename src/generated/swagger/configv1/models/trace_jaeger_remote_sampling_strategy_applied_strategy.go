// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TraceJaegerRemoteSamplingStrategyAppliedStrategy trace jaeger remote sampling strategy applied strategy
//
// swagger:model TraceJaegerRemoteSamplingStrategyAppliedStrategy
type TraceJaegerRemoteSamplingStrategyAppliedStrategy struct {

	// probabilistic strategy
	ProbabilisticStrategy *TraceJaegerRemoteSamplingStrategyProbabilisticStrategy `json:"probabilistic_strategy,omitempty"`

	// per operation strategies
	PerOperationStrategies *TraceJaegerRemoteSamplingStrategyPerOperationSamplingStrategies `json:"per_operation_strategies,omitempty"`

	// rate limiting strategy
	RateLimitingStrategy *TraceJaegerRemoteSamplingStrategyRateLimitingSamplingStrategy `json:"rate_limiting_strategy,omitempty"`
}

// Validate validates this trace jaeger remote sampling strategy applied strategy
func (m *TraceJaegerRemoteSamplingStrategyAppliedStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProbabilisticStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerOperationStrategies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateLimitingStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TraceJaegerRemoteSamplingStrategyAppliedStrategy) validateProbabilisticStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.ProbabilisticStrategy) { // not required
		return nil
	}

	if m.ProbabilisticStrategy != nil {
		if err := m.ProbabilisticStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("probabilistic_strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("probabilistic_strategy")
			}
			return err
		}
	}

	return nil
}

func (m *TraceJaegerRemoteSamplingStrategyAppliedStrategy) validatePerOperationStrategies(formats strfmt.Registry) error {
	if swag.IsZero(m.PerOperationStrategies) { // not required
		return nil
	}

	if m.PerOperationStrategies != nil {
		if err := m.PerOperationStrategies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("per_operation_strategies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("per_operation_strategies")
			}
			return err
		}
	}

	return nil
}

func (m *TraceJaegerRemoteSamplingStrategyAppliedStrategy) validateRateLimitingStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.RateLimitingStrategy) { // not required
		return nil
	}

	if m.RateLimitingStrategy != nil {
		if err := m.RateLimitingStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rate_limiting_strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rate_limiting_strategy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this trace jaeger remote sampling strategy applied strategy based on the context it is used
func (m *TraceJaegerRemoteSamplingStrategyAppliedStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProbabilisticStrategy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerOperationStrategies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRateLimitingStrategy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TraceJaegerRemoteSamplingStrategyAppliedStrategy) contextValidateProbabilisticStrategy(ctx context.Context, formats strfmt.Registry) error {

	if m.ProbabilisticStrategy != nil {

		if swag.IsZero(m.ProbabilisticStrategy) { // not required
			return nil
		}

		if err := m.ProbabilisticStrategy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("probabilistic_strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("probabilistic_strategy")
			}
			return err
		}
	}

	return nil
}

func (m *TraceJaegerRemoteSamplingStrategyAppliedStrategy) contextValidatePerOperationStrategies(ctx context.Context, formats strfmt.Registry) error {

	if m.PerOperationStrategies != nil {

		if swag.IsZero(m.PerOperationStrategies) { // not required
			return nil
		}

		if err := m.PerOperationStrategies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("per_operation_strategies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("per_operation_strategies")
			}
			return err
		}
	}

	return nil
}

func (m *TraceJaegerRemoteSamplingStrategyAppliedStrategy) contextValidateRateLimitingStrategy(ctx context.Context, formats strfmt.Registry) error {

	if m.RateLimitingStrategy != nil {

		if swag.IsZero(m.RateLimitingStrategy) { // not required
			return nil
		}

		if err := m.RateLimitingStrategy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rate_limiting_strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rate_limiting_strategy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TraceJaegerRemoteSamplingStrategyAppliedStrategy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TraceJaegerRemoteSamplingStrategyAppliedStrategy) UnmarshalBinary(b []byte) error {
	var res TraceJaegerRemoteSamplingStrategyAppliedStrategy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
