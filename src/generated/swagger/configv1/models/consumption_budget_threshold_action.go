// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConsumptionBudgetThresholdAction consumption budget threshold action
//
// swagger:model ConsumptionBudgetThresholdAction
type ConsumptionBudgetThresholdAction string

func NewConsumptionBudgetThresholdAction(value ConsumptionBudgetThresholdAction) *ConsumptionBudgetThresholdAction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConsumptionBudgetThresholdAction.
func (m ConsumptionBudgetThresholdAction) Pointer() *ConsumptionBudgetThresholdAction {
	return &m
}

const (

	// ConsumptionBudgetThresholdActionALERTWARN captures enum value "ALERT_WARN"
	ConsumptionBudgetThresholdActionALERTWARN ConsumptionBudgetThresholdAction = "ALERT_WARN"

	// ConsumptionBudgetThresholdActionALERTCRITICAL captures enum value "ALERT_CRITICAL"
	ConsumptionBudgetThresholdActionALERTCRITICAL ConsumptionBudgetThresholdAction = "ALERT_CRITICAL"

	// ConsumptionBudgetThresholdActionDROP captures enum value "DROP"
	ConsumptionBudgetThresholdActionDROP ConsumptionBudgetThresholdAction = "DROP"
)

// for schema
var consumptionBudgetThresholdActionEnum []interface{}

func init() {
	var res []ConsumptionBudgetThresholdAction
	if err := json.Unmarshal([]byte(`["ALERT_WARN","ALERT_CRITICAL","DROP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consumptionBudgetThresholdActionEnum = append(consumptionBudgetThresholdActionEnum, v)
	}
}

func (m ConsumptionBudgetThresholdAction) validateConsumptionBudgetThresholdActionEnum(path, location string, value ConsumptionBudgetThresholdAction) error {
	if err := validate.EnumCase(path, location, value, consumptionBudgetThresholdActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this consumption budget threshold action
func (m ConsumptionBudgetThresholdAction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConsumptionBudgetThresholdActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this consumption budget threshold action based on context it is used
func (m ConsumptionBudgetThresholdAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
