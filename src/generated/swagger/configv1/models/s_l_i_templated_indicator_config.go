// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SLITemplatedIndicatorConfig Configuration for the different supported templated indicators.
//
// swagger:model SLITemplatedIndicatorConfig
type SLITemplatedIndicatorConfig struct {

	// Indicates which Chronosphere discovery job is used to build the
	// SLI queries.
	DiscoveryJobSlug string `json:"discovery_job_slug,omitempty"`

	// This overrides the equivalent ComponentDiscovery.MetricMetadata field
	// when present. This is a common change for RPC components.
	EndpointLabel string `json:"endpoint_label,omitempty"`

	// availability indicator
	AvailabilityIndicator *SLIAvailabilityIndicatorConfig `json:"availability_indicator,omitempty"`

	// latency indicator
	LatencyIndicator *SLILatencyIndicatorConfig `json:"latency_indicator,omitempty"`
}

// Validate validates this s l i templated indicator config
func (m *SLITemplatedIndicatorConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatencyIndicator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SLITemplatedIndicatorConfig) validateAvailabilityIndicator(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailabilityIndicator) { // not required
		return nil
	}

	if m.AvailabilityIndicator != nil {
		if err := m.AvailabilityIndicator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability_indicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availability_indicator")
			}
			return err
		}
	}

	return nil
}

func (m *SLITemplatedIndicatorConfig) validateLatencyIndicator(formats strfmt.Registry) error {
	if swag.IsZero(m.LatencyIndicator) { // not required
		return nil
	}

	if m.LatencyIndicator != nil {
		if err := m.LatencyIndicator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency_indicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latency_indicator")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this s l i templated indicator config based on the context it is used
func (m *SLITemplatedIndicatorConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailabilityIndicator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatencyIndicator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SLITemplatedIndicatorConfig) contextValidateAvailabilityIndicator(ctx context.Context, formats strfmt.Registry) error {

	if m.AvailabilityIndicator != nil {

		if swag.IsZero(m.AvailabilityIndicator) { // not required
			return nil
		}

		if err := m.AvailabilityIndicator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability_indicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availability_indicator")
			}
			return err
		}
	}

	return nil
}

func (m *SLITemplatedIndicatorConfig) contextValidateLatencyIndicator(ctx context.Context, formats strfmt.Registry) error {

	if m.LatencyIndicator != nil {

		if swag.IsZero(m.LatencyIndicator) { // not required
			return nil
		}

		if err := m.LatencyIndicator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latency_indicator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latency_indicator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SLITemplatedIndicatorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SLITemplatedIndicatorConfig) UnmarshalBinary(b []byte) error {
	var res SLITemplatedIndicatorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
