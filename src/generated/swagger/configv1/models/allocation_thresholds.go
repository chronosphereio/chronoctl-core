// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AllocationThresholds Thresholds define strict quota limits for each metrics license.
//
// swagger:model AllocationThresholds
type AllocationThresholds struct {

	// license
	License ResourcePoolsLicense `json:"license,omitempty"`

	// all priorities
	AllPriorities *AllocationThreshold `json:"all_priorities,omitempty"`

	// default and low priority
	DefaultAndLowPriority *AllocationThreshold `json:"default_and_low_priority,omitempty"`

	// low priority
	LowPriority *AllocationThreshold `json:"low_priority,omitempty"`
}

// Validate validates this allocation thresholds
func (m *AllocationThresholds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllPriorities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultAndLowPriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLowPriority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllocationThresholds) validateLicense(formats strfmt.Registry) error {
	if swag.IsZero(m.License) { // not required
		return nil
	}

	if err := m.License.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("license")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("license")
		}
		return err
	}

	return nil
}

func (m *AllocationThresholds) validateAllPriorities(formats strfmt.Registry) error {
	if swag.IsZero(m.AllPriorities) { // not required
		return nil
	}

	if m.AllPriorities != nil {
		if err := m.AllPriorities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("all_priorities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("all_priorities")
			}
			return err
		}
	}

	return nil
}

func (m *AllocationThresholds) validateDefaultAndLowPriority(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultAndLowPriority) { // not required
		return nil
	}

	if m.DefaultAndLowPriority != nil {
		if err := m.DefaultAndLowPriority.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_and_low_priority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_and_low_priority")
			}
			return err
		}
	}

	return nil
}

func (m *AllocationThresholds) validateLowPriority(formats strfmt.Registry) error {
	if swag.IsZero(m.LowPriority) { // not required
		return nil
	}

	if m.LowPriority != nil {
		if err := m.LowPriority.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("low_priority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("low_priority")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this allocation thresholds based on the context it is used
func (m *AllocationThresholds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLicense(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAllPriorities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultAndLowPriority(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLowPriority(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllocationThresholds) contextValidateLicense(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.License) { // not required
		return nil
	}

	if err := m.License.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("license")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("license")
		}
		return err
	}

	return nil
}

func (m *AllocationThresholds) contextValidateAllPriorities(ctx context.Context, formats strfmt.Registry) error {

	if m.AllPriorities != nil {

		if swag.IsZero(m.AllPriorities) { // not required
			return nil
		}

		if err := m.AllPriorities.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("all_priorities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("all_priorities")
			}
			return err
		}
	}

	return nil
}

func (m *AllocationThresholds) contextValidateDefaultAndLowPriority(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultAndLowPriority != nil {

		if swag.IsZero(m.DefaultAndLowPriority) { // not required
			return nil
		}

		if err := m.DefaultAndLowPriority.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_and_low_priority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_and_low_priority")
			}
			return err
		}
	}

	return nil
}

func (m *AllocationThresholds) contextValidateLowPriority(ctx context.Context, formats strfmt.Registry) error {

	if m.LowPriority != nil {

		if swag.IsZero(m.LowPriority) { // not required
			return nil
		}

		if err := m.LowPriority.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("low_priority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("low_priority")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AllocationThresholds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllocationThresholds) UnmarshalBinary(b []byte) error {
	var res AllocationThresholds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
