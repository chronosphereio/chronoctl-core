// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Configv1ServiceAccount configv1 service account
//
// swagger:model configv1ServiceAccount
type Configv1ServiceAccount struct {

	// The unique identifier of the ServiceAccount. If a `slug` isn't provided, one is generated based on the `name` field. You can't modify this field after the ServiceAccount is created.
	Slug string `json:"slug,omitempty"`

	// The name of the ServiceAccount. You can modify this value after the ServiceAccount is created.
	Name string `json:"name,omitempty"`

	// Timestamp of when the ServiceAccount was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the ServiceAccount was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// Generated API token of the service account. Cannot be set by clients.
	//
	// The token is set only once by the server in the `CreateServiceAccount` response.
	// The `ReadServiceAccount` response always returns an empty token. Therefore, when
	// creating a service account, ensure you securely store the response token.
	// If you lose the token, you must delete and recreate the service account to
	// generate a new token.
	// Read Only: true
	Token string `json:"token,omitempty"`

	// The unique email user for this service account. Cannot be set by clients.
	// Read Only: true
	Email string `json:"email,omitempty"`

	// If set, grants the service account access to all Chronosphere APIs, including
	// resource configuration and metric data within the access controls defined by the
	// service account's team membership.
	//
	// Only one of `unrestricted` or `metrics_restriction` must be set.
	Unrestricted bool `json:"unrestricted,omitempty"`

	// metrics restriction
	MetricsRestriction *ServiceAccountMetricsRestriction `json:"metrics_restriction,omitempty"`
}

// Validate validates this configv1 service account
func (m *Configv1ServiceAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricsRestriction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1ServiceAccount) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1ServiceAccount) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1ServiceAccount) validateMetricsRestriction(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricsRestriction) { // not required
		return nil
	}

	if m.MetricsRestriction != nil {
		if err := m.MetricsRestriction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics_restriction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metrics_restriction")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configv1 service account based on the context it is used
func (m *Configv1ServiceAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricsRestriction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1ServiceAccount) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1ServiceAccount) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1ServiceAccount) contextValidateToken(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "token", "body", string(m.Token)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1ServiceAccount) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "email", "body", string(m.Email)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1ServiceAccount) contextValidateMetricsRestriction(ctx context.Context, formats strfmt.Registry) error {

	if m.MetricsRestriction != nil {

		if swag.IsZero(m.MetricsRestriction) { // not required
			return nil
		}

		if err := m.MetricsRestriction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics_restriction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metrics_restriction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Configv1ServiceAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Configv1ServiceAccount) UnmarshalBinary(b []byte) error {
	var res Configv1ServiceAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
