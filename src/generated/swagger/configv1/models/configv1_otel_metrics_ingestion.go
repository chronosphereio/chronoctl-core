// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Configv1OtelMetricsIngestion configv1 otel metrics ingestion
//
// swagger:model configv1OtelMetricsIngestion
type Configv1OtelMetricsIngestion struct {

	// Timestamp of when the OtelMetricsIngestion was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the OtelMetricsIngestion was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// resource attributes
	ResourceAttributes *OtelMetricsIngestionResourceAttributes `json:"resource_attributes,omitempty"`
}

// Validate validates this configv1 otel metrics ingestion
func (m *Configv1OtelMetricsIngestion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1OtelMetricsIngestion) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1OtelMetricsIngestion) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Configv1OtelMetricsIngestion) validateResourceAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceAttributes) { // not required
		return nil
	}

	if m.ResourceAttributes != nil {
		if err := m.ResourceAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_attributes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configv1 otel metrics ingestion based on the context it is used
func (m *Configv1OtelMetricsIngestion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configv1OtelMetricsIngestion) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1OtelMetricsIngestion) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Configv1OtelMetricsIngestion) contextValidateResourceAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceAttributes != nil {

		if swag.IsZero(m.ResourceAttributes) { // not required
			return nil
		}

		if err := m.ResourceAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Configv1OtelMetricsIngestion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Configv1OtelMetricsIngestion) UnmarshalBinary(b []byte) error {
	var res Configv1OtelMetricsIngestion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
