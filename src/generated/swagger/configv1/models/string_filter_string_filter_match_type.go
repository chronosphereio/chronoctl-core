// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StringFilterStringFilterMatchType string filter string filter match type
//
// swagger:model StringFilterStringFilterMatchType
type StringFilterStringFilterMatchType string

func NewStringFilterStringFilterMatchType(value StringFilterStringFilterMatchType) *StringFilterStringFilterMatchType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated StringFilterStringFilterMatchType.
func (m StringFilterStringFilterMatchType) Pointer() *StringFilterStringFilterMatchType {
	return &m
}

const (

	// StringFilterStringFilterMatchTypeEXACT captures enum value "EXACT"
	StringFilterStringFilterMatchTypeEXACT StringFilterStringFilterMatchType = "EXACT"

	// StringFilterStringFilterMatchTypeREGEX captures enum value "REGEX"
	StringFilterStringFilterMatchTypeREGEX StringFilterStringFilterMatchType = "REGEX"

	// StringFilterStringFilterMatchTypeEXACTNEGATION captures enum value "EXACT_NEGATION"
	StringFilterStringFilterMatchTypeEXACTNEGATION StringFilterStringFilterMatchType = "EXACT_NEGATION"

	// StringFilterStringFilterMatchTypeREGEXNEGATION captures enum value "REGEX_NEGATION"
	StringFilterStringFilterMatchTypeREGEXNEGATION StringFilterStringFilterMatchType = "REGEX_NEGATION"

	// StringFilterStringFilterMatchTypeIN captures enum value "IN"
	StringFilterStringFilterMatchTypeIN StringFilterStringFilterMatchType = "IN"

	// StringFilterStringFilterMatchTypeNOTIN captures enum value "NOT_IN"
	StringFilterStringFilterMatchTypeNOTIN StringFilterStringFilterMatchType = "NOT_IN"
)

// for schema
var stringFilterStringFilterMatchTypeEnum []interface{}

func init() {
	var res []StringFilterStringFilterMatchType
	if err := json.Unmarshal([]byte(`["EXACT","REGEX","EXACT_NEGATION","REGEX_NEGATION","IN","NOT_IN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stringFilterStringFilterMatchTypeEnum = append(stringFilterStringFilterMatchTypeEnum, v)
	}
}

func (m StringFilterStringFilterMatchType) validateStringFilterStringFilterMatchTypeEnum(path, location string, value StringFilterStringFilterMatchType) error {
	if err := validate.EnumCase(path, location, value, stringFilterStringFilterMatchTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this string filter string filter match type
func (m StringFilterStringFilterMatchType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStringFilterStringFilterMatchTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this string filter string filter match type based on context it is used
func (m StringFilterStringFilterMatchType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
