// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MetricsRestrictionPermission metrics restriction permission
//
// swagger:model MetricsRestrictionPermission
type MetricsRestrictionPermission string

func NewMetricsRestrictionPermission(value MetricsRestrictionPermission) *MetricsRestrictionPermission {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MetricsRestrictionPermission.
func (m MetricsRestrictionPermission) Pointer() *MetricsRestrictionPermission {
	return &m
}

const (

	// MetricsRestrictionPermissionREAD captures enum value "READ"
	MetricsRestrictionPermissionREAD MetricsRestrictionPermission = "READ"

	// MetricsRestrictionPermissionWRITE captures enum value "WRITE"
	MetricsRestrictionPermissionWRITE MetricsRestrictionPermission = "WRITE"

	// MetricsRestrictionPermissionREADWRITE captures enum value "READ_WRITE"
	MetricsRestrictionPermissionREADWRITE MetricsRestrictionPermission = "READ_WRITE"
)

// for schema
var metricsRestrictionPermissionEnum []interface{}

func init() {
	var res []MetricsRestrictionPermission
	if err := json.Unmarshal([]byte(`["READ","WRITE","READ_WRITE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricsRestrictionPermissionEnum = append(metricsRestrictionPermissionEnum, v)
	}
}

func (m MetricsRestrictionPermission) validateMetricsRestrictionPermissionEnum(path, location string, value MetricsRestrictionPermission) error {
	if err := validate.EnumCase(path, location, value, metricsRestrictionPermissionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this metrics restriction permission
func (m MetricsRestrictionPermission) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMetricsRestrictionPermissionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this metrics restriction permission based on context it is used
func (m MetricsRestrictionPermission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
