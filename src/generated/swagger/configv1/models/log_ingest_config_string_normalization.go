// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogIngestConfigStringNormalization StringNormalization defines how to extract and transform string values from log fields.
//
// swagger:model LogIngestConfigStringNormalization
type LogIngestConfigStringNormalization struct {

	// List of field paths to check for values, in priority order.
	// The first non-empty value found will be used.
	Source []*Configv1LogFieldPath `json:"source"`

	// Default value to use when no source fields contain values.
	DefaultValue string `json:"default_value,omitempty"`

	// Optional mapping to normalize values.
	// For example: {"warn": "WARNING", "err": "ERROR"} to standardize severity levels.
	ValueMap map[string]string `json:"value_map,omitempty"`

	// Optional regex patterns to extract and sanitize values.
	// Each pattern must have exactly one capturing group that will be used as the result.
	// For example: "^.*level=([A-Z]+).*$" to extract log level from a string.
	SanitizePatterns []string `json:"sanitize_patterns"`
}

// Validate validates this log ingest config string normalization
func (m *LogIngestConfigStringNormalization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogIngestConfigStringNormalization) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	for i := 0; i < len(m.Source); i++ {
		if swag.IsZero(m.Source[i]) { // not required
			continue
		}

		if m.Source[i] != nil {
			if err := m.Source[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("source" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("source" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this log ingest config string normalization based on the context it is used
func (m *LogIngestConfigStringNormalization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogIngestConfigStringNormalization) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Source); i++ {

		if m.Source[i] != nil {

			if swag.IsZero(m.Source[i]) { // not required
				return nil
			}

			if err := m.Source[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("source" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("source" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogIngestConfigStringNormalization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogIngestConfigStringNormalization) UnmarshalBinary(b []byte) error {
	var res LogIngestConfigStringNormalization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
