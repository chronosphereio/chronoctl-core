// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GaugeAggregationType gauge aggregation type
//
// swagger:model GaugeAggregationType
type GaugeAggregationType string

func NewGaugeAggregationType(value GaugeAggregationType) *GaugeAggregationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated GaugeAggregationType.
func (m GaugeAggregationType) Pointer() *GaugeAggregationType {
	return &m
}

const (

	// GaugeAggregationTypeLAST captures enum value "LAST"
	GaugeAggregationTypeLAST GaugeAggregationType = "LAST"

	// GaugeAggregationTypeMIN captures enum value "MIN"
	GaugeAggregationTypeMIN GaugeAggregationType = "MIN"

	// GaugeAggregationTypeMAX captures enum value "MAX"
	GaugeAggregationTypeMAX GaugeAggregationType = "MAX"
)

// for schema
var gaugeAggregationTypeEnum []interface{}

func init() {
	var res []GaugeAggregationType
	if err := json.Unmarshal([]byte(`["LAST","MIN","MAX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gaugeAggregationTypeEnum = append(gaugeAggregationTypeEnum, v)
	}
}

func (m GaugeAggregationType) validateGaugeAggregationTypeEnum(path, location string, value GaugeAggregationType) error {
	if err := validate.EnumCase(path, location, value, gaugeAggregationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this gauge aggregation type
func (m GaugeAggregationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGaugeAggregationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this gauge aggregation type based on context it is used
func (m GaugeAggregationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
