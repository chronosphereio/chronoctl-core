// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReplaceFieldReplaceMode  - HASH: Hash the selected content.
//   - STATIC_VALUE: Replace the selected content with a static string.
//   - MAPPED_VALUE: Replace the selected content with a mapped value.
//
// swagger:model ReplaceFieldReplaceMode
type ReplaceFieldReplaceMode string

func NewReplaceFieldReplaceMode(value ReplaceFieldReplaceMode) *ReplaceFieldReplaceMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ReplaceFieldReplaceMode.
func (m ReplaceFieldReplaceMode) Pointer() *ReplaceFieldReplaceMode {
	return &m
}

const (

	// ReplaceFieldReplaceModeHASH captures enum value "HASH"
	ReplaceFieldReplaceModeHASH ReplaceFieldReplaceMode = "HASH"

	// ReplaceFieldReplaceModeSTATICVALUE captures enum value "STATIC_VALUE"
	ReplaceFieldReplaceModeSTATICVALUE ReplaceFieldReplaceMode = "STATIC_VALUE"

	// ReplaceFieldReplaceModeMAPPEDVALUE captures enum value "MAPPED_VALUE"
	ReplaceFieldReplaceModeMAPPEDVALUE ReplaceFieldReplaceMode = "MAPPED_VALUE"
)

// for schema
var replaceFieldReplaceModeEnum []interface{}

func init() {
	var res []ReplaceFieldReplaceMode
	if err := json.Unmarshal([]byte(`["HASH","STATIC_VALUE","MAPPED_VALUE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replaceFieldReplaceModeEnum = append(replaceFieldReplaceModeEnum, v)
	}
}

func (m ReplaceFieldReplaceMode) validateReplaceFieldReplaceModeEnum(path, location string, value ReplaceFieldReplaceMode) error {
	if err := validate.EnumCase(path, location, value, replaceFieldReplaceModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this replace field replace mode
func (m ReplaceFieldReplaceMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReplaceFieldReplaceModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this replace field replace mode based on context it is used
func (m ReplaceFieldReplaceMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
