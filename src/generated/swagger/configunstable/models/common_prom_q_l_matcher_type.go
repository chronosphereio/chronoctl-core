// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommonPromQLMatcherType common prom q l matcher type
//
// swagger:model commonPromQLMatcherType
type CommonPromQLMatcherType string

func NewCommonPromQLMatcherType(value CommonPromQLMatcherType) *CommonPromQLMatcherType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CommonPromQLMatcherType.
func (m CommonPromQLMatcherType) Pointer() *CommonPromQLMatcherType {
	return &m
}

const (

	// CommonPromQLMatcherTypeMatchEqual captures enum value "MatchEqual"
	CommonPromQLMatcherTypeMatchEqual CommonPromQLMatcherType = "MatchEqual"

	// CommonPromQLMatcherTypeMatchRegexp captures enum value "MatchRegexp"
	CommonPromQLMatcherTypeMatchRegexp CommonPromQLMatcherType = "MatchRegexp"

	// CommonPromQLMatcherTypeMatchNotEqual captures enum value "MatchNotEqual"
	CommonPromQLMatcherTypeMatchNotEqual CommonPromQLMatcherType = "MatchNotEqual"

	// CommonPromQLMatcherTypeMatchNotRegexp captures enum value "MatchNotRegexp"
	CommonPromQLMatcherTypeMatchNotRegexp CommonPromQLMatcherType = "MatchNotRegexp"
)

// for schema
var commonPromQLMatcherTypeEnum []interface{}

func init() {
	var res []CommonPromQLMatcherType
	if err := json.Unmarshal([]byte(`["MatchEqual","MatchRegexp","MatchNotEqual","MatchNotRegexp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonPromQLMatcherTypeEnum = append(commonPromQLMatcherTypeEnum, v)
	}
}

func (m CommonPromQLMatcherType) validateCommonPromQLMatcherTypeEnum(path, location string, value CommonPromQLMatcherType) error {
	if err := validate.EnumCase(path, location, value, commonPromQLMatcherTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this common prom q l matcher type
func (m CommonPromQLMatcherType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommonPromQLMatcherTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this common prom q l matcher type based on context it is used
func (m CommonPromQLMatcherType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
