// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PartitionFilterOperator partition filter operator
//
// swagger:model PartitionFilterOperator
type PartitionFilterOperator string

func NewPartitionFilterOperator(value PartitionFilterOperator) *PartitionFilterOperator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PartitionFilterOperator.
func (m PartitionFilterOperator) Pointer() *PartitionFilterOperator {
	return &m
}

const (

	// PartitionFilterOperatorIN captures enum value "IN"
	PartitionFilterOperatorIN PartitionFilterOperator = "IN"

	// PartitionFilterOperatorNOTIN captures enum value "NOT_IN"
	PartitionFilterOperatorNOTIN PartitionFilterOperator = "NOT_IN"
)

// for schema
var partitionFilterOperatorEnum []interface{}

func init() {
	var res []PartitionFilterOperator
	if err := json.Unmarshal([]byte(`["IN","NOT_IN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		partitionFilterOperatorEnum = append(partitionFilterOperatorEnum, v)
	}
}

func (m PartitionFilterOperator) validatePartitionFilterOperatorEnum(path, location string, value PartitionFilterOperator) error {
	if err := validate.EnumCase(path, location, value, partitionFilterOperatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this partition filter operator
func (m PartitionFilterOperator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePartitionFilterOperatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this partition filter operator based on context it is used
func (m PartitionFilterOperator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
