// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigunstableNoopEntity configunstable noop entity
//
// swagger:model configunstableNoopEntity
type ConfigunstableNoopEntity struct {

	// Unique identifier of the NoopEntity. If slug is not provided, one will be generated based of the name field. Cannot be modified after the NoopEntity is created.
	Slug string `json:"slug,omitempty"`

	// Required name of the NoopEntity. May be modified after the NoopEntity is created.
	Name string `json:"name,omitempty"`

	// Timestamp of when the NoopEntity was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the NoopEntity was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// nested enum
	NestedEnum NoopEntityNestedEnum `json:"nested_enum,omitempty"`

	// enum
	Enum ConfigunstableNoopEnum `json:"enum,omitempty"`
}

// Validate validates this configunstable noop entity
func (m *ConfigunstableNoopEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNestedEnum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableNoopEntity) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableNoopEntity) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableNoopEntity) validateNestedEnum(formats strfmt.Registry) error {
	if swag.IsZero(m.NestedEnum) { // not required
		return nil
	}

	if err := m.NestedEnum.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nested_enum")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("nested_enum")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableNoopEntity) validateEnum(formats strfmt.Registry) error {
	if swag.IsZero(m.Enum) { // not required
		return nil
	}

	if err := m.Enum.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("enum")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("enum")
		}
		return err
	}

	return nil
}

// ContextValidate validate this configunstable noop entity based on the context it is used
func (m *ConfigunstableNoopEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNestedEnum(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnum(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableNoopEntity) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableNoopEntity) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableNoopEntity) contextValidateNestedEnum(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.NestedEnum) { // not required
		return nil
	}

	if err := m.NestedEnum.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nested_enum")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("nested_enum")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableNoopEntity) contextValidateEnum(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Enum) { // not required
		return nil
	}

	if err := m.Enum.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("enum")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("enum")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigunstableNoopEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigunstableNoopEntity) UnmarshalBinary(b []byte) error {
	var res ConfigunstableNoopEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
