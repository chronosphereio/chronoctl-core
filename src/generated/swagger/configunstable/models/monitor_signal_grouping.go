// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MonitorSignalGrouping SignalGrouping defines how the set of series from the query are split into signals.
//
// swagger:model MonitorSignalGrouping
type MonitorSignalGrouping struct {

	// Set of labels names used to split series into signals.
	// Each unique combination of labels will result in its own signal.
	// For example, if label_names is ["service", "code"] then all series including labels {service="foo",code="404"}
	// will be grouped together in the same signal.
	//
	// Cannot be used if graphite_query is set.
	LabelNames []string `json:"label_names"`

	// If this is true, each series will have its own signal.
	// If this is true then label_names cannot be set.
	SignalPerSeries bool `json:"signal_per_series,omitempty"`
}

// Validate validates this monitor signal grouping
func (m *MonitorSignalGrouping) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this monitor signal grouping based on context it is used
func (m *MonitorSignalGrouping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MonitorSignalGrouping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitorSignalGrouping) UnmarshalBinary(b []byte) error {
	var res MonitorSignalGrouping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
