// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RuleEmitMetrics EmitMetrics is the configuration for a rule to convert logs to metrics.
//
// swagger:model RuleEmitMetrics
type RuleEmitMetrics struct {

	// metric mode
	MetricMode EmitMetricsmetricMode `json:"metric_mode,omitempty"`

	// Name is the name of the metric to emit.
	Name string `json:"name,omitempty"`

	// Metric description is the description of the metric.
	MetricDescription string `json:"metric_description,omitempty"`

	// Labels specify the labels to add to the metric.
	//
	// only one of the following should be specified depending on the type of metric
	Labels []*ConfigunstableLabel `json:"labels"`

	// counter metric
	CounterMetric *EmitMetricscounterMetric `json:"counter_metric,omitempty"`

	// gauge metric
	GaugeMetric *EmitMetricsgaugeMetric `json:"gauge_metric,omitempty"`

	// histogram metric
	HistogramMetric *EmitMetricshistogramMetric `json:"histogram_metric,omitempty"`
}

// Validate validates this rule emit metrics
func (m *RuleEmitMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetricMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounterMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGaugeMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistogramMetric(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuleEmitMetrics) validateMetricMode(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricMode) { // not required
		return nil
	}

	if err := m.MetricMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metric_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("metric_mode")
		}
		return err
	}

	return nil
}

func (m *RuleEmitMetrics) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RuleEmitMetrics) validateCounterMetric(formats strfmt.Registry) error {
	if swag.IsZero(m.CounterMetric) { // not required
		return nil
	}

	if m.CounterMetric != nil {
		if err := m.CounterMetric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counter_metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("counter_metric")
			}
			return err
		}
	}

	return nil
}

func (m *RuleEmitMetrics) validateGaugeMetric(formats strfmt.Registry) error {
	if swag.IsZero(m.GaugeMetric) { // not required
		return nil
	}

	if m.GaugeMetric != nil {
		if err := m.GaugeMetric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gauge_metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gauge_metric")
			}
			return err
		}
	}

	return nil
}

func (m *RuleEmitMetrics) validateHistogramMetric(formats strfmt.Registry) error {
	if swag.IsZero(m.HistogramMetric) { // not required
		return nil
	}

	if m.HistogramMetric != nil {
		if err := m.HistogramMetric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("histogram_metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("histogram_metric")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rule emit metrics based on the context it is used
func (m *RuleEmitMetrics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetricMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCounterMetric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGaugeMetric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHistogramMetric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuleEmitMetrics) contextValidateMetricMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.MetricMode) { // not required
		return nil
	}

	if err := m.MetricMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metric_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("metric_mode")
		}
		return err
	}

	return nil
}

func (m *RuleEmitMetrics) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Labels); i++ {

		if m.Labels[i] != nil {

			if swag.IsZero(m.Labels[i]) { // not required
				return nil
			}

			if err := m.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RuleEmitMetrics) contextValidateCounterMetric(ctx context.Context, formats strfmt.Registry) error {

	if m.CounterMetric != nil {

		if swag.IsZero(m.CounterMetric) { // not required
			return nil
		}

		if err := m.CounterMetric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counter_metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("counter_metric")
			}
			return err
		}
	}

	return nil
}

func (m *RuleEmitMetrics) contextValidateGaugeMetric(ctx context.Context, formats strfmt.Registry) error {

	if m.GaugeMetric != nil {

		if swag.IsZero(m.GaugeMetric) { // not required
			return nil
		}

		if err := m.GaugeMetric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gauge_metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gauge_metric")
			}
			return err
		}
	}

	return nil
}

func (m *RuleEmitMetrics) contextValidateHistogramMetric(ctx context.Context, formats strfmt.Registry) error {

	if m.HistogramMetric != nil {

		if swag.IsZero(m.HistogramMetric) { // not required
			return nil
		}

		if err := m.HistogramMetric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("histogram_metric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("histogram_metric")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RuleEmitMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuleEmitMetrics) UnmarshalBinary(b []byte) error {
	var res RuleEmitMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
