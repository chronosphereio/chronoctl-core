// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SyncPrometheusChronoConfig sync prometheus chrono config
//
// swagger:model SyncPrometheusChronoConfig
type SyncPrometheusChronoConfig struct {

	// use collections
	UseCollections SyncPrometheusContainerType `json:"use_collections,omitempty"`

	// collections config
	CollectionsConfig *ChronoConfigCollectionsConfig `json:"collections_config,omitempty"`

	// severity mappings
	SeverityMappings []*ChronoConfigSeverityMapping `json:"severity_mappings"`

	// Customer-specific name of alert rule label used to determine severity.
	// If omitted, the Chronosphere default of "severity" is used.
	SeverityLabelName string `json:"severity_label_name,omitempty"`

	// TODO: before configv1 - is this still required? does chronoctl set it?
	AssignMonitorSlugs bool `json:"assign_monitor_slugs,omitempty"`

	// If true, each monitor will not group alert notifications.
	MonitorSignalPerSeries bool `json:"monitor_signal_per_series,omitempty"`

	// Controls whether we try to infer monitor signals from the alertmanager route tree.
	InferMonitorSignals bool `json:"infer_monitor_signals,omitempty"`

	// If true, we set the the group_across_severities flag on notification policies to
	// true, so that warn and critical notifications are grouped together.
	//
	// TODO:  i don't think we export this on notification policies in the public API,
	//        we may need to figure out a better solution here (do we need to expose
	//        in both, or do we need to update the comment to stop referring to the
	//        option on the policy?)
	GroupAcrossSeverities bool `json:"group_across_severities,omitempty"`

	// If true, alert rule expressions that are not in the form of "expr op number" (e.g. "sum(stuff) > 5")
	// will be executed as-is.
	// Without this set, expressions will be converted to binary expressions (e.g. "x > y" as "(x - y) > 0").
	//
	// TODO: before configv1 - is this still required? does chronoctl set it?
	ExistsOpSupported bool `json:"exists_op_supported,omitempty"`
}

// Validate validates this sync prometheus chrono config
func (m *SyncPrometheusChronoConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUseCollections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollectionsConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverityMappings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SyncPrometheusChronoConfig) validateUseCollections(formats strfmt.Registry) error {
	if swag.IsZero(m.UseCollections) { // not required
		return nil
	}

	if err := m.UseCollections.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("use_collections")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("use_collections")
		}
		return err
	}

	return nil
}

func (m *SyncPrometheusChronoConfig) validateCollectionsConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.CollectionsConfig) { // not required
		return nil
	}

	if m.CollectionsConfig != nil {
		if err := m.CollectionsConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("collections_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("collections_config")
			}
			return err
		}
	}

	return nil
}

func (m *SyncPrometheusChronoConfig) validateSeverityMappings(formats strfmt.Registry) error {
	if swag.IsZero(m.SeverityMappings) { // not required
		return nil
	}

	for i := 0; i < len(m.SeverityMappings); i++ {
		if swag.IsZero(m.SeverityMappings[i]) { // not required
			continue
		}

		if m.SeverityMappings[i] != nil {
			if err := m.SeverityMappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severity_mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severity_mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sync prometheus chrono config based on the context it is used
func (m *SyncPrometheusChronoConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUseCollections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCollectionsConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverityMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SyncPrometheusChronoConfig) contextValidateUseCollections(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.UseCollections) { // not required
		return nil
	}

	if err := m.UseCollections.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("use_collections")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("use_collections")
		}
		return err
	}

	return nil
}

func (m *SyncPrometheusChronoConfig) contextValidateCollectionsConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.CollectionsConfig != nil {

		if swag.IsZero(m.CollectionsConfig) { // not required
			return nil
		}

		if err := m.CollectionsConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("collections_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("collections_config")
			}
			return err
		}
	}

	return nil
}

func (m *SyncPrometheusChronoConfig) contextValidateSeverityMappings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SeverityMappings); i++ {

		if m.SeverityMappings[i] != nil {

			if swag.IsZero(m.SeverityMappings[i]) { // not required
				return nil
			}

			if err := m.SeverityMappings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severity_mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severity_mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SyncPrometheusChronoConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyncPrometheusChronoConfig) UnmarshalBinary(b []byte) error {
	var res SyncPrometheusChronoConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
