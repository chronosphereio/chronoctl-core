// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigunstableRecurringBudget configunstable recurring budget
//
// swagger:model configunstableRecurringBudget
type ConfigunstableRecurringBudget struct {

	// resources are the required resources of the global budget. Must set an
	// entry for each resource of the global budget's telemetry type (e.g. logs,
	// metrics, etc). Any global resource behaviors are applied after sub-budget
	// behaviors.
	Resources []*RecurringBudgetResourceBudget `json:"resources"`

	// priorities are optional global budget priorities. Priorities define the
	// order in which requests should be dropped when necessary (i.e. lowest
	// priority dropped first, highest priority dropped last). If a request does
	// not match any priority dataset, then it defaults to the lowest priority.
	//
	// Global budget priorities are also used by internal Chronosphere system
	// limiters when dropping requests.
	Priorities []*RecurringBudgetPriority `json:"priorities"`

	// budgets are optional sub-budgets of the global budget. Incoming
	// requests match to a budget by dataset, where the first match wins (i.e.
	// ordering matters). If a request does not match any budget, it falls back
	// to the default_budget.
	Budgets []*RecurringBudgetBudget `json:"budgets"`

	// default budget
	DefaultBudget *RecurringBudgetDefaultBudget `json:"default_budget,omitempty"`
}

// Validate validates this configunstable recurring budget
func (m *ConfigunstableRecurringBudget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriorities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBudgets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultBudget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableRecurringBudget) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigunstableRecurringBudget) validatePriorities(formats strfmt.Registry) error {
	if swag.IsZero(m.Priorities) { // not required
		return nil
	}

	for i := 0; i < len(m.Priorities); i++ {
		if swag.IsZero(m.Priorities[i]) { // not required
			continue
		}

		if m.Priorities[i] != nil {
			if err := m.Priorities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priorities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priorities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigunstableRecurringBudget) validateBudgets(formats strfmt.Registry) error {
	if swag.IsZero(m.Budgets) { // not required
		return nil
	}

	for i := 0; i < len(m.Budgets); i++ {
		if swag.IsZero(m.Budgets[i]) { // not required
			continue
		}

		if m.Budgets[i] != nil {
			if err := m.Budgets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("budgets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("budgets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigunstableRecurringBudget) validateDefaultBudget(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultBudget) { // not required
		return nil
	}

	if m.DefaultBudget != nil {
		if err := m.DefaultBudget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_budget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_budget")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configunstable recurring budget based on the context it is used
func (m *ConfigunstableRecurringBudget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriorities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBudgets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultBudget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableRecurringBudget) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {

			if swag.IsZero(m.Resources[i]) { // not required
				return nil
			}

			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigunstableRecurringBudget) contextValidatePriorities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Priorities); i++ {

		if m.Priorities[i] != nil {

			if swag.IsZero(m.Priorities[i]) { // not required
				return nil
			}

			if err := m.Priorities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priorities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priorities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigunstableRecurringBudget) contextValidateBudgets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Budgets); i++ {

		if m.Budgets[i] != nil {

			if swag.IsZero(m.Budgets[i]) { // not required
				return nil
			}

			if err := m.Budgets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("budgets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("budgets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigunstableRecurringBudget) contextValidateDefaultBudget(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultBudget != nil {

		if swag.IsZero(m.DefaultBudget) { // not required
			return nil
		}

		if err := m.DefaultBudget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_budget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("default_budget")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigunstableRecurringBudget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigunstableRecurringBudget) UnmarshalBinary(b []byte) error {
	var res ConfigunstableRecurringBudget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
