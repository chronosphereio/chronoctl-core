// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigunstableTraceBehaviorSamplingType  - LOW_VALUE: Match indicates a low value trace. With multiple low value matches sample at the lowest rate.
//   - HIGH_VALUE: Match indicates a high value trace. With multiple high value matches sample at the highest rate.
//
// swagger:model configunstableTraceBehaviorSamplingType
type ConfigunstableTraceBehaviorSamplingType string

func NewConfigunstableTraceBehaviorSamplingType(value ConfigunstableTraceBehaviorSamplingType) *ConfigunstableTraceBehaviorSamplingType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigunstableTraceBehaviorSamplingType.
func (m ConfigunstableTraceBehaviorSamplingType) Pointer() *ConfigunstableTraceBehaviorSamplingType {
	return &m
}

const (

	// ConfigunstableTraceBehaviorSamplingTypeLOWVALUE captures enum value "LOW_VALUE"
	ConfigunstableTraceBehaviorSamplingTypeLOWVALUE ConfigunstableTraceBehaviorSamplingType = "LOW_VALUE"

	// ConfigunstableTraceBehaviorSamplingTypeHIGHVALUE captures enum value "HIGH_VALUE"
	ConfigunstableTraceBehaviorSamplingTypeHIGHVALUE ConfigunstableTraceBehaviorSamplingType = "HIGH_VALUE"
)

// for schema
var configunstableTraceBehaviorSamplingTypeEnum []interface{}

func init() {
	var res []ConfigunstableTraceBehaviorSamplingType
	if err := json.Unmarshal([]byte(`["LOW_VALUE","HIGH_VALUE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configunstableTraceBehaviorSamplingTypeEnum = append(configunstableTraceBehaviorSamplingTypeEnum, v)
	}
}

func (m ConfigunstableTraceBehaviorSamplingType) validateConfigunstableTraceBehaviorSamplingTypeEnum(path, location string, value ConfigunstableTraceBehaviorSamplingType) error {
	if err := validate.EnumCase(path, location, value, configunstableTraceBehaviorSamplingTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configunstable trace behavior sampling type
func (m ConfigunstableTraceBehaviorSamplingType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigunstableTraceBehaviorSamplingTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configunstable trace behavior sampling type based on context it is used
func (m ConfigunstableTraceBehaviorSamplingType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
