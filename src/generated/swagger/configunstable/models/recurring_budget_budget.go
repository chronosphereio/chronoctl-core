// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecurringBudgetBudget recurring budget budget
//
// swagger:model RecurringBudgetBudget
type RecurringBudgetBudget struct {

	// slug is the required human-readable identifier of the budget.
	Slug string `json:"slug,omitempty"`

	// dataset_slug is the required slug of the budget's dataset. Must match
	// the global budget's telemetry type (e.g. logs, metrics etc).
	DatasetSlug string `json:"dataset_slug,omitempty"`

	// resources are the required resources of the budget. Must set an entry
	// for each resource of the global budget's telemetry type (e.g. logs,
	// metrics, etc).
	Resources []*RecurringBudgetResourceBudget `json:"resources"`

	// priorities are optional budget priorities. Priorites define in what
	// order should requests be dropped when necessary (i.e. lowest priority
	// dropped first, highest priority dropped last). If a request does not
	// match any priority dataset, then it defaults to the lowest priority.
	Priorities []*RecurringBudgetPriority `json:"priorities"`
}

// Validate validates this recurring budget budget
func (m *RecurringBudgetBudget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriorities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecurringBudgetBudget) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecurringBudgetBudget) validatePriorities(formats strfmt.Registry) error {
	if swag.IsZero(m.Priorities) { // not required
		return nil
	}

	for i := 0; i < len(m.Priorities); i++ {
		if swag.IsZero(m.Priorities[i]) { // not required
			continue
		}

		if m.Priorities[i] != nil {
			if err := m.Priorities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priorities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priorities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this recurring budget budget based on the context it is used
func (m *RecurringBudgetBudget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriorities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecurringBudgetBudget) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {

			if swag.IsZero(m.Resources[i]) { // not required
				return nil
			}

			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecurringBudgetBudget) contextValidatePriorities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Priorities); i++ {

		if m.Priorities[i] != nil {

			if swag.IsZero(m.Priorities[i]) { // not required
				return nil
			}

			if err := m.Priorities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priorities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priorities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecurringBudgetBudget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecurringBudgetBudget) UnmarshalBinary(b []byte) error {
	var res RecurringBudgetBudget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
