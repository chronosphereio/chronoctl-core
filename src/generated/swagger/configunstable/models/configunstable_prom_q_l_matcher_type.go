// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigunstablePromQLMatcherType configunstable prom q l matcher type
//
// swagger:model configunstablePromQLMatcherType
type ConfigunstablePromQLMatcherType string

func NewConfigunstablePromQLMatcherType(value ConfigunstablePromQLMatcherType) *ConfigunstablePromQLMatcherType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigunstablePromQLMatcherType.
func (m ConfigunstablePromQLMatcherType) Pointer() *ConfigunstablePromQLMatcherType {
	return &m
}

const (

	// ConfigunstablePromQLMatcherTypeMatchEqual captures enum value "MatchEqual"
	ConfigunstablePromQLMatcherTypeMatchEqual ConfigunstablePromQLMatcherType = "MatchEqual"

	// ConfigunstablePromQLMatcherTypeMatchRegexp captures enum value "MatchRegexp"
	ConfigunstablePromQLMatcherTypeMatchRegexp ConfigunstablePromQLMatcherType = "MatchRegexp"

	// ConfigunstablePromQLMatcherTypeMatchNotEqual captures enum value "MatchNotEqual"
	ConfigunstablePromQLMatcherTypeMatchNotEqual ConfigunstablePromQLMatcherType = "MatchNotEqual"

	// ConfigunstablePromQLMatcherTypeMatchNotRegexp captures enum value "MatchNotRegexp"
	ConfigunstablePromQLMatcherTypeMatchNotRegexp ConfigunstablePromQLMatcherType = "MatchNotRegexp"
)

// for schema
var configunstablePromQLMatcherTypeEnum []interface{}

func init() {
	var res []ConfigunstablePromQLMatcherType
	if err := json.Unmarshal([]byte(`["MatchEqual","MatchRegexp","MatchNotEqual","MatchNotRegexp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configunstablePromQLMatcherTypeEnum = append(configunstablePromQLMatcherTypeEnum, v)
	}
}

func (m ConfigunstablePromQLMatcherType) validateConfigunstablePromQLMatcherTypeEnum(path, location string, value ConfigunstablePromQLMatcherType) error {
	if err := validate.EnumCase(path, location, value, configunstablePromQLMatcherTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configunstable prom q l matcher type
func (m ConfigunstablePromQLMatcherType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigunstablePromQLMatcherTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configunstable prom q l matcher type based on context it is used
func (m ConfigunstablePromQLMatcherType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
