// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RuleRuleType rule rule type
//
// swagger:model RuleRuleType
type RuleRuleType string

func NewRuleRuleType(value RuleRuleType) *RuleRuleType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RuleRuleType.
func (m RuleRuleType) Pointer() *RuleRuleType {
	return &m
}

const (

	// RuleRuleTypeRULETYPESAMPLE captures enum value "RULE_TYPE_SAMPLE"
	RuleRuleTypeRULETYPESAMPLE RuleRuleType = "RULE_TYPE_SAMPLE"

	// RuleRuleTypeRULETYPEDELTEFIELDS captures enum value "RULE_TYPE_DELTE_FIELDS"
	RuleRuleTypeRULETYPEDELTEFIELDS RuleRuleType = "RULE_TYPE_DELTE_FIELDS"

	// RuleRuleTypeRULETYPEDEDUPE captures enum value "RULE_TYPE_DE_DUPE"
	RuleRuleTypeRULETYPEDEDUPE RuleRuleType = "RULE_TYPE_DE_DUPE"

	// RuleRuleTypeRULETYPEEMITMETRICS captures enum value "RULE_TYPE_EMIT_METRICS"
	RuleRuleTypeRULETYPEEMITMETRICS RuleRuleType = "RULE_TYPE_EMIT_METRICS"

	// RuleRuleTypeRULETYPEDROP captures enum value "RULE_TYPE_DROP"
	RuleRuleTypeRULETYPEDROP RuleRuleType = "RULE_TYPE_DROP"
)

// for schema
var ruleRuleTypeEnum []interface{}

func init() {
	var res []RuleRuleType
	if err := json.Unmarshal([]byte(`["RULE_TYPE_SAMPLE","RULE_TYPE_DELTE_FIELDS","RULE_TYPE_DE_DUPE","RULE_TYPE_EMIT_METRICS","RULE_TYPE_DROP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ruleRuleTypeEnum = append(ruleRuleTypeEnum, v)
	}
}

func (m RuleRuleType) validateRuleRuleTypeEnum(path, location string, value RuleRuleType) error {
	if err := validate.EnumCase(path, location, value, ruleRuleTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this rule rule type
func (m RuleRuleType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRuleRuleTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this rule rule type based on context it is used
func (m RuleRuleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
