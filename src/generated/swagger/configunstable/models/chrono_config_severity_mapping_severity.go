// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ChronoConfigSeverityMappingSeverity chrono config severity mapping severity
//
// swagger:model ChronoConfigSeverityMappingSeverity
type ChronoConfigSeverityMappingSeverity string

func NewChronoConfigSeverityMappingSeverity(value ChronoConfigSeverityMappingSeverity) *ChronoConfigSeverityMappingSeverity {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ChronoConfigSeverityMappingSeverity.
func (m ChronoConfigSeverityMappingSeverity) Pointer() *ChronoConfigSeverityMappingSeverity {
	return &m
}

const (

	// ChronoConfigSeverityMappingSeverityCRITICAL captures enum value "CRITICAL"
	ChronoConfigSeverityMappingSeverityCRITICAL ChronoConfigSeverityMappingSeverity = "CRITICAL"
)

// for schema
var chronoConfigSeverityMappingSeverityEnum []interface{}

func init() {
	var res []ChronoConfigSeverityMappingSeverity
	if err := json.Unmarshal([]byte(`["CRITICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chronoConfigSeverityMappingSeverityEnum = append(chronoConfigSeverityMappingSeverityEnum, v)
	}
}

func (m ChronoConfigSeverityMappingSeverity) validateChronoConfigSeverityMappingSeverityEnum(path, location string, value ChronoConfigSeverityMappingSeverity) error {
	if err := validate.EnumCase(path, location, value, chronoConfigSeverityMappingSeverityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this chrono config severity mapping severity
func (m ChronoConfigSeverityMappingSeverity) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateChronoConfigSeverityMappingSeverityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this chrono config severity mapping severity based on context it is used
func (m ChronoConfigSeverityMappingSeverity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
