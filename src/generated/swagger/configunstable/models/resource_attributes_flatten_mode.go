// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResourceAttributesFlattenMode resource attributes flatten mode
//
// swagger:model ResourceAttributesFlattenMode
type ResourceAttributesFlattenMode string

func NewResourceAttributesFlattenMode(value ResourceAttributesFlattenMode) *ResourceAttributesFlattenMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResourceAttributesFlattenMode.
func (m ResourceAttributesFlattenMode) Pointer() *ResourceAttributesFlattenMode {
	return &m
}

const (

	// ResourceAttributesFlattenModeMERGE captures enum value "MERGE"
	ResourceAttributesFlattenModeMERGE ResourceAttributesFlattenMode = "MERGE"

	// ResourceAttributesFlattenModeOVERWRITE captures enum value "OVERWRITE"
	ResourceAttributesFlattenModeOVERWRITE ResourceAttributesFlattenMode = "OVERWRITE"

	// ResourceAttributesFlattenModeIGNORE captures enum value "IGNORE"
	ResourceAttributesFlattenModeIGNORE ResourceAttributesFlattenMode = "IGNORE"
)

// for schema
var resourceAttributesFlattenModeEnum []interface{}

func init() {
	var res []ResourceAttributesFlattenMode
	if err := json.Unmarshal([]byte(`["MERGE","OVERWRITE","IGNORE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceAttributesFlattenModeEnum = append(resourceAttributesFlattenModeEnum, v)
	}
}

func (m ResourceAttributesFlattenMode) validateResourceAttributesFlattenModeEnum(path, location string, value ResourceAttributesFlattenMode) error {
	if err := validate.EnumCase(path, location, value, resourceAttributesFlattenModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this resource attributes flatten mode
func (m ResourceAttributesFlattenMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResourceAttributesFlattenModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this resource attributes flatten mode based on context it is used
func (m ResourceAttributesFlattenMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
