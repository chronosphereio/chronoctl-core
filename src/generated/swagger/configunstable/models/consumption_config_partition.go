// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConsumptionConfigPartition consumption config partition
//
// swagger:model ConsumptionConfigPartition
type ConsumptionConfigPartition struct {

	// name is the name of the partition. Must be unique within the parent
	// partition.
	Name string `json:"name,omitempty"`

	// dataset_filters define what datasets match the partition. The filters are
	// AND'd together; a request must match every filter in order to match the
	// partition. Must not be empty.
	DatasetFilters []*ConfigunstableDatasetFilter `json:"dataset_filters"`

	// partitions are the optional child partitions of this partition. If set,
	// requests which match the current partition will be allocated to the
	// first child partition that matches. Requests that don't match any child
	// partition fall back to an omnipresent default child partition.
	Partitions []*ConsumptionConfigPartition `json:"partitions"`
}

// Validate validates this consumption config partition
func (m *ConsumptionConfigPartition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatasetFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsumptionConfigPartition) validateDatasetFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.DatasetFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.DatasetFilters); i++ {
		if swag.IsZero(m.DatasetFilters[i]) { // not required
			continue
		}

		if m.DatasetFilters[i] != nil {
			if err := m.DatasetFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataset_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataset_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConsumptionConfigPartition) validatePartitions(formats strfmt.Registry) error {
	if swag.IsZero(m.Partitions) { // not required
		return nil
	}

	for i := 0; i < len(m.Partitions); i++ {
		if swag.IsZero(m.Partitions[i]) { // not required
			continue
		}

		if m.Partitions[i] != nil {
			if err := m.Partitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("partitions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("partitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this consumption config partition based on the context it is used
func (m *ConsumptionConfigPartition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatasetFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartitions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConsumptionConfigPartition) contextValidateDatasetFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DatasetFilters); i++ {

		if m.DatasetFilters[i] != nil {

			if swag.IsZero(m.DatasetFilters[i]) { // not required
				return nil
			}

			if err := m.DatasetFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataset_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataset_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConsumptionConfigPartition) contextValidatePartitions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Partitions); i++ {

		if m.Partitions[i] != nil {

			if swag.IsZero(m.Partitions[i]) { // not required
				return nil
			}

			if err := m.Partitions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("partitions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("partitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConsumptionConfigPartition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConsumptionConfigPartition) UnmarshalBinary(b []byte) error {
	var res ConsumptionConfigPartition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
