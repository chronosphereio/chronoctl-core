// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigunstableTraceBehavior configunstable trace behavior
//
// swagger:model configunstableTraceBehavior
type ConfigunstableTraceBehavior struct {

	// Required name of the TraceBehavior. May be modified after the TraceBehavior is created.
	Name string `json:"name,omitempty"`

	// Unique identifier of the TraceBehavior. If slug is not provided, one will be generated based of the name field. Cannot be modified after the TraceBehavior is created.
	Slug string `json:"slug,omitempty"`

	// Timestamp of when the TraceBehavior was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the TraceBehavior was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// type
	Type TraceBehaviorTraceBehaviorType `json:"type,omitempty"`

	// baseline behavior options
	BaselineBehaviorOptions *TraceBehaviorBaselineBehaviorOptions `json:"baseline_behavior_options,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// Sample rate for fully assembled traces that do not apply to the error, fast, slow, large, or small sampling options.
	BaseTailSampleRate float64 `json:"base_tail_sample_rate,omitempty"`

	// Sample rate for head sampling. This applies to all root spans that are enrolled in head sampling,
	// but do not have a specific rule defined for their service.
	BaseHeadSampleRate float64 `json:"base_head_sample_rate,omitempty"`

	// error sample options
	ErrorSampleOptions *ConfigunstableTraceBehaviorErrorSampleOptions `json:"error_sample_options,omitempty"`

	// fast sample options
	FastSampleOptions *ConfigunstableTraceBehaviorFastSampleOptions `json:"fast_sample_options,omitempty"`

	// slow sample options
	SlowSampleOptions *ConfigunstableTraceBehaviorSlowSampleOptions `json:"slow_sample_options,omitempty"`

	// large trace sample options
	LargeTraceSampleOptions *ConfigunstableTraceBehaviorLargeTraceSampleOptions `json:"large_trace_sample_options,omitempty"`

	// small trace sample options
	SmallTraceSampleOptions *ConfigunstableTraceBehaviorSmallTraceSampleOptions `json:"small_trace_sample_options,omitempty"`
}

// Validate validates this configunstable trace behavior
func (m *ConfigunstableTraceBehavior) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaselineBehaviorOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorSampleOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFastSampleOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlowSampleOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLargeTraceSampleOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmallTraceSampleOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableTraceBehavior) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) validateBaselineBehaviorOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.BaselineBehaviorOptions) { // not required
		return nil
	}

	if m.BaselineBehaviorOptions != nil {
		if err := m.BaselineBehaviorOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseline_behavior_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseline_behavior_options")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) validateErrorSampleOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorSampleOptions) { // not required
		return nil
	}

	if m.ErrorSampleOptions != nil {
		if err := m.ErrorSampleOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error_sample_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error_sample_options")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) validateFastSampleOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.FastSampleOptions) { // not required
		return nil
	}

	if m.FastSampleOptions != nil {
		if err := m.FastSampleOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fast_sample_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fast_sample_options")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) validateSlowSampleOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.SlowSampleOptions) { // not required
		return nil
	}

	if m.SlowSampleOptions != nil {
		if err := m.SlowSampleOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slow_sample_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slow_sample_options")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) validateLargeTraceSampleOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.LargeTraceSampleOptions) { // not required
		return nil
	}

	if m.LargeTraceSampleOptions != nil {
		if err := m.LargeTraceSampleOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("large_trace_sample_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("large_trace_sample_options")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) validateSmallTraceSampleOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.SmallTraceSampleOptions) { // not required
		return nil
	}

	if m.SmallTraceSampleOptions != nil {
		if err := m.SmallTraceSampleOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("small_trace_sample_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("small_trace_sample_options")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configunstable trace behavior based on the context it is used
func (m *ConfigunstableTraceBehavior) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBaselineBehaviorOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorSampleOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFastSampleOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSlowSampleOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLargeTraceSampleOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmallTraceSampleOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableTraceBehavior) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) contextValidateBaselineBehaviorOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.BaselineBehaviorOptions != nil {

		if swag.IsZero(m.BaselineBehaviorOptions) { // not required
			return nil
		}

		if err := m.BaselineBehaviorOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseline_behavior_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseline_behavior_options")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) contextValidateErrorSampleOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrorSampleOptions != nil {

		if swag.IsZero(m.ErrorSampleOptions) { // not required
			return nil
		}

		if err := m.ErrorSampleOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error_sample_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("error_sample_options")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) contextValidateFastSampleOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.FastSampleOptions != nil {

		if swag.IsZero(m.FastSampleOptions) { // not required
			return nil
		}

		if err := m.FastSampleOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fast_sample_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fast_sample_options")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) contextValidateSlowSampleOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.SlowSampleOptions != nil {

		if swag.IsZero(m.SlowSampleOptions) { // not required
			return nil
		}

		if err := m.SlowSampleOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slow_sample_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slow_sample_options")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) contextValidateLargeTraceSampleOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.LargeTraceSampleOptions != nil {

		if swag.IsZero(m.LargeTraceSampleOptions) { // not required
			return nil
		}

		if err := m.LargeTraceSampleOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("large_trace_sample_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("large_trace_sample_options")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableTraceBehavior) contextValidateSmallTraceSampleOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.SmallTraceSampleOptions != nil {

		if swag.IsZero(m.SmallTraceSampleOptions) { // not required
			return nil
		}

		if err := m.SmallTraceSampleOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("small_trace_sample_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("small_trace_sample_options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigunstableTraceBehavior) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigunstableTraceBehavior) UnmarshalBinary(b []byte) error {
	var res ConfigunstableTraceBehavior
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
