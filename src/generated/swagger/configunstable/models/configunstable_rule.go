// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigunstableRule Rule is the configuration for a rule.
//
// swagger:model configunstableRule
type ConfigunstableRule struct {

	// rule type
	RuleType RuleRuleType `json:"rule_type,omitempty"`

	// sample
	Sample *RuleSample `json:"sample,omitempty"`

	// delete fields
	DeleteFields *RuleDeleteFields `json:"delete_fields,omitempty"`

	// de dupe
	DeDupe *RuleDeDupe `json:"de_dupe,omitempty"`

	// emit metrics
	EmitMetrics *RuleEmitMetrics `json:"emit_metrics,omitempty"`

	// drop
	Drop RuleDrop `json:"drop,omitempty"`
}

// Validate validates this configunstable rule
func (m *ConfigunstableRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRuleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSample(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeDupe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmitMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableRule) validateRuleType(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleType) { // not required
		return nil
	}

	if err := m.RuleType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rule_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rule_type")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableRule) validateSample(formats strfmt.Registry) error {
	if swag.IsZero(m.Sample) { // not required
		return nil
	}

	if m.Sample != nil {
		if err := m.Sample.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sample")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sample")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableRule) validateDeleteFields(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteFields) { // not required
		return nil
	}

	if m.DeleteFields != nil {
		if err := m.DeleteFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_fields")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableRule) validateDeDupe(formats strfmt.Registry) error {
	if swag.IsZero(m.DeDupe) { // not required
		return nil
	}

	if m.DeDupe != nil {
		if err := m.DeDupe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("de_dupe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("de_dupe")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableRule) validateEmitMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.EmitMetrics) { // not required
		return nil
	}

	if m.EmitMetrics != nil {
		if err := m.EmitMetrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emit_metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emit_metrics")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configunstable rule based on the context it is used
func (m *ConfigunstableRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRuleType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSample(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeDupe(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmitMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableRule) contextValidateRuleType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RuleType) { // not required
		return nil
	}

	if err := m.RuleType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rule_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rule_type")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableRule) contextValidateSample(ctx context.Context, formats strfmt.Registry) error {

	if m.Sample != nil {

		if swag.IsZero(m.Sample) { // not required
			return nil
		}

		if err := m.Sample.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sample")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sample")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableRule) contextValidateDeleteFields(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteFields != nil {

		if swag.IsZero(m.DeleteFields) { // not required
			return nil
		}

		if err := m.DeleteFields.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete_fields")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableRule) contextValidateDeDupe(ctx context.Context, formats strfmt.Registry) error {

	if m.DeDupe != nil {

		if swag.IsZero(m.DeDupe) { // not required
			return nil
		}

		if err := m.DeDupe.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("de_dupe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("de_dupe")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableRule) contextValidateEmitMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.EmitMetrics != nil {

		if swag.IsZero(m.EmitMetrics) { // not required
			return nil
		}

		if err := m.EmitMetrics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emit_metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emit_metrics")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigunstableRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigunstableRule) UnmarshalBinary(b []byte) error {
	var res ConfigunstableRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
