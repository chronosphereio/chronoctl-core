// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BehaviorAction behavior action
//
// swagger:model BehaviorAction
type BehaviorAction string

func NewBehaviorAction(value BehaviorAction) *BehaviorAction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BehaviorAction.
func (m BehaviorAction) Pointer() *BehaviorAction {
	return &m
}

const (

	// BehaviorActionALERTWARN captures enum value "ALERT_WARN"
	BehaviorActionALERTWARN BehaviorAction = "ALERT_WARN"

	// BehaviorActionALERTCRITICAL captures enum value "ALERT_CRITICAL"
	BehaviorActionALERTCRITICAL BehaviorAction = "ALERT_CRITICAL"

	// BehaviorActionDROP captures enum value "DROP"
	BehaviorActionDROP BehaviorAction = "DROP"
)

// for schema
var behaviorActionEnum []interface{}

func init() {
	var res []BehaviorAction
	if err := json.Unmarshal([]byte(`["ALERT_WARN","ALERT_CRITICAL","DROP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		behaviorActionEnum = append(behaviorActionEnum, v)
	}
}

func (m BehaviorAction) validateBehaviorActionEnum(path, location string, value BehaviorAction) error {
	if err := validate.EnumCase(path, location, value, behaviorActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this behavior action
func (m BehaviorAction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBehaviorActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this behavior action based on context it is used
func (m BehaviorAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
