// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ControlRuleMode control rule mode
//
// swagger:model ControlRuleMode
type ControlRuleMode string

func NewControlRuleMode(value ControlRuleMode) *ControlRuleMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ControlRuleMode.
func (m ControlRuleMode) Pointer() *ControlRuleMode {
	return &m
}

const (

	// ControlRuleModeMODEENABLED captures enum value "MODE_ENABLED"
	ControlRuleModeMODEENABLED ControlRuleMode = "MODE_ENABLED"

	// ControlRuleModeMODEDISABLED captures enum value "MODE_DISABLED"
	ControlRuleModeMODEDISABLED ControlRuleMode = "MODE_DISABLED"
)

// for schema
var controlRuleModeEnum []interface{}

func init() {
	var res []ControlRuleMode
	if err := json.Unmarshal([]byte(`["MODE_ENABLED","MODE_DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		controlRuleModeEnum = append(controlRuleModeEnum, v)
	}
}

func (m ControlRuleMode) validateControlRuleModeEnum(path, location string, value ControlRuleMode) error {
	if err := validate.EnumCase(path, location, value, controlRuleModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this control rule mode
func (m ControlRuleMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateControlRuleModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this control rule mode based on context it is used
func (m ControlRuleMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
