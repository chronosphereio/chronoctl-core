// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigunstableBudgetControl configunstable budget control
//
// swagger:model configunstableBudgetControl
type ConfigunstableBudgetControl struct {

	// Unique identifier of the BudgetControl. If slug is not provided, one will be generated based of the name field. Cannot be modified after the BudgetControl is created.
	Slug string `json:"slug,omitempty"`

	// Required name of the BudgetControl. May be modified after the BudgetControl is created.
	Name string `json:"name,omitempty"`

	// Timestamp of when the BudgetControl was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the BudgetControl was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// resource
	Resource BudgetControlResource `json:"resource,omitempty"`

	// pool name
	PoolName string `json:"pool_name,omitempty"`

	// priority
	Priority BudgetControlPriority `json:"priority,omitempty"`

	// behavior
	Behavior *BudgetControlBehavior `json:"behavior,omitempty"`
}

// Validate validates this configunstable budget control
func (m *ConfigunstableBudgetControl) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBehavior(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableBudgetControl) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableBudgetControl) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableBudgetControl) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if err := m.Resource.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("resource")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableBudgetControl) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if err := m.Priority.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priority")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("priority")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableBudgetControl) validateBehavior(formats strfmt.Registry) error {
	if swag.IsZero(m.Behavior) { // not required
		return nil
	}

	if m.Behavior != nil {
		if err := m.Behavior.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("behavior")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("behavior")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configunstable budget control based on the context it is used
func (m *ConfigunstableBudgetControl) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriority(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBehavior(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableBudgetControl) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableBudgetControl) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableBudgetControl) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if err := m.Resource.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("resource")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableBudgetControl) contextValidatePriority(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if err := m.Priority.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("priority")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("priority")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableBudgetControl) contextValidateBehavior(ctx context.Context, formats strfmt.Registry) error {

	if m.Behavior != nil {

		if swag.IsZero(m.Behavior) { // not required
			return nil
		}

		if err := m.Behavior.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("behavior")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("behavior")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigunstableBudgetControl) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigunstableBudgetControl) UnmarshalBinary(b []byte) error {
	var res ConfigunstableBudgetControl
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
