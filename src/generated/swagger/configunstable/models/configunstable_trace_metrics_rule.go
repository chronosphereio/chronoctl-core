// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigunstableTraceMetricsRule configunstable trace metrics rule
//
// swagger:model configunstableTraceMetricsRule
type ConfigunstableTraceMetricsRule struct {

	// Required name of the TraceMetricsRule. May be modified after the TraceMetricsRule is created.
	Name string `json:"name,omitempty"`

	// Unique identifier of the TraceMetricsRule. If slug is not provided, one will be generated based of the name field. Cannot be modified after the TraceMetricsRule is created.
	Slug string `json:"slug,omitempty"`

	// Timestamp of when the TraceMetricsRule was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the TraceMetricsRule was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// The name of the generated trace metrics.
	MetricName string `json:"metric_name,omitempty"`

	// Labels to apply to the generated trace metrics.
	MetricLabels map[string]string `json:"metric_labels,omitempty"`

	// Histogram bucket values, in seconds, for generated duration metrics.
	HistogramBucketsSecs []int32 `json:"histogram_buckets_secs"`

	// trace filter
	TraceFilter *ConfigunstableTraceSearchFilter `json:"trace_filter,omitempty"`

	// Add labels to the resultant metrics based on these specified GroupBy messages.
	GroupBy []*TraceMetricsRuleGroupBy `json:"group_by"`
}

// Validate validates this configunstable trace metrics rule
func (m *ConfigunstableTraceMetricsRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraceFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableTraceMetricsRule) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableTraceMetricsRule) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableTraceMetricsRule) validateTraceFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.TraceFilter) { // not required
		return nil
	}

	if m.TraceFilter != nil {
		if err := m.TraceFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trace_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trace_filter")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableTraceMetricsRule) validateGroupBy(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupBy) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupBy); i++ {
		if swag.IsZero(m.GroupBy[i]) { // not required
			continue
		}

		if m.GroupBy[i] != nil {
			if err := m.GroupBy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("group_by" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("group_by" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this configunstable trace metrics rule based on the context it is used
func (m *ConfigunstableTraceMetricsRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTraceFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableTraceMetricsRule) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableTraceMetricsRule) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableTraceMetricsRule) contextValidateTraceFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.TraceFilter != nil {

		if swag.IsZero(m.TraceFilter) { // not required
			return nil
		}

		if err := m.TraceFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trace_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trace_filter")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableTraceMetricsRule) contextValidateGroupBy(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GroupBy); i++ {

		if m.GroupBy[i] != nil {

			if swag.IsZero(m.GroupBy[i]) { // not required
				return nil
			}

			if err := m.GroupBy[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("group_by" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("group_by" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigunstableTraceMetricsRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigunstableTraceMetricsRule) UnmarshalBinary(b []byte) error {
	var res ConfigunstableTraceMetricsRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
