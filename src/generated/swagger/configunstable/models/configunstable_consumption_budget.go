// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigunstableConsumptionBudget configunstable consumption budget
//
// swagger:model configunstableConsumptionBudget
type ConfigunstableConsumptionBudget struct {

	// Unique identifier of the ConsumptionBudget. If a `slug` isn't provided, one will be generated based of the `name` field. You can't modify this field after the ConsumptionBudget is created.
	Slug string `json:"slug,omitempty"`

	// Name of the ConsumptionBudget. You can modify this value after the ConsumptionBudget is created.
	Name string `json:"name,omitempty"`

	// Timestamp of when the ConsumptionBudget was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the ConsumptionBudget was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// resource
	Resource ConsumptionBudgetResource `json:"resource,omitempty"`

	// partition_name_path is the required path of the budget's partition, in the
	// format `["global", "<name1>", "<name2>", ...]`, where name1 is a top-level
	// partition, and name2 is a child partition of name1, etc.
	PartitionNamePath []string `json:"partition_name_path"`

	// priorities are optional budget priorities. Priorites define in what
	// order should requests be dropped when necessary (i.e. lowest priority
	// dropped first, highest priority dropped last). If a request does not
	// match any priority dataset, then it defaults to the lowest priority.
	Priorities []*ConsumptionBudgetPriority `json:"priorities"`

	// behaviors are optional budget behaviors for automated limiting and
	// alerting.
	Behaviors []*ConsumptionBudgetBehavior `json:"behaviors"`

	// default_priority is an optional default priority for requests which do not
	// match any priority in the priorities list. If not set, then the lowest
	// priority (10) is used as the default.
	DefaultPriority int32 `json:"default_priority,omitempty"`
}

// Validate validates this configunstable consumption budget
func (m *ConfigunstableConsumptionBudget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriorities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBehaviors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableConsumptionBudget) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableConsumptionBudget) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableConsumptionBudget) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if err := m.Resource.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("resource")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableConsumptionBudget) validatePriorities(formats strfmt.Registry) error {
	if swag.IsZero(m.Priorities) { // not required
		return nil
	}

	for i := 0; i < len(m.Priorities); i++ {
		if swag.IsZero(m.Priorities[i]) { // not required
			continue
		}

		if m.Priorities[i] != nil {
			if err := m.Priorities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priorities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priorities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigunstableConsumptionBudget) validateBehaviors(formats strfmt.Registry) error {
	if swag.IsZero(m.Behaviors) { // not required
		return nil
	}

	for i := 0; i < len(m.Behaviors); i++ {
		if swag.IsZero(m.Behaviors[i]) { // not required
			continue
		}

		if m.Behaviors[i] != nil {
			if err := m.Behaviors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("behaviors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("behaviors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this configunstable consumption budget based on the context it is used
func (m *ConfigunstableConsumptionBudget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriorities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBehaviors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableConsumptionBudget) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableConsumptionBudget) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableConsumptionBudget) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if err := m.Resource.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("resource")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableConsumptionBudget) contextValidatePriorities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Priorities); i++ {

		if m.Priorities[i] != nil {

			if swag.IsZero(m.Priorities[i]) { // not required
				return nil
			}

			if err := m.Priorities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priorities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("priorities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigunstableConsumptionBudget) contextValidateBehaviors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Behaviors); i++ {

		if m.Behaviors[i] != nil {

			if swag.IsZero(m.Behaviors[i]) { // not required
				return nil
			}

			if err := m.Behaviors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("behaviors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("behaviors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigunstableConsumptionBudget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigunstableConsumptionBudget) UnmarshalBinary(b []byte) error {
	var res ConfigunstableConsumptionBudget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
