// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EmitMetricsmetricMode emit metricsmetric mode
//
// swagger:model EmitMetricsmetricMode
type EmitMetricsmetricMode string

func NewEmitMetricsmetricMode(value EmitMetricsmetricMode) *EmitMetricsmetricMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EmitMetricsmetricMode.
func (m EmitMetricsmetricMode) Pointer() *EmitMetricsmetricMode {
	return &m
}

const (

	// EmitMetricsmetricModeCOUNTER captures enum value "COUNTER"
	EmitMetricsmetricModeCOUNTER EmitMetricsmetricMode = "COUNTER"

	// EmitMetricsmetricModeGAUGE captures enum value "GAUGE"
	EmitMetricsmetricModeGAUGE EmitMetricsmetricMode = "GAUGE"

	// EmitMetricsmetricModeHISTOGRAM captures enum value "HISTOGRAM"
	EmitMetricsmetricModeHISTOGRAM EmitMetricsmetricMode = "HISTOGRAM"
)

// for schema
var emitMetricsmetricModeEnum []interface{}

func init() {
	var res []EmitMetricsmetricMode
	if err := json.Unmarshal([]byte(`["COUNTER","GAUGE","HISTOGRAM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		emitMetricsmetricModeEnum = append(emitMetricsmetricModeEnum, v)
	}
}

func (m EmitMetricsmetricMode) validateEmitMetricsmetricModeEnum(path, location string, value EmitMetricsmetricMode) error {
	if err := validate.EnumCase(path, location, value, emitMetricsmetricModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this emit metricsmetric mode
func (m EmitMetricsmetricMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEmitMetricsmetricModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this emit metricsmetric mode based on context it is used
func (m EmitMetricsmetricMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
