// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigunstableAzureMetricsIntegration configunstable azure metrics integration
//
// swagger:model configunstableAzureMetricsIntegration
type ConfigunstableAzureMetricsIntegration struct {

	// The unique identifier of the AzureMetricsIntegration. If a `slug` isn't provided, one is generated based on the `name` field. You can't modify this field after the AzureMetricsIntegration is created.
	Slug string `json:"slug,omitempty"`

	// Name of the AzureMetricsIntegration. You can modify this value after the AzureMetricsIntegration is created.
	Name string `json:"name,omitempty"`

	// Timestamp of when the AzureMetricsIntegration was created. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Timestamp of when the AzureMetricsIntegration was last updated. Cannot be set by clients.
	// Read Only: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// principal
	Principal *AzureMetricsIntegrationAzurePrincipal `json:"principal,omitempty"`

	// scrape config
	ScrapeConfig *AzureMetricsIntegrationAzureScrapeConfig `json:"scrape_config,omitempty"`

	// Enables Azure count metrics for the configured resources.
	CountMetricsEnabled bool `json:"count_metrics_enabled,omitempty"`

	// Enables collection of azure usage metrics under this principal (Microsoft.Compute, Microsoft.Network, Microsoft.Storage).
	UsageMetricsEnabled bool `json:"usage_metrics_enabled,omitempty"`

	// Specifies whether Azure resource, group, and subscription tags should be propagated as metric labels.
	PropagateTags bool `json:"propagate_tags,omitempty"`
}

// Validate validates this configunstable azure metrics integration
func (m *ConfigunstableAzureMetricsIntegration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrincipal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScrapeConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableAzureMetricsIntegration) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableAzureMetricsIntegration) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableAzureMetricsIntegration) validatePrincipal(formats strfmt.Registry) error {
	if swag.IsZero(m.Principal) { // not required
		return nil
	}

	if m.Principal != nil {
		if err := m.Principal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("principal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("principal")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableAzureMetricsIntegration) validateScrapeConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ScrapeConfig) { // not required
		return nil
	}

	if m.ScrapeConfig != nil {
		if err := m.ScrapeConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scrape_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scrape_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configunstable azure metrics integration based on the context it is used
func (m *ConfigunstableAzureMetricsIntegration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrincipal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScrapeConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableAzureMetricsIntegration) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableAzureMetricsIntegration) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigunstableAzureMetricsIntegration) contextValidatePrincipal(ctx context.Context, formats strfmt.Registry) error {

	if m.Principal != nil {

		if swag.IsZero(m.Principal) { // not required
			return nil
		}

		if err := m.Principal.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("principal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("principal")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigunstableAzureMetricsIntegration) contextValidateScrapeConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ScrapeConfig != nil {

		if swag.IsZero(m.ScrapeConfig) { // not required
			return nil
		}

		if err := m.ScrapeConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scrape_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scrape_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigunstableAzureMetricsIntegration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigunstableAzureMetricsIntegration) UnmarshalBinary(b []byte) error {
	var res ConfigunstableAzureMetricsIntegration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
