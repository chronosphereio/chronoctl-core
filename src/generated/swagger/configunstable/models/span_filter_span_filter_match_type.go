// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SpanFilterSpanFilterMatchType span filter span filter match type
//
// swagger:model SpanFilterSpanFilterMatchType
type SpanFilterSpanFilterMatchType string

func NewSpanFilterSpanFilterMatchType(value SpanFilterSpanFilterMatchType) *SpanFilterSpanFilterMatchType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SpanFilterSpanFilterMatchType.
func (m SpanFilterSpanFilterMatchType) Pointer() *SpanFilterSpanFilterMatchType {
	return &m
}

const (

	// SpanFilterSpanFilterMatchTypeINCLUDE captures enum value "INCLUDE"
	SpanFilterSpanFilterMatchTypeINCLUDE SpanFilterSpanFilterMatchType = "INCLUDE"

	// SpanFilterSpanFilterMatchTypeEXCLUDE captures enum value "EXCLUDE"
	SpanFilterSpanFilterMatchTypeEXCLUDE SpanFilterSpanFilterMatchType = "EXCLUDE"
)

// for schema
var spanFilterSpanFilterMatchTypeEnum []interface{}

func init() {
	var res []SpanFilterSpanFilterMatchType
	if err := json.Unmarshal([]byte(`["INCLUDE","EXCLUDE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		spanFilterSpanFilterMatchTypeEnum = append(spanFilterSpanFilterMatchTypeEnum, v)
	}
}

func (m SpanFilterSpanFilterMatchType) validateSpanFilterSpanFilterMatchTypeEnum(path, location string, value SpanFilterSpanFilterMatchType) error {
	if err := validate.EnumCase(path, location, value, spanFilterSpanFilterMatchTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this span filter span filter match type
func (m SpanFilterSpanFilterMatchType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSpanFilterSpanFilterMatchTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this span filter span filter match type based on context it is used
func (m SpanFilterSpanFilterMatchType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
