// Code generated by MockGen. DO NOT EDIT.
// Source: ./generated/swagger/configunstable/client/operations/operations_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	operations "github.com/chronosphereio/chronoctl-core/src/generated/swagger/configunstable/client/operations"
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// CreateDashboard mocks base method.
func (m *MockClientService) CreateDashboard(params *operations.CreateDashboardParams, opts ...operations.ClientOption) (*operations.CreateDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDashboard", varargs...)
	ret0, _ := ret[0].(*operations.CreateDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDashboard indicates an expected call of CreateDashboard.
func (mr *MockClientServiceMockRecorder) CreateDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboard", reflect.TypeOf((*MockClientService)(nil).CreateDashboard), varargs...)
}

// CreateDataset mocks base method.
func (m *MockClientService) CreateDataset(params *operations.CreateDatasetParams, opts ...operations.ClientOption) (*operations.CreateDatasetOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataset", varargs...)
	ret0, _ := ret[0].(*operations.CreateDatasetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockClientServiceMockRecorder) CreateDataset(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockClientService)(nil).CreateDataset), varargs...)
}

// CreateLinkTemplate mocks base method.
func (m *MockClientService) CreateLinkTemplate(params *operations.CreateLinkTemplateParams, opts ...operations.ClientOption) (*operations.CreateLinkTemplateOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLinkTemplate", varargs...)
	ret0, _ := ret[0].(*operations.CreateLinkTemplateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLinkTemplate indicates an expected call of CreateLinkTemplate.
func (mr *MockClientServiceMockRecorder) CreateLinkTemplate(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkTemplate", reflect.TypeOf((*MockClientService)(nil).CreateLinkTemplate), varargs...)
}

// CreateLogAllocationConfig mocks base method.
func (m *MockClientService) CreateLogAllocationConfig(params *operations.CreateLogAllocationConfigParams, opts ...operations.ClientOption) (*operations.CreateLogAllocationConfigOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLogAllocationConfig", varargs...)
	ret0, _ := ret[0].(*operations.CreateLogAllocationConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogAllocationConfig indicates an expected call of CreateLogAllocationConfig.
func (mr *MockClientServiceMockRecorder) CreateLogAllocationConfig(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogAllocationConfig", reflect.TypeOf((*MockClientService)(nil).CreateLogAllocationConfig), varargs...)
}

// CreateNoopEntity mocks base method.
func (m *MockClientService) CreateNoopEntity(params *operations.CreateNoopEntityParams, opts ...operations.ClientOption) (*operations.CreateNoopEntityOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNoopEntity", varargs...)
	ret0, _ := ret[0].(*operations.CreateNoopEntityOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNoopEntity indicates an expected call of CreateNoopEntity.
func (mr *MockClientServiceMockRecorder) CreateNoopEntity(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNoopEntity", reflect.TypeOf((*MockClientService)(nil).CreateNoopEntity), varargs...)
}

// CreateOtelMetricsIngestion mocks base method.
func (m *MockClientService) CreateOtelMetricsIngestion(params *operations.CreateOtelMetricsIngestionParams, opts ...operations.ClientOption) (*operations.CreateOtelMetricsIngestionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOtelMetricsIngestion", varargs...)
	ret0, _ := ret[0].(*operations.CreateOtelMetricsIngestionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOtelMetricsIngestion indicates an expected call of CreateOtelMetricsIngestion.
func (mr *MockClientServiceMockRecorder) CreateOtelMetricsIngestion(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOtelMetricsIngestion", reflect.TypeOf((*MockClientService)(nil).CreateOtelMetricsIngestion), varargs...)
}

// CreateSavedTraceSearch mocks base method.
func (m *MockClientService) CreateSavedTraceSearch(params *operations.CreateSavedTraceSearchParams, opts ...operations.ClientOption) (*operations.CreateSavedTraceSearchOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSavedTraceSearch", varargs...)
	ret0, _ := ret[0].(*operations.CreateSavedTraceSearchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSavedTraceSearch indicates an expected call of CreateSavedTraceSearch.
func (mr *MockClientServiceMockRecorder) CreateSavedTraceSearch(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSavedTraceSearch", reflect.TypeOf((*MockClientService)(nil).CreateSavedTraceSearch), varargs...)
}

// CreateService mocks base method.
func (m *MockClientService) CreateService(params *operations.CreateServiceParams, opts ...operations.ClientOption) (*operations.CreateServiceOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateService", varargs...)
	ret0, _ := ret[0].(*operations.CreateServiceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockClientServiceMockRecorder) CreateService(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockClientService)(nil).CreateService), varargs...)
}

// CreateTraceBehavior mocks base method.
func (m *MockClientService) CreateTraceBehavior(params *operations.CreateTraceBehaviorParams, opts ...operations.ClientOption) (*operations.CreateTraceBehaviorOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTraceBehavior", varargs...)
	ret0, _ := ret[0].(*operations.CreateTraceBehaviorOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTraceBehavior indicates an expected call of CreateTraceBehavior.
func (mr *MockClientServiceMockRecorder) CreateTraceBehavior(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTraceBehavior", reflect.TypeOf((*MockClientService)(nil).CreateTraceBehavior), varargs...)
}

// CreateTraceBehaviorConfig mocks base method.
func (m *MockClientService) CreateTraceBehaviorConfig(params *operations.CreateTraceBehaviorConfigParams, opts ...operations.ClientOption) (*operations.CreateTraceBehaviorConfigOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTraceBehaviorConfig", varargs...)
	ret0, _ := ret[0].(*operations.CreateTraceBehaviorConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTraceBehaviorConfig indicates an expected call of CreateTraceBehaviorConfig.
func (mr *MockClientServiceMockRecorder) CreateTraceBehaviorConfig(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTraceBehaviorConfig", reflect.TypeOf((*MockClientService)(nil).CreateTraceBehaviorConfig), varargs...)
}

// CreateTraceJaegerRemoteSamplingStrategy mocks base method.
func (m *MockClientService) CreateTraceJaegerRemoteSamplingStrategy(params *operations.CreateTraceJaegerRemoteSamplingStrategyParams, opts ...operations.ClientOption) (*operations.CreateTraceJaegerRemoteSamplingStrategyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTraceJaegerRemoteSamplingStrategy", varargs...)
	ret0, _ := ret[0].(*operations.CreateTraceJaegerRemoteSamplingStrategyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTraceJaegerRemoteSamplingStrategy indicates an expected call of CreateTraceJaegerRemoteSamplingStrategy.
func (mr *MockClientServiceMockRecorder) CreateTraceJaegerRemoteSamplingStrategy(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTraceJaegerRemoteSamplingStrategy", reflect.TypeOf((*MockClientService)(nil).CreateTraceJaegerRemoteSamplingStrategy), varargs...)
}

// CreateTraceTailSamplingRules mocks base method.
func (m *MockClientService) CreateTraceTailSamplingRules(params *operations.CreateTraceTailSamplingRulesParams, opts ...operations.ClientOption) (*operations.CreateTraceTailSamplingRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTraceTailSamplingRules", varargs...)
	ret0, _ := ret[0].(*operations.CreateTraceTailSamplingRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTraceTailSamplingRules indicates an expected call of CreateTraceTailSamplingRules.
func (mr *MockClientServiceMockRecorder) CreateTraceTailSamplingRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTraceTailSamplingRules", reflect.TypeOf((*MockClientService)(nil).CreateTraceTailSamplingRules), varargs...)
}

// DeleteDashboard mocks base method.
func (m *MockClientService) DeleteDashboard(params *operations.DeleteDashboardParams, opts ...operations.ClientOption) (*operations.DeleteDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDashboard", varargs...)
	ret0, _ := ret[0].(*operations.DeleteDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDashboard indicates an expected call of DeleteDashboard.
func (mr *MockClientServiceMockRecorder) DeleteDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboard", reflect.TypeOf((*MockClientService)(nil).DeleteDashboard), varargs...)
}

// DeleteDataset mocks base method.
func (m *MockClientService) DeleteDataset(params *operations.DeleteDatasetParams, opts ...operations.ClientOption) (*operations.DeleteDatasetOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataset", varargs...)
	ret0, _ := ret[0].(*operations.DeleteDatasetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockClientServiceMockRecorder) DeleteDataset(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockClientService)(nil).DeleteDataset), varargs...)
}

// DeleteLinkTemplate mocks base method.
func (m *MockClientService) DeleteLinkTemplate(params *operations.DeleteLinkTemplateParams, opts ...operations.ClientOption) (*operations.DeleteLinkTemplateOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLinkTemplate", varargs...)
	ret0, _ := ret[0].(*operations.DeleteLinkTemplateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLinkTemplate indicates an expected call of DeleteLinkTemplate.
func (mr *MockClientServiceMockRecorder) DeleteLinkTemplate(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinkTemplate", reflect.TypeOf((*MockClientService)(nil).DeleteLinkTemplate), varargs...)
}

// DeleteLogAllocationConfig mocks base method.
func (m *MockClientService) DeleteLogAllocationConfig(params *operations.DeleteLogAllocationConfigParams, opts ...operations.ClientOption) (*operations.DeleteLogAllocationConfigOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLogAllocationConfig", varargs...)
	ret0, _ := ret[0].(*operations.DeleteLogAllocationConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLogAllocationConfig indicates an expected call of DeleteLogAllocationConfig.
func (mr *MockClientServiceMockRecorder) DeleteLogAllocationConfig(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogAllocationConfig", reflect.TypeOf((*MockClientService)(nil).DeleteLogAllocationConfig), varargs...)
}

// DeleteNoopEntity mocks base method.
func (m *MockClientService) DeleteNoopEntity(params *operations.DeleteNoopEntityParams, opts ...operations.ClientOption) (*operations.DeleteNoopEntityOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNoopEntity", varargs...)
	ret0, _ := ret[0].(*operations.DeleteNoopEntityOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNoopEntity indicates an expected call of DeleteNoopEntity.
func (mr *MockClientServiceMockRecorder) DeleteNoopEntity(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNoopEntity", reflect.TypeOf((*MockClientService)(nil).DeleteNoopEntity), varargs...)
}

// DeleteOtelMetricsIngestion mocks base method.
func (m *MockClientService) DeleteOtelMetricsIngestion(params *operations.DeleteOtelMetricsIngestionParams, opts ...operations.ClientOption) (*operations.DeleteOtelMetricsIngestionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOtelMetricsIngestion", varargs...)
	ret0, _ := ret[0].(*operations.DeleteOtelMetricsIngestionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOtelMetricsIngestion indicates an expected call of DeleteOtelMetricsIngestion.
func (mr *MockClientServiceMockRecorder) DeleteOtelMetricsIngestion(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOtelMetricsIngestion", reflect.TypeOf((*MockClientService)(nil).DeleteOtelMetricsIngestion), varargs...)
}

// DeleteSavedTraceSearch mocks base method.
func (m *MockClientService) DeleteSavedTraceSearch(params *operations.DeleteSavedTraceSearchParams, opts ...operations.ClientOption) (*operations.DeleteSavedTraceSearchOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSavedTraceSearch", varargs...)
	ret0, _ := ret[0].(*operations.DeleteSavedTraceSearchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSavedTraceSearch indicates an expected call of DeleteSavedTraceSearch.
func (mr *MockClientServiceMockRecorder) DeleteSavedTraceSearch(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSavedTraceSearch", reflect.TypeOf((*MockClientService)(nil).DeleteSavedTraceSearch), varargs...)
}

// DeleteService mocks base method.
func (m *MockClientService) DeleteService(params *operations.DeleteServiceParams, opts ...operations.ClientOption) (*operations.DeleteServiceOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteService", varargs...)
	ret0, _ := ret[0].(*operations.DeleteServiceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockClientServiceMockRecorder) DeleteService(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockClientService)(nil).DeleteService), varargs...)
}

// DeleteTraceBehavior mocks base method.
func (m *MockClientService) DeleteTraceBehavior(params *operations.DeleteTraceBehaviorParams, opts ...operations.ClientOption) (*operations.DeleteTraceBehaviorOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTraceBehavior", varargs...)
	ret0, _ := ret[0].(*operations.DeleteTraceBehaviorOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTraceBehavior indicates an expected call of DeleteTraceBehavior.
func (mr *MockClientServiceMockRecorder) DeleteTraceBehavior(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTraceBehavior", reflect.TypeOf((*MockClientService)(nil).DeleteTraceBehavior), varargs...)
}

// DeleteTraceBehaviorConfig mocks base method.
func (m *MockClientService) DeleteTraceBehaviorConfig(params *operations.DeleteTraceBehaviorConfigParams, opts ...operations.ClientOption) (*operations.DeleteTraceBehaviorConfigOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTraceBehaviorConfig", varargs...)
	ret0, _ := ret[0].(*operations.DeleteTraceBehaviorConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTraceBehaviorConfig indicates an expected call of DeleteTraceBehaviorConfig.
func (mr *MockClientServiceMockRecorder) DeleteTraceBehaviorConfig(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTraceBehaviorConfig", reflect.TypeOf((*MockClientService)(nil).DeleteTraceBehaviorConfig), varargs...)
}

// DeleteTraceJaegerRemoteSamplingStrategy mocks base method.
func (m *MockClientService) DeleteTraceJaegerRemoteSamplingStrategy(params *operations.DeleteTraceJaegerRemoteSamplingStrategyParams, opts ...operations.ClientOption) (*operations.DeleteTraceJaegerRemoteSamplingStrategyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTraceJaegerRemoteSamplingStrategy", varargs...)
	ret0, _ := ret[0].(*operations.DeleteTraceJaegerRemoteSamplingStrategyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTraceJaegerRemoteSamplingStrategy indicates an expected call of DeleteTraceJaegerRemoteSamplingStrategy.
func (mr *MockClientServiceMockRecorder) DeleteTraceJaegerRemoteSamplingStrategy(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTraceJaegerRemoteSamplingStrategy", reflect.TypeOf((*MockClientService)(nil).DeleteTraceJaegerRemoteSamplingStrategy), varargs...)
}

// DeleteTraceTailSamplingRules mocks base method.
func (m *MockClientService) DeleteTraceTailSamplingRules(params *operations.DeleteTraceTailSamplingRulesParams, opts ...operations.ClientOption) (*operations.DeleteTraceTailSamplingRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTraceTailSamplingRules", varargs...)
	ret0, _ := ret[0].(*operations.DeleteTraceTailSamplingRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTraceTailSamplingRules indicates an expected call of DeleteTraceTailSamplingRules.
func (mr *MockClientServiceMockRecorder) DeleteTraceTailSamplingRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTraceTailSamplingRules", reflect.TypeOf((*MockClientService)(nil).DeleteTraceTailSamplingRules), varargs...)
}

// ListDashboards mocks base method.
func (m *MockClientService) ListDashboards(params *operations.ListDashboardsParams, opts ...operations.ClientOption) (*operations.ListDashboardsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDashboards", varargs...)
	ret0, _ := ret[0].(*operations.ListDashboardsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDashboards indicates an expected call of ListDashboards.
func (mr *MockClientServiceMockRecorder) ListDashboards(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDashboards", reflect.TypeOf((*MockClientService)(nil).ListDashboards), varargs...)
}

// ListDatasets mocks base method.
func (m *MockClientService) ListDatasets(params *operations.ListDatasetsParams, opts ...operations.ClientOption) (*operations.ListDatasetsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasets", varargs...)
	ret0, _ := ret[0].(*operations.ListDatasetsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasets indicates an expected call of ListDatasets.
func (mr *MockClientServiceMockRecorder) ListDatasets(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockClientService)(nil).ListDatasets), varargs...)
}

// ListLinkTemplates mocks base method.
func (m *MockClientService) ListLinkTemplates(params *operations.ListLinkTemplatesParams, opts ...operations.ClientOption) (*operations.ListLinkTemplatesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLinkTemplates", varargs...)
	ret0, _ := ret[0].(*operations.ListLinkTemplatesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLinkTemplates indicates an expected call of ListLinkTemplates.
func (mr *MockClientServiceMockRecorder) ListLinkTemplates(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinkTemplates", reflect.TypeOf((*MockClientService)(nil).ListLinkTemplates), varargs...)
}

// ListSavedTraceSearches mocks base method.
func (m *MockClientService) ListSavedTraceSearches(params *operations.ListSavedTraceSearchesParams, opts ...operations.ClientOption) (*operations.ListSavedTraceSearchesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSavedTraceSearches", varargs...)
	ret0, _ := ret[0].(*operations.ListSavedTraceSearchesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSavedTraceSearches indicates an expected call of ListSavedTraceSearches.
func (mr *MockClientServiceMockRecorder) ListSavedTraceSearches(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSavedTraceSearches", reflect.TypeOf((*MockClientService)(nil).ListSavedTraceSearches), varargs...)
}

// ListServices mocks base method.
func (m *MockClientService) ListServices(params *operations.ListServicesParams, opts ...operations.ClientOption) (*operations.ListServicesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServices", varargs...)
	ret0, _ := ret[0].(*operations.ListServicesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockClientServiceMockRecorder) ListServices(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockClientService)(nil).ListServices), varargs...)
}

// ListTraceBehaviors mocks base method.
func (m *MockClientService) ListTraceBehaviors(params *operations.ListTraceBehaviorsParams, opts ...operations.ClientOption) (*operations.ListTraceBehaviorsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTraceBehaviors", varargs...)
	ret0, _ := ret[0].(*operations.ListTraceBehaviorsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTraceBehaviors indicates an expected call of ListTraceBehaviors.
func (mr *MockClientServiceMockRecorder) ListTraceBehaviors(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTraceBehaviors", reflect.TypeOf((*MockClientService)(nil).ListTraceBehaviors), varargs...)
}

// ListTraceJaegerRemoteSamplingStrategies mocks base method.
func (m *MockClientService) ListTraceJaegerRemoteSamplingStrategies(params *operations.ListTraceJaegerRemoteSamplingStrategiesParams, opts ...operations.ClientOption) (*operations.ListTraceJaegerRemoteSamplingStrategiesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTraceJaegerRemoteSamplingStrategies", varargs...)
	ret0, _ := ret[0].(*operations.ListTraceJaegerRemoteSamplingStrategiesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTraceJaegerRemoteSamplingStrategies indicates an expected call of ListTraceJaegerRemoteSamplingStrategies.
func (mr *MockClientServiceMockRecorder) ListTraceJaegerRemoteSamplingStrategies(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTraceJaegerRemoteSamplingStrategies", reflect.TypeOf((*MockClientService)(nil).ListTraceJaegerRemoteSamplingStrategies), varargs...)
}

// ReadDashboard mocks base method.
func (m *MockClientService) ReadDashboard(params *operations.ReadDashboardParams, opts ...operations.ClientOption) (*operations.ReadDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadDashboard", varargs...)
	ret0, _ := ret[0].(*operations.ReadDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDashboard indicates an expected call of ReadDashboard.
func (mr *MockClientServiceMockRecorder) ReadDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDashboard", reflect.TypeOf((*MockClientService)(nil).ReadDashboard), varargs...)
}

// ReadDataset mocks base method.
func (m *MockClientService) ReadDataset(params *operations.ReadDatasetParams, opts ...operations.ClientOption) (*operations.ReadDatasetOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadDataset", varargs...)
	ret0, _ := ret[0].(*operations.ReadDatasetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDataset indicates an expected call of ReadDataset.
func (mr *MockClientServiceMockRecorder) ReadDataset(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDataset", reflect.TypeOf((*MockClientService)(nil).ReadDataset), varargs...)
}

// ReadLinkTemplate mocks base method.
func (m *MockClientService) ReadLinkTemplate(params *operations.ReadLinkTemplateParams, opts ...operations.ClientOption) (*operations.ReadLinkTemplateOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadLinkTemplate", varargs...)
	ret0, _ := ret[0].(*operations.ReadLinkTemplateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLinkTemplate indicates an expected call of ReadLinkTemplate.
func (mr *MockClientServiceMockRecorder) ReadLinkTemplate(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLinkTemplate", reflect.TypeOf((*MockClientService)(nil).ReadLinkTemplate), varargs...)
}

// ReadLogAllocationConfig mocks base method.
func (m *MockClientService) ReadLogAllocationConfig(params *operations.ReadLogAllocationConfigParams, opts ...operations.ClientOption) (*operations.ReadLogAllocationConfigOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadLogAllocationConfig", varargs...)
	ret0, _ := ret[0].(*operations.ReadLogAllocationConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLogAllocationConfig indicates an expected call of ReadLogAllocationConfig.
func (mr *MockClientServiceMockRecorder) ReadLogAllocationConfig(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLogAllocationConfig", reflect.TypeOf((*MockClientService)(nil).ReadLogAllocationConfig), varargs...)
}

// ReadNoopEntity mocks base method.
func (m *MockClientService) ReadNoopEntity(params *operations.ReadNoopEntityParams, opts ...operations.ClientOption) (*operations.ReadNoopEntityOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadNoopEntity", varargs...)
	ret0, _ := ret[0].(*operations.ReadNoopEntityOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNoopEntity indicates an expected call of ReadNoopEntity.
func (mr *MockClientServiceMockRecorder) ReadNoopEntity(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNoopEntity", reflect.TypeOf((*MockClientService)(nil).ReadNoopEntity), varargs...)
}

// ReadOtelMetricsIngestion mocks base method.
func (m *MockClientService) ReadOtelMetricsIngestion(params *operations.ReadOtelMetricsIngestionParams, opts ...operations.ClientOption) (*operations.ReadOtelMetricsIngestionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadOtelMetricsIngestion", varargs...)
	ret0, _ := ret[0].(*operations.ReadOtelMetricsIngestionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOtelMetricsIngestion indicates an expected call of ReadOtelMetricsIngestion.
func (mr *MockClientServiceMockRecorder) ReadOtelMetricsIngestion(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOtelMetricsIngestion", reflect.TypeOf((*MockClientService)(nil).ReadOtelMetricsIngestion), varargs...)
}

// ReadSavedTraceSearch mocks base method.
func (m *MockClientService) ReadSavedTraceSearch(params *operations.ReadSavedTraceSearchParams, opts ...operations.ClientOption) (*operations.ReadSavedTraceSearchOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadSavedTraceSearch", varargs...)
	ret0, _ := ret[0].(*operations.ReadSavedTraceSearchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSavedTraceSearch indicates an expected call of ReadSavedTraceSearch.
func (mr *MockClientServiceMockRecorder) ReadSavedTraceSearch(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSavedTraceSearch", reflect.TypeOf((*MockClientService)(nil).ReadSavedTraceSearch), varargs...)
}

// ReadService mocks base method.
func (m *MockClientService) ReadService(params *operations.ReadServiceParams, opts ...operations.ClientOption) (*operations.ReadServiceOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadService", varargs...)
	ret0, _ := ret[0].(*operations.ReadServiceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadService indicates an expected call of ReadService.
func (mr *MockClientServiceMockRecorder) ReadService(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadService", reflect.TypeOf((*MockClientService)(nil).ReadService), varargs...)
}

// ReadTraceBehavior mocks base method.
func (m *MockClientService) ReadTraceBehavior(params *operations.ReadTraceBehaviorParams, opts ...operations.ClientOption) (*operations.ReadTraceBehaviorOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadTraceBehavior", varargs...)
	ret0, _ := ret[0].(*operations.ReadTraceBehaviorOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTraceBehavior indicates an expected call of ReadTraceBehavior.
func (mr *MockClientServiceMockRecorder) ReadTraceBehavior(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTraceBehavior", reflect.TypeOf((*MockClientService)(nil).ReadTraceBehavior), varargs...)
}

// ReadTraceBehaviorConfig mocks base method.
func (m *MockClientService) ReadTraceBehaviorConfig(params *operations.ReadTraceBehaviorConfigParams, opts ...operations.ClientOption) (*operations.ReadTraceBehaviorConfigOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadTraceBehaviorConfig", varargs...)
	ret0, _ := ret[0].(*operations.ReadTraceBehaviorConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTraceBehaviorConfig indicates an expected call of ReadTraceBehaviorConfig.
func (mr *MockClientServiceMockRecorder) ReadTraceBehaviorConfig(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTraceBehaviorConfig", reflect.TypeOf((*MockClientService)(nil).ReadTraceBehaviorConfig), varargs...)
}

// ReadTraceJaegerRemoteSamplingStrategy mocks base method.
func (m *MockClientService) ReadTraceJaegerRemoteSamplingStrategy(params *operations.ReadTraceJaegerRemoteSamplingStrategyParams, opts ...operations.ClientOption) (*operations.ReadTraceJaegerRemoteSamplingStrategyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadTraceJaegerRemoteSamplingStrategy", varargs...)
	ret0, _ := ret[0].(*operations.ReadTraceJaegerRemoteSamplingStrategyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTraceJaegerRemoteSamplingStrategy indicates an expected call of ReadTraceJaegerRemoteSamplingStrategy.
func (mr *MockClientServiceMockRecorder) ReadTraceJaegerRemoteSamplingStrategy(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTraceJaegerRemoteSamplingStrategy", reflect.TypeOf((*MockClientService)(nil).ReadTraceJaegerRemoteSamplingStrategy), varargs...)
}

// ReadTraceTailSamplingRules mocks base method.
func (m *MockClientService) ReadTraceTailSamplingRules(params *operations.ReadTraceTailSamplingRulesParams, opts ...operations.ClientOption) (*operations.ReadTraceTailSamplingRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadTraceTailSamplingRules", varargs...)
	ret0, _ := ret[0].(*operations.ReadTraceTailSamplingRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTraceTailSamplingRules indicates an expected call of ReadTraceTailSamplingRules.
func (mr *MockClientServiceMockRecorder) ReadTraceTailSamplingRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTraceTailSamplingRules", reflect.TypeOf((*MockClientService)(nil).ReadTraceTailSamplingRules), varargs...)
}

// SetTransport mocks base method.
func (m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", transport)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockClientServiceMockRecorder) SetTransport(transport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), transport)
}

// SyncPrometheus mocks base method.
func (m *MockClientService) SyncPrometheus(params *operations.SyncPrometheusParams, opts ...operations.ClientOption) (*operations.SyncPrometheusOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncPrometheus", varargs...)
	ret0, _ := ret[0].(*operations.SyncPrometheusOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncPrometheus indicates an expected call of SyncPrometheus.
func (mr *MockClientServiceMockRecorder) SyncPrometheus(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncPrometheus", reflect.TypeOf((*MockClientService)(nil).SyncPrometheus), varargs...)
}

// UpdateDashboard mocks base method.
func (m *MockClientService) UpdateDashboard(params *operations.UpdateDashboardParams, opts ...operations.ClientOption) (*operations.UpdateDashboardOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDashboard", varargs...)
	ret0, _ := ret[0].(*operations.UpdateDashboardOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDashboard indicates an expected call of UpdateDashboard.
func (mr *MockClientServiceMockRecorder) UpdateDashboard(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDashboard", reflect.TypeOf((*MockClientService)(nil).UpdateDashboard), varargs...)
}

// UpdateDataset mocks base method.
func (m *MockClientService) UpdateDataset(params *operations.UpdateDatasetParams, opts ...operations.ClientOption) (*operations.UpdateDatasetOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataset", varargs...)
	ret0, _ := ret[0].(*operations.UpdateDatasetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataset indicates an expected call of UpdateDataset.
func (mr *MockClientServiceMockRecorder) UpdateDataset(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataset", reflect.TypeOf((*MockClientService)(nil).UpdateDataset), varargs...)
}

// UpdateLinkTemplate mocks base method.
func (m *MockClientService) UpdateLinkTemplate(params *operations.UpdateLinkTemplateParams, opts ...operations.ClientOption) (*operations.UpdateLinkTemplateOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLinkTemplate", varargs...)
	ret0, _ := ret[0].(*operations.UpdateLinkTemplateOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLinkTemplate indicates an expected call of UpdateLinkTemplate.
func (mr *MockClientServiceMockRecorder) UpdateLinkTemplate(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkTemplate", reflect.TypeOf((*MockClientService)(nil).UpdateLinkTemplate), varargs...)
}

// UpdateLogAllocationConfig mocks base method.
func (m *MockClientService) UpdateLogAllocationConfig(params *operations.UpdateLogAllocationConfigParams, opts ...operations.ClientOption) (*operations.UpdateLogAllocationConfigOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLogAllocationConfig", varargs...)
	ret0, _ := ret[0].(*operations.UpdateLogAllocationConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLogAllocationConfig indicates an expected call of UpdateLogAllocationConfig.
func (mr *MockClientServiceMockRecorder) UpdateLogAllocationConfig(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogAllocationConfig", reflect.TypeOf((*MockClientService)(nil).UpdateLogAllocationConfig), varargs...)
}

// UpdateNoopEntity mocks base method.
func (m *MockClientService) UpdateNoopEntity(params *operations.UpdateNoopEntityParams, opts ...operations.ClientOption) (*operations.UpdateNoopEntityOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNoopEntity", varargs...)
	ret0, _ := ret[0].(*operations.UpdateNoopEntityOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNoopEntity indicates an expected call of UpdateNoopEntity.
func (mr *MockClientServiceMockRecorder) UpdateNoopEntity(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNoopEntity", reflect.TypeOf((*MockClientService)(nil).UpdateNoopEntity), varargs...)
}

// UpdateOtelMetricsIngestion mocks base method.
func (m *MockClientService) UpdateOtelMetricsIngestion(params *operations.UpdateOtelMetricsIngestionParams, opts ...operations.ClientOption) (*operations.UpdateOtelMetricsIngestionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOtelMetricsIngestion", varargs...)
	ret0, _ := ret[0].(*operations.UpdateOtelMetricsIngestionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOtelMetricsIngestion indicates an expected call of UpdateOtelMetricsIngestion.
func (mr *MockClientServiceMockRecorder) UpdateOtelMetricsIngestion(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOtelMetricsIngestion", reflect.TypeOf((*MockClientService)(nil).UpdateOtelMetricsIngestion), varargs...)
}

// UpdateSavedTraceSearch mocks base method.
func (m *MockClientService) UpdateSavedTraceSearch(params *operations.UpdateSavedTraceSearchParams, opts ...operations.ClientOption) (*operations.UpdateSavedTraceSearchOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSavedTraceSearch", varargs...)
	ret0, _ := ret[0].(*operations.UpdateSavedTraceSearchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSavedTraceSearch indicates an expected call of UpdateSavedTraceSearch.
func (mr *MockClientServiceMockRecorder) UpdateSavedTraceSearch(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSavedTraceSearch", reflect.TypeOf((*MockClientService)(nil).UpdateSavedTraceSearch), varargs...)
}

// UpdateService mocks base method.
func (m *MockClientService) UpdateService(params *operations.UpdateServiceParams, opts ...operations.ClientOption) (*operations.UpdateServiceOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateService", varargs...)
	ret0, _ := ret[0].(*operations.UpdateServiceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockClientServiceMockRecorder) UpdateService(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockClientService)(nil).UpdateService), varargs...)
}

// UpdateTraceBehavior mocks base method.
func (m *MockClientService) UpdateTraceBehavior(params *operations.UpdateTraceBehaviorParams, opts ...operations.ClientOption) (*operations.UpdateTraceBehaviorOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTraceBehavior", varargs...)
	ret0, _ := ret[0].(*operations.UpdateTraceBehaviorOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTraceBehavior indicates an expected call of UpdateTraceBehavior.
func (mr *MockClientServiceMockRecorder) UpdateTraceBehavior(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTraceBehavior", reflect.TypeOf((*MockClientService)(nil).UpdateTraceBehavior), varargs...)
}

// UpdateTraceBehaviorConfig mocks base method.
func (m *MockClientService) UpdateTraceBehaviorConfig(params *operations.UpdateTraceBehaviorConfigParams, opts ...operations.ClientOption) (*operations.UpdateTraceBehaviorConfigOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTraceBehaviorConfig", varargs...)
	ret0, _ := ret[0].(*operations.UpdateTraceBehaviorConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTraceBehaviorConfig indicates an expected call of UpdateTraceBehaviorConfig.
func (mr *MockClientServiceMockRecorder) UpdateTraceBehaviorConfig(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTraceBehaviorConfig", reflect.TypeOf((*MockClientService)(nil).UpdateTraceBehaviorConfig), varargs...)
}

// UpdateTraceJaegerRemoteSamplingStrategy mocks base method.
func (m *MockClientService) UpdateTraceJaegerRemoteSamplingStrategy(params *operations.UpdateTraceJaegerRemoteSamplingStrategyParams, opts ...operations.ClientOption) (*operations.UpdateTraceJaegerRemoteSamplingStrategyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTraceJaegerRemoteSamplingStrategy", varargs...)
	ret0, _ := ret[0].(*operations.UpdateTraceJaegerRemoteSamplingStrategyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTraceJaegerRemoteSamplingStrategy indicates an expected call of UpdateTraceJaegerRemoteSamplingStrategy.
func (mr *MockClientServiceMockRecorder) UpdateTraceJaegerRemoteSamplingStrategy(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTraceJaegerRemoteSamplingStrategy", reflect.TypeOf((*MockClientService)(nil).UpdateTraceJaegerRemoteSamplingStrategy), varargs...)
}

// UpdateTraceTailSamplingRules mocks base method.
func (m *MockClientService) UpdateTraceTailSamplingRules(params *operations.UpdateTraceTailSamplingRulesParams, opts ...operations.ClientOption) (*operations.UpdateTraceTailSamplingRulesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTraceTailSamplingRules", varargs...)
	ret0, _ := ret[0].(*operations.UpdateTraceTailSamplingRulesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTraceTailSamplingRules indicates an expected call of UpdateTraceTailSamplingRules.
func (mr *MockClientServiceMockRecorder) UpdateTraceTailSamplingRules(params interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTraceTailSamplingRules", reflect.TypeOf((*MockClientService)(nil).UpdateTraceTailSamplingRules), varargs...)
}
