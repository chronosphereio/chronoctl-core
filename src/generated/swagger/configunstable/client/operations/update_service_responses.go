// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configunstable/models"
)

// UpdateServiceReader is a Reader for the UpdateService structure.
type UpdateServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateServiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateServiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateServiceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateServiceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateServiceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateServiceOK creates a UpdateServiceOK with default headers values
func NewUpdateServiceOK() *UpdateServiceOK {
	return &UpdateServiceOK{}
}

/*
UpdateServiceOK describes a response with status code 200, with default header values.

A successful response containing the updated Service.
*/
type UpdateServiceOK struct {
	Payload *models.ConfigunstableUpdateServiceResponse
}

// IsSuccess returns true when this update service o k response has a 2xx status code
func (o *UpdateServiceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update service o k response has a 3xx status code
func (o *UpdateServiceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service o k response has a 4xx status code
func (o *UpdateServiceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update service o k response has a 5xx status code
func (o *UpdateServiceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update service o k response a status code equal to that given
func (o *UpdateServiceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update service o k response
func (o *UpdateServiceOK) Code() int {
	return 200
}

func (o *UpdateServiceOK) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/services/{slug}][%d] updateServiceOK  %+v", 200, o.Payload)
}

func (o *UpdateServiceOK) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/services/{slug}][%d] updateServiceOK  %+v", 200, o.Payload)
}

func (o *UpdateServiceOK) GetPayload() *models.ConfigunstableUpdateServiceResponse {
	return o.Payload
}

func (o *UpdateServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigunstableUpdateServiceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceBadRequest creates a UpdateServiceBadRequest with default headers values
func NewUpdateServiceBadRequest() *UpdateServiceBadRequest {
	return &UpdateServiceBadRequest{}
}

/*
UpdateServiceBadRequest describes a response with status code 400, with default header values.

Cannot update the Service because the request is invalid.
*/
type UpdateServiceBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update service bad request response has a 2xx status code
func (o *UpdateServiceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service bad request response has a 3xx status code
func (o *UpdateServiceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service bad request response has a 4xx status code
func (o *UpdateServiceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update service bad request response has a 5xx status code
func (o *UpdateServiceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update service bad request response a status code equal to that given
func (o *UpdateServiceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update service bad request response
func (o *UpdateServiceBadRequest) Code() int {
	return 400
}

func (o *UpdateServiceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/services/{slug}][%d] updateServiceBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServiceBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/services/{slug}][%d] updateServiceBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServiceBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateServiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceNotFound creates a UpdateServiceNotFound with default headers values
func NewUpdateServiceNotFound() *UpdateServiceNotFound {
	return &UpdateServiceNotFound{}
}

/*
UpdateServiceNotFound describes a response with status code 404, with default header values.

Cannot update the Service because the slug does not exist.
*/
type UpdateServiceNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update service not found response has a 2xx status code
func (o *UpdateServiceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service not found response has a 3xx status code
func (o *UpdateServiceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service not found response has a 4xx status code
func (o *UpdateServiceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update service not found response has a 5xx status code
func (o *UpdateServiceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update service not found response a status code equal to that given
func (o *UpdateServiceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update service not found response
func (o *UpdateServiceNotFound) Code() int {
	return 404
}

func (o *UpdateServiceNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/services/{slug}][%d] updateServiceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateServiceNotFound) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/services/{slug}][%d] updateServiceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateServiceNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateServiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceConflict creates a UpdateServiceConflict with default headers values
func NewUpdateServiceConflict() *UpdateServiceConflict {
	return &UpdateServiceConflict{}
}

/*
UpdateServiceConflict describes a response with status code 409, with default header values.

Cannot update the Service because there is a conflict with an existing Service.
*/
type UpdateServiceConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update service conflict response has a 2xx status code
func (o *UpdateServiceConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service conflict response has a 3xx status code
func (o *UpdateServiceConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service conflict response has a 4xx status code
func (o *UpdateServiceConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update service conflict response has a 5xx status code
func (o *UpdateServiceConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update service conflict response a status code equal to that given
func (o *UpdateServiceConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update service conflict response
func (o *UpdateServiceConflict) Code() int {
	return 409
}

func (o *UpdateServiceConflict) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/services/{slug}][%d] updateServiceConflict  %+v", 409, o.Payload)
}

func (o *UpdateServiceConflict) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/services/{slug}][%d] updateServiceConflict  %+v", 409, o.Payload)
}

func (o *UpdateServiceConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateServiceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceInternalServerError creates a UpdateServiceInternalServerError with default headers values
func NewUpdateServiceInternalServerError() *UpdateServiceInternalServerError {
	return &UpdateServiceInternalServerError{}
}

/*
UpdateServiceInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateServiceInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update service internal server error response has a 2xx status code
func (o *UpdateServiceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service internal server error response has a 3xx status code
func (o *UpdateServiceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service internal server error response has a 4xx status code
func (o *UpdateServiceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update service internal server error response has a 5xx status code
func (o *UpdateServiceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update service internal server error response a status code equal to that given
func (o *UpdateServiceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update service internal server error response
func (o *UpdateServiceInternalServerError) Code() int {
	return 500
}

func (o *UpdateServiceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/services/{slug}][%d] updateServiceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateServiceInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/services/{slug}][%d] updateServiceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateServiceInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateServiceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceDefault creates a UpdateServiceDefault with default headers values
func NewUpdateServiceDefault(code int) *UpdateServiceDefault {
	return &UpdateServiceDefault{
		_statusCode: code,
	}
}

/*
UpdateServiceDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateServiceDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update service default response has a 2xx status code
func (o *UpdateServiceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update service default response has a 3xx status code
func (o *UpdateServiceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update service default response has a 4xx status code
func (o *UpdateServiceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update service default response has a 5xx status code
func (o *UpdateServiceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update service default response a status code equal to that given
func (o *UpdateServiceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update service default response
func (o *UpdateServiceDefault) Code() int {
	return o._statusCode
}

func (o *UpdateServiceDefault) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/services/{slug}][%d] UpdateService default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateServiceDefault) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/services/{slug}][%d] UpdateService default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateServiceDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateServiceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateServiceBody update service body
swagger:model UpdateServiceBody
*/
type UpdateServiceBody struct {

	// If true, the Service will be created if it does not already exist, identified by slug. If false, an error will be returned if the Service does not already exist.
	CreateIfMissing bool `json:"create_if_missing,omitempty"`

	// If true, the Service will not be created nor updated, and no response Service will be returned. The response will return an error if the given Service is invalid.
	DryRun bool `json:"dry_run,omitempty"`

	// service
	Service *models.ConfigunstableService `json:"service,omitempty"`
}

// Validate validates this update service body
func (o *UpdateServiceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServiceBody) validateService(formats strfmt.Registry) error {
	if swag.IsZero(o.Service) { // not required
		return nil
	}

	if o.Service != nil {
		if err := o.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update service body based on the context it is used
func (o *UpdateServiceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServiceBody) contextValidateService(ctx context.Context, formats strfmt.Registry) error {

	if o.Service != nil {

		if swag.IsZero(o.Service) { // not required
			return nil
		}

		if err := o.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "service")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServiceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServiceBody) UnmarshalBinary(b []byte) error {
	var res UpdateServiceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
