// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configunstable/models"
)

// ListTraceBehaviorsReader is a Reader for the ListTraceBehaviors structure.
type ListTraceBehaviorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTraceBehaviorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTraceBehaviorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewListTraceBehaviorsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListTraceBehaviorsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListTraceBehaviorsOK creates a ListTraceBehaviorsOK with default headers values
func NewListTraceBehaviorsOK() *ListTraceBehaviorsOK {
	return &ListTraceBehaviorsOK{}
}

/*
ListTraceBehaviorsOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListTraceBehaviorsOK struct {
	Payload *models.ConfigunstableListTraceBehaviorsResponse
}

// IsSuccess returns true when this list trace behaviors o k response has a 2xx status code
func (o *ListTraceBehaviorsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list trace behaviors o k response has a 3xx status code
func (o *ListTraceBehaviorsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list trace behaviors o k response has a 4xx status code
func (o *ListTraceBehaviorsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list trace behaviors o k response has a 5xx status code
func (o *ListTraceBehaviorsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list trace behaviors o k response a status code equal to that given
func (o *ListTraceBehaviorsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list trace behaviors o k response
func (o *ListTraceBehaviorsOK) Code() int {
	return 200
}

func (o *ListTraceBehaviorsOK) Error() string {
	return fmt.Sprintf("[GET /api/unstable/config/trace-behaviors][%d] listTraceBehaviorsOK  %+v", 200, o.Payload)
}

func (o *ListTraceBehaviorsOK) String() string {
	return fmt.Sprintf("[GET /api/unstable/config/trace-behaviors][%d] listTraceBehaviorsOK  %+v", 200, o.Payload)
}

func (o *ListTraceBehaviorsOK) GetPayload() *models.ConfigunstableListTraceBehaviorsResponse {
	return o.Payload
}

func (o *ListTraceBehaviorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigunstableListTraceBehaviorsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTraceBehaviorsInternalServerError creates a ListTraceBehaviorsInternalServerError with default headers values
func NewListTraceBehaviorsInternalServerError() *ListTraceBehaviorsInternalServerError {
	return &ListTraceBehaviorsInternalServerError{}
}

/*
ListTraceBehaviorsInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type ListTraceBehaviorsInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this list trace behaviors internal server error response has a 2xx status code
func (o *ListTraceBehaviorsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list trace behaviors internal server error response has a 3xx status code
func (o *ListTraceBehaviorsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list trace behaviors internal server error response has a 4xx status code
func (o *ListTraceBehaviorsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list trace behaviors internal server error response has a 5xx status code
func (o *ListTraceBehaviorsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list trace behaviors internal server error response a status code equal to that given
func (o *ListTraceBehaviorsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list trace behaviors internal server error response
func (o *ListTraceBehaviorsInternalServerError) Code() int {
	return 500
}

func (o *ListTraceBehaviorsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/unstable/config/trace-behaviors][%d] listTraceBehaviorsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListTraceBehaviorsInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/unstable/config/trace-behaviors][%d] listTraceBehaviorsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListTraceBehaviorsInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *ListTraceBehaviorsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTraceBehaviorsDefault creates a ListTraceBehaviorsDefault with default headers values
func NewListTraceBehaviorsDefault(code int) *ListTraceBehaviorsDefault {
	return &ListTraceBehaviorsDefault{
		_statusCode: code,
	}
}

/*
ListTraceBehaviorsDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type ListTraceBehaviorsDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this list trace behaviors default response has a 2xx status code
func (o *ListTraceBehaviorsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list trace behaviors default response has a 3xx status code
func (o *ListTraceBehaviorsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list trace behaviors default response has a 4xx status code
func (o *ListTraceBehaviorsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list trace behaviors default response has a 5xx status code
func (o *ListTraceBehaviorsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list trace behaviors default response a status code equal to that given
func (o *ListTraceBehaviorsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list trace behaviors default response
func (o *ListTraceBehaviorsDefault) Code() int {
	return o._statusCode
}

func (o *ListTraceBehaviorsDefault) Error() string {
	return fmt.Sprintf("[GET /api/unstable/config/trace-behaviors][%d] ListTraceBehaviors default  %+v", o._statusCode, o.Payload)
}

func (o *ListTraceBehaviorsDefault) String() string {
	return fmt.Sprintf("[GET /api/unstable/config/trace-behaviors][%d] ListTraceBehaviors default  %+v", o._statusCode, o.Payload)
}

func (o *ListTraceBehaviorsDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *ListTraceBehaviorsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
