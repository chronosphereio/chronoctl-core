// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configunstable/models"
)

// DeleteServiceReader is a Reader for the DeleteService structure.
type DeleteServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteServiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteServiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteServiceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteServiceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteServiceOK creates a DeleteServiceOK with default headers values
func NewDeleteServiceOK() *DeleteServiceOK {
	return &DeleteServiceOK{}
}

/*
DeleteServiceOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteServiceOK struct {
	Payload models.ConfigunstableDeleteServiceResponse
}

// IsSuccess returns true when this delete service o k response has a 2xx status code
func (o *DeleteServiceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete service o k response has a 3xx status code
func (o *DeleteServiceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete service o k response has a 4xx status code
func (o *DeleteServiceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete service o k response has a 5xx status code
func (o *DeleteServiceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete service o k response a status code equal to that given
func (o *DeleteServiceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete service o k response
func (o *DeleteServiceOK) Code() int {
	return 200
}

func (o *DeleteServiceOK) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/services/{slug}][%d] deleteServiceOK  %+v", 200, o.Payload)
}

func (o *DeleteServiceOK) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/services/{slug}][%d] deleteServiceOK  %+v", 200, o.Payload)
}

func (o *DeleteServiceOK) GetPayload() models.ConfigunstableDeleteServiceResponse {
	return o.Payload
}

func (o *DeleteServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteServiceBadRequest creates a DeleteServiceBadRequest with default headers values
func NewDeleteServiceBadRequest() *DeleteServiceBadRequest {
	return &DeleteServiceBadRequest{}
}

/*
DeleteServiceBadRequest describes a response with status code 400, with default header values.

Cannot delete the Service because it is in use.
*/
type DeleteServiceBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete service bad request response has a 2xx status code
func (o *DeleteServiceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete service bad request response has a 3xx status code
func (o *DeleteServiceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete service bad request response has a 4xx status code
func (o *DeleteServiceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete service bad request response has a 5xx status code
func (o *DeleteServiceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete service bad request response a status code equal to that given
func (o *DeleteServiceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete service bad request response
func (o *DeleteServiceBadRequest) Code() int {
	return 400
}

func (o *DeleteServiceBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/services/{slug}][%d] deleteServiceBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteServiceBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/services/{slug}][%d] deleteServiceBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteServiceBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteServiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteServiceNotFound creates a DeleteServiceNotFound with default headers values
func NewDeleteServiceNotFound() *DeleteServiceNotFound {
	return &DeleteServiceNotFound{}
}

/*
DeleteServiceNotFound describes a response with status code 404, with default header values.

Cannot delete the Service because the slug does not exist.
*/
type DeleteServiceNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete service not found response has a 2xx status code
func (o *DeleteServiceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete service not found response has a 3xx status code
func (o *DeleteServiceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete service not found response has a 4xx status code
func (o *DeleteServiceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete service not found response has a 5xx status code
func (o *DeleteServiceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete service not found response a status code equal to that given
func (o *DeleteServiceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete service not found response
func (o *DeleteServiceNotFound) Code() int {
	return 404
}

func (o *DeleteServiceNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/services/{slug}][%d] deleteServiceNotFound  %+v", 404, o.Payload)
}

func (o *DeleteServiceNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/services/{slug}][%d] deleteServiceNotFound  %+v", 404, o.Payload)
}

func (o *DeleteServiceNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteServiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteServiceInternalServerError creates a DeleteServiceInternalServerError with default headers values
func NewDeleteServiceInternalServerError() *DeleteServiceInternalServerError {
	return &DeleteServiceInternalServerError{}
}

/*
DeleteServiceInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type DeleteServiceInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete service internal server error response has a 2xx status code
func (o *DeleteServiceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete service internal server error response has a 3xx status code
func (o *DeleteServiceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete service internal server error response has a 4xx status code
func (o *DeleteServiceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete service internal server error response has a 5xx status code
func (o *DeleteServiceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete service internal server error response a status code equal to that given
func (o *DeleteServiceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete service internal server error response
func (o *DeleteServiceInternalServerError) Code() int {
	return 500
}

func (o *DeleteServiceInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/services/{slug}][%d] deleteServiceInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteServiceInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/services/{slug}][%d] deleteServiceInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteServiceInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteServiceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteServiceDefault creates a DeleteServiceDefault with default headers values
func NewDeleteServiceDefault(code int) *DeleteServiceDefault {
	return &DeleteServiceDefault{
		_statusCode: code,
	}
}

/*
DeleteServiceDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type DeleteServiceDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this delete service default response has a 2xx status code
func (o *DeleteServiceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete service default response has a 3xx status code
func (o *DeleteServiceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete service default response has a 4xx status code
func (o *DeleteServiceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete service default response has a 5xx status code
func (o *DeleteServiceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete service default response a status code equal to that given
func (o *DeleteServiceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete service default response
func (o *DeleteServiceDefault) Code() int {
	return o._statusCode
}

func (o *DeleteServiceDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/services/{slug}][%d] DeleteService default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteServiceDefault) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/services/{slug}][%d] DeleteService default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteServiceDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *DeleteServiceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
