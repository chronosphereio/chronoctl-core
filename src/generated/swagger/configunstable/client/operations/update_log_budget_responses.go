// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configunstable/models"
)

// UpdateLogBudgetReader is a Reader for the UpdateLogBudget structure.
type UpdateLogBudgetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLogBudgetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateLogBudgetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateLogBudgetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateLogBudgetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateLogBudgetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateLogBudgetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateLogBudgetOK creates a UpdateLogBudgetOK with default headers values
func NewUpdateLogBudgetOK() *UpdateLogBudgetOK {
	return &UpdateLogBudgetOK{}
}

/*
UpdateLogBudgetOK describes a response with status code 200, with default header values.

A successful response containing the updated LogBudget.
*/
type UpdateLogBudgetOK struct {
	Payload *models.ConfigunstableUpdateLogBudgetResponse
}

// IsSuccess returns true when this update log budget o k response has a 2xx status code
func (o *UpdateLogBudgetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update log budget o k response has a 3xx status code
func (o *UpdateLogBudgetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log budget o k response has a 4xx status code
func (o *UpdateLogBudgetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update log budget o k response has a 5xx status code
func (o *UpdateLogBudgetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update log budget o k response a status code equal to that given
func (o *UpdateLogBudgetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update log budget o k response
func (o *UpdateLogBudgetOK) Code() int {
	return 200
}

func (o *UpdateLogBudgetOK) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-budget][%d] updateLogBudgetOK  %+v", 200, o.Payload)
}

func (o *UpdateLogBudgetOK) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-budget][%d] updateLogBudgetOK  %+v", 200, o.Payload)
}

func (o *UpdateLogBudgetOK) GetPayload() *models.ConfigunstableUpdateLogBudgetResponse {
	return o.Payload
}

func (o *UpdateLogBudgetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigunstableUpdateLogBudgetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogBudgetBadRequest creates a UpdateLogBudgetBadRequest with default headers values
func NewUpdateLogBudgetBadRequest() *UpdateLogBudgetBadRequest {
	return &UpdateLogBudgetBadRequest{}
}

/*
UpdateLogBudgetBadRequest describes a response with status code 400, with default header values.

Cannot update the LogBudget because the request is invalid.
*/
type UpdateLogBudgetBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log budget bad request response has a 2xx status code
func (o *UpdateLogBudgetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log budget bad request response has a 3xx status code
func (o *UpdateLogBudgetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log budget bad request response has a 4xx status code
func (o *UpdateLogBudgetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update log budget bad request response has a 5xx status code
func (o *UpdateLogBudgetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update log budget bad request response a status code equal to that given
func (o *UpdateLogBudgetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update log budget bad request response
func (o *UpdateLogBudgetBadRequest) Code() int {
	return 400
}

func (o *UpdateLogBudgetBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-budget][%d] updateLogBudgetBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateLogBudgetBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-budget][%d] updateLogBudgetBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateLogBudgetBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogBudgetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogBudgetNotFound creates a UpdateLogBudgetNotFound with default headers values
func NewUpdateLogBudgetNotFound() *UpdateLogBudgetNotFound {
	return &UpdateLogBudgetNotFound{}
}

/*
UpdateLogBudgetNotFound describes a response with status code 404, with default header values.

Cannot update the LogBudget because LogBudget has not been created.
*/
type UpdateLogBudgetNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log budget not found response has a 2xx status code
func (o *UpdateLogBudgetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log budget not found response has a 3xx status code
func (o *UpdateLogBudgetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log budget not found response has a 4xx status code
func (o *UpdateLogBudgetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update log budget not found response has a 5xx status code
func (o *UpdateLogBudgetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update log budget not found response a status code equal to that given
func (o *UpdateLogBudgetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update log budget not found response
func (o *UpdateLogBudgetNotFound) Code() int {
	return 404
}

func (o *UpdateLogBudgetNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-budget][%d] updateLogBudgetNotFound  %+v", 404, o.Payload)
}

func (o *UpdateLogBudgetNotFound) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-budget][%d] updateLogBudgetNotFound  %+v", 404, o.Payload)
}

func (o *UpdateLogBudgetNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogBudgetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogBudgetInternalServerError creates a UpdateLogBudgetInternalServerError with default headers values
func NewUpdateLogBudgetInternalServerError() *UpdateLogBudgetInternalServerError {
	return &UpdateLogBudgetInternalServerError{}
}

/*
UpdateLogBudgetInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateLogBudgetInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log budget internal server error response has a 2xx status code
func (o *UpdateLogBudgetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log budget internal server error response has a 3xx status code
func (o *UpdateLogBudgetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log budget internal server error response has a 4xx status code
func (o *UpdateLogBudgetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update log budget internal server error response has a 5xx status code
func (o *UpdateLogBudgetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update log budget internal server error response a status code equal to that given
func (o *UpdateLogBudgetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update log budget internal server error response
func (o *UpdateLogBudgetInternalServerError) Code() int {
	return 500
}

func (o *UpdateLogBudgetInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-budget][%d] updateLogBudgetInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateLogBudgetInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-budget][%d] updateLogBudgetInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateLogBudgetInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogBudgetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogBudgetDefault creates a UpdateLogBudgetDefault with default headers values
func NewUpdateLogBudgetDefault(code int) *UpdateLogBudgetDefault {
	return &UpdateLogBudgetDefault{
		_statusCode: code,
	}
}

/*
UpdateLogBudgetDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateLogBudgetDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update log budget default response has a 2xx status code
func (o *UpdateLogBudgetDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update log budget default response has a 3xx status code
func (o *UpdateLogBudgetDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update log budget default response has a 4xx status code
func (o *UpdateLogBudgetDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update log budget default response has a 5xx status code
func (o *UpdateLogBudgetDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update log budget default response a status code equal to that given
func (o *UpdateLogBudgetDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update log budget default response
func (o *UpdateLogBudgetDefault) Code() int {
	return o._statusCode
}

func (o *UpdateLogBudgetDefault) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-budget][%d] UpdateLogBudget default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateLogBudgetDefault) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-budget][%d] UpdateLogBudget default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateLogBudgetDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateLogBudgetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
