// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configunstable/models"
)

// DeleteLogParserConfigReader is a Reader for the DeleteLogParserConfig structure.
type DeleteLogParserConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLogParserConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteLogParserConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteLogParserConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteLogParserConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteLogParserConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteLogParserConfigDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteLogParserConfigOK creates a DeleteLogParserConfigOK with default headers values
func NewDeleteLogParserConfigOK() *DeleteLogParserConfigOK {
	return &DeleteLogParserConfigOK{}
}

/*
DeleteLogParserConfigOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteLogParserConfigOK struct {
	Payload models.ConfigunstableDeleteLogParserConfigResponse
}

// IsSuccess returns true when this delete log parser config o k response has a 2xx status code
func (o *DeleteLogParserConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete log parser config o k response has a 3xx status code
func (o *DeleteLogParserConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log parser config o k response has a 4xx status code
func (o *DeleteLogParserConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete log parser config o k response has a 5xx status code
func (o *DeleteLogParserConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log parser config o k response a status code equal to that given
func (o *DeleteLogParserConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete log parser config o k response
func (o *DeleteLogParserConfigOK) Code() int {
	return 200
}

func (o *DeleteLogParserConfigOK) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/log-parser-config][%d] deleteLogParserConfigOK  %+v", 200, o.Payload)
}

func (o *DeleteLogParserConfigOK) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/log-parser-config][%d] deleteLogParserConfigOK  %+v", 200, o.Payload)
}

func (o *DeleteLogParserConfigOK) GetPayload() models.ConfigunstableDeleteLogParserConfigResponse {
	return o.Payload
}

func (o *DeleteLogParserConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogParserConfigBadRequest creates a DeleteLogParserConfigBadRequest with default headers values
func NewDeleteLogParserConfigBadRequest() *DeleteLogParserConfigBadRequest {
	return &DeleteLogParserConfigBadRequest{}
}

/*
DeleteLogParserConfigBadRequest describes a response with status code 400, with default header values.

Cannot delete the LogParserConfig because it is in use.
*/
type DeleteLogParserConfigBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete log parser config bad request response has a 2xx status code
func (o *DeleteLogParserConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log parser config bad request response has a 3xx status code
func (o *DeleteLogParserConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log parser config bad request response has a 4xx status code
func (o *DeleteLogParserConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete log parser config bad request response has a 5xx status code
func (o *DeleteLogParserConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log parser config bad request response a status code equal to that given
func (o *DeleteLogParserConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete log parser config bad request response
func (o *DeleteLogParserConfigBadRequest) Code() int {
	return 400
}

func (o *DeleteLogParserConfigBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/log-parser-config][%d] deleteLogParserConfigBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLogParserConfigBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/log-parser-config][%d] deleteLogParserConfigBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLogParserConfigBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteLogParserConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogParserConfigNotFound creates a DeleteLogParserConfigNotFound with default headers values
func NewDeleteLogParserConfigNotFound() *DeleteLogParserConfigNotFound {
	return &DeleteLogParserConfigNotFound{}
}

/*
DeleteLogParserConfigNotFound describes a response with status code 404, with default header values.

Cannot delete the LogParserConfig because the slug does not exist.
*/
type DeleteLogParserConfigNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete log parser config not found response has a 2xx status code
func (o *DeleteLogParserConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log parser config not found response has a 3xx status code
func (o *DeleteLogParserConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log parser config not found response has a 4xx status code
func (o *DeleteLogParserConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete log parser config not found response has a 5xx status code
func (o *DeleteLogParserConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete log parser config not found response a status code equal to that given
func (o *DeleteLogParserConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete log parser config not found response
func (o *DeleteLogParserConfigNotFound) Code() int {
	return 404
}

func (o *DeleteLogParserConfigNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/log-parser-config][%d] deleteLogParserConfigNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLogParserConfigNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/log-parser-config][%d] deleteLogParserConfigNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLogParserConfigNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteLogParserConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogParserConfigInternalServerError creates a DeleteLogParserConfigInternalServerError with default headers values
func NewDeleteLogParserConfigInternalServerError() *DeleteLogParserConfigInternalServerError {
	return &DeleteLogParserConfigInternalServerError{}
}

/*
DeleteLogParserConfigInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type DeleteLogParserConfigInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete log parser config internal server error response has a 2xx status code
func (o *DeleteLogParserConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete log parser config internal server error response has a 3xx status code
func (o *DeleteLogParserConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete log parser config internal server error response has a 4xx status code
func (o *DeleteLogParserConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete log parser config internal server error response has a 5xx status code
func (o *DeleteLogParserConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete log parser config internal server error response a status code equal to that given
func (o *DeleteLogParserConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete log parser config internal server error response
func (o *DeleteLogParserConfigInternalServerError) Code() int {
	return 500
}

func (o *DeleteLogParserConfigInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/log-parser-config][%d] deleteLogParserConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLogParserConfigInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/log-parser-config][%d] deleteLogParserConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLogParserConfigInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteLogParserConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLogParserConfigDefault creates a DeleteLogParserConfigDefault with default headers values
func NewDeleteLogParserConfigDefault(code int) *DeleteLogParserConfigDefault {
	return &DeleteLogParserConfigDefault{
		_statusCode: code,
	}
}

/*
DeleteLogParserConfigDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type DeleteLogParserConfigDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this delete log parser config default response has a 2xx status code
func (o *DeleteLogParserConfigDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete log parser config default response has a 3xx status code
func (o *DeleteLogParserConfigDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete log parser config default response has a 4xx status code
func (o *DeleteLogParserConfigDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete log parser config default response has a 5xx status code
func (o *DeleteLogParserConfigDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete log parser config default response a status code equal to that given
func (o *DeleteLogParserConfigDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete log parser config default response
func (o *DeleteLogParserConfigDefault) Code() int {
	return o._statusCode
}

func (o *DeleteLogParserConfigDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/log-parser-config][%d] DeleteLogParserConfig default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteLogParserConfigDefault) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/log-parser-config][%d] DeleteLogParserConfig default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteLogParserConfigDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *DeleteLogParserConfigDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
