// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configunstable/models"
)

// DeleteOpenTelemetryMetricsIngestionReader is a Reader for the DeleteOpenTelemetryMetricsIngestion structure.
type DeleteOpenTelemetryMetricsIngestionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteOpenTelemetryMetricsIngestionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteOpenTelemetryMetricsIngestionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteOpenTelemetryMetricsIngestionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteOpenTelemetryMetricsIngestionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteOpenTelemetryMetricsIngestionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteOpenTelemetryMetricsIngestionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteOpenTelemetryMetricsIngestionOK creates a DeleteOpenTelemetryMetricsIngestionOK with default headers values
func NewDeleteOpenTelemetryMetricsIngestionOK() *DeleteOpenTelemetryMetricsIngestionOK {
	return &DeleteOpenTelemetryMetricsIngestionOK{}
}

/*
DeleteOpenTelemetryMetricsIngestionOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteOpenTelemetryMetricsIngestionOK struct {
	Payload models.ConfigunstableDeleteOpenTelemetryMetricsIngestionResponse
}

// IsSuccess returns true when this delete open telemetry metrics ingestion o k response has a 2xx status code
func (o *DeleteOpenTelemetryMetricsIngestionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete open telemetry metrics ingestion o k response has a 3xx status code
func (o *DeleteOpenTelemetryMetricsIngestionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete open telemetry metrics ingestion o k response has a 4xx status code
func (o *DeleteOpenTelemetryMetricsIngestionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete open telemetry metrics ingestion o k response has a 5xx status code
func (o *DeleteOpenTelemetryMetricsIngestionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete open telemetry metrics ingestion o k response a status code equal to that given
func (o *DeleteOpenTelemetryMetricsIngestionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete open telemetry metrics ingestion o k response
func (o *DeleteOpenTelemetryMetricsIngestionOK) Code() int {
	return 200
}

func (o *DeleteOpenTelemetryMetricsIngestionOK) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/open-telemetry-metrics-ingestion][%d] deleteOpenTelemetryMetricsIngestionOK  %+v", 200, o.Payload)
}

func (o *DeleteOpenTelemetryMetricsIngestionOK) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/open-telemetry-metrics-ingestion][%d] deleteOpenTelemetryMetricsIngestionOK  %+v", 200, o.Payload)
}

func (o *DeleteOpenTelemetryMetricsIngestionOK) GetPayload() models.ConfigunstableDeleteOpenTelemetryMetricsIngestionResponse {
	return o.Payload
}

func (o *DeleteOpenTelemetryMetricsIngestionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOpenTelemetryMetricsIngestionBadRequest creates a DeleteOpenTelemetryMetricsIngestionBadRequest with default headers values
func NewDeleteOpenTelemetryMetricsIngestionBadRequest() *DeleteOpenTelemetryMetricsIngestionBadRequest {
	return &DeleteOpenTelemetryMetricsIngestionBadRequest{}
}

/*
DeleteOpenTelemetryMetricsIngestionBadRequest describes a response with status code 400, with default header values.

Cannot delete the OpenTelemetryMetricsIngestion because it is in use.
*/
type DeleteOpenTelemetryMetricsIngestionBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete open telemetry metrics ingestion bad request response has a 2xx status code
func (o *DeleteOpenTelemetryMetricsIngestionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete open telemetry metrics ingestion bad request response has a 3xx status code
func (o *DeleteOpenTelemetryMetricsIngestionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete open telemetry metrics ingestion bad request response has a 4xx status code
func (o *DeleteOpenTelemetryMetricsIngestionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete open telemetry metrics ingestion bad request response has a 5xx status code
func (o *DeleteOpenTelemetryMetricsIngestionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete open telemetry metrics ingestion bad request response a status code equal to that given
func (o *DeleteOpenTelemetryMetricsIngestionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete open telemetry metrics ingestion bad request response
func (o *DeleteOpenTelemetryMetricsIngestionBadRequest) Code() int {
	return 400
}

func (o *DeleteOpenTelemetryMetricsIngestionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/open-telemetry-metrics-ingestion][%d] deleteOpenTelemetryMetricsIngestionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteOpenTelemetryMetricsIngestionBadRequest) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/open-telemetry-metrics-ingestion][%d] deleteOpenTelemetryMetricsIngestionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteOpenTelemetryMetricsIngestionBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteOpenTelemetryMetricsIngestionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOpenTelemetryMetricsIngestionNotFound creates a DeleteOpenTelemetryMetricsIngestionNotFound with default headers values
func NewDeleteOpenTelemetryMetricsIngestionNotFound() *DeleteOpenTelemetryMetricsIngestionNotFound {
	return &DeleteOpenTelemetryMetricsIngestionNotFound{}
}

/*
DeleteOpenTelemetryMetricsIngestionNotFound describes a response with status code 404, with default header values.

Cannot delete the OpenTelemetryMetricsIngestion because the slug does not exist.
*/
type DeleteOpenTelemetryMetricsIngestionNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete open telemetry metrics ingestion not found response has a 2xx status code
func (o *DeleteOpenTelemetryMetricsIngestionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete open telemetry metrics ingestion not found response has a 3xx status code
func (o *DeleteOpenTelemetryMetricsIngestionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete open telemetry metrics ingestion not found response has a 4xx status code
func (o *DeleteOpenTelemetryMetricsIngestionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete open telemetry metrics ingestion not found response has a 5xx status code
func (o *DeleteOpenTelemetryMetricsIngestionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete open telemetry metrics ingestion not found response a status code equal to that given
func (o *DeleteOpenTelemetryMetricsIngestionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete open telemetry metrics ingestion not found response
func (o *DeleteOpenTelemetryMetricsIngestionNotFound) Code() int {
	return 404
}

func (o *DeleteOpenTelemetryMetricsIngestionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/open-telemetry-metrics-ingestion][%d] deleteOpenTelemetryMetricsIngestionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteOpenTelemetryMetricsIngestionNotFound) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/open-telemetry-metrics-ingestion][%d] deleteOpenTelemetryMetricsIngestionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteOpenTelemetryMetricsIngestionNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteOpenTelemetryMetricsIngestionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOpenTelemetryMetricsIngestionInternalServerError creates a DeleteOpenTelemetryMetricsIngestionInternalServerError with default headers values
func NewDeleteOpenTelemetryMetricsIngestionInternalServerError() *DeleteOpenTelemetryMetricsIngestionInternalServerError {
	return &DeleteOpenTelemetryMetricsIngestionInternalServerError{}
}

/*
DeleteOpenTelemetryMetricsIngestionInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type DeleteOpenTelemetryMetricsIngestionInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this delete open telemetry metrics ingestion internal server error response has a 2xx status code
func (o *DeleteOpenTelemetryMetricsIngestionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete open telemetry metrics ingestion internal server error response has a 3xx status code
func (o *DeleteOpenTelemetryMetricsIngestionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete open telemetry metrics ingestion internal server error response has a 4xx status code
func (o *DeleteOpenTelemetryMetricsIngestionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete open telemetry metrics ingestion internal server error response has a 5xx status code
func (o *DeleteOpenTelemetryMetricsIngestionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete open telemetry metrics ingestion internal server error response a status code equal to that given
func (o *DeleteOpenTelemetryMetricsIngestionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete open telemetry metrics ingestion internal server error response
func (o *DeleteOpenTelemetryMetricsIngestionInternalServerError) Code() int {
	return 500
}

func (o *DeleteOpenTelemetryMetricsIngestionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/open-telemetry-metrics-ingestion][%d] deleteOpenTelemetryMetricsIngestionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteOpenTelemetryMetricsIngestionInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/open-telemetry-metrics-ingestion][%d] deleteOpenTelemetryMetricsIngestionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteOpenTelemetryMetricsIngestionInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *DeleteOpenTelemetryMetricsIngestionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOpenTelemetryMetricsIngestionDefault creates a DeleteOpenTelemetryMetricsIngestionDefault with default headers values
func NewDeleteOpenTelemetryMetricsIngestionDefault(code int) *DeleteOpenTelemetryMetricsIngestionDefault {
	return &DeleteOpenTelemetryMetricsIngestionDefault{
		_statusCode: code,
	}
}

/*
DeleteOpenTelemetryMetricsIngestionDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type DeleteOpenTelemetryMetricsIngestionDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this delete open telemetry metrics ingestion default response has a 2xx status code
func (o *DeleteOpenTelemetryMetricsIngestionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this delete open telemetry metrics ingestion default response has a 3xx status code
func (o *DeleteOpenTelemetryMetricsIngestionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this delete open telemetry metrics ingestion default response has a 4xx status code
func (o *DeleteOpenTelemetryMetricsIngestionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this delete open telemetry metrics ingestion default response has a 5xx status code
func (o *DeleteOpenTelemetryMetricsIngestionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this delete open telemetry metrics ingestion default response a status code equal to that given
func (o *DeleteOpenTelemetryMetricsIngestionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the delete open telemetry metrics ingestion default response
func (o *DeleteOpenTelemetryMetricsIngestionDefault) Code() int {
	return o._statusCode
}

func (o *DeleteOpenTelemetryMetricsIngestionDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/open-telemetry-metrics-ingestion][%d] DeleteOpenTelemetryMetricsIngestion default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteOpenTelemetryMetricsIngestionDefault) String() string {
	return fmt.Sprintf("[DELETE /api/unstable/config/open-telemetry-metrics-ingestion][%d] DeleteOpenTelemetryMetricsIngestion default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteOpenTelemetryMetricsIngestionDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *DeleteOpenTelemetryMetricsIngestionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
