// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configunstable/models"
)

// CreateServiceReader is a Reader for the CreateService structure.
type CreateServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateServiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateServiceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateServiceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateServiceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateServiceOK creates a CreateServiceOK with default headers values
func NewCreateServiceOK() *CreateServiceOK {
	return &CreateServiceOK{}
}

/*
CreateServiceOK describes a response with status code 200, with default header values.

A successful response containing the created Service.
*/
type CreateServiceOK struct {
	Payload *models.ConfigunstableCreateServiceResponse
}

// IsSuccess returns true when this create service o k response has a 2xx status code
func (o *CreateServiceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create service o k response has a 3xx status code
func (o *CreateServiceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service o k response has a 4xx status code
func (o *CreateServiceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create service o k response has a 5xx status code
func (o *CreateServiceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create service o k response a status code equal to that given
func (o *CreateServiceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create service o k response
func (o *CreateServiceOK) Code() int {
	return 200
}

func (o *CreateServiceOK) Error() string {
	return fmt.Sprintf("[POST /api/unstable/config/services][%d] createServiceOK  %+v", 200, o.Payload)
}

func (o *CreateServiceOK) String() string {
	return fmt.Sprintf("[POST /api/unstable/config/services][%d] createServiceOK  %+v", 200, o.Payload)
}

func (o *CreateServiceOK) GetPayload() *models.ConfigunstableCreateServiceResponse {
	return o.Payload
}

func (o *CreateServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigunstableCreateServiceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceBadRequest creates a CreateServiceBadRequest with default headers values
func NewCreateServiceBadRequest() *CreateServiceBadRequest {
	return &CreateServiceBadRequest{}
}

/*
CreateServiceBadRequest describes a response with status code 400, with default header values.

Cannot create the Service because the request is invalid.
*/
type CreateServiceBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create service bad request response has a 2xx status code
func (o *CreateServiceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create service bad request response has a 3xx status code
func (o *CreateServiceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service bad request response has a 4xx status code
func (o *CreateServiceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create service bad request response has a 5xx status code
func (o *CreateServiceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create service bad request response a status code equal to that given
func (o *CreateServiceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create service bad request response
func (o *CreateServiceBadRequest) Code() int {
	return 400
}

func (o *CreateServiceBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/unstable/config/services][%d] createServiceBadRequest  %+v", 400, o.Payload)
}

func (o *CreateServiceBadRequest) String() string {
	return fmt.Sprintf("[POST /api/unstable/config/services][%d] createServiceBadRequest  %+v", 400, o.Payload)
}

func (o *CreateServiceBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateServiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceConflict creates a CreateServiceConflict with default headers values
func NewCreateServiceConflict() *CreateServiceConflict {
	return &CreateServiceConflict{}
}

/*
CreateServiceConflict describes a response with status code 409, with default header values.

Cannot create the Service because there is a conflict with an existing Service.
*/
type CreateServiceConflict struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create service conflict response has a 2xx status code
func (o *CreateServiceConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create service conflict response has a 3xx status code
func (o *CreateServiceConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service conflict response has a 4xx status code
func (o *CreateServiceConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create service conflict response has a 5xx status code
func (o *CreateServiceConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create service conflict response a status code equal to that given
func (o *CreateServiceConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create service conflict response
func (o *CreateServiceConflict) Code() int {
	return 409
}

func (o *CreateServiceConflict) Error() string {
	return fmt.Sprintf("[POST /api/unstable/config/services][%d] createServiceConflict  %+v", 409, o.Payload)
}

func (o *CreateServiceConflict) String() string {
	return fmt.Sprintf("[POST /api/unstable/config/services][%d] createServiceConflict  %+v", 409, o.Payload)
}

func (o *CreateServiceConflict) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateServiceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceInternalServerError creates a CreateServiceInternalServerError with default headers values
func NewCreateServiceInternalServerError() *CreateServiceInternalServerError {
	return &CreateServiceInternalServerError{}
}

/*
CreateServiceInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type CreateServiceInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this create service internal server error response has a 2xx status code
func (o *CreateServiceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create service internal server error response has a 3xx status code
func (o *CreateServiceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service internal server error response has a 4xx status code
func (o *CreateServiceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create service internal server error response has a 5xx status code
func (o *CreateServiceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create service internal server error response a status code equal to that given
func (o *CreateServiceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create service internal server error response
func (o *CreateServiceInternalServerError) Code() int {
	return 500
}

func (o *CreateServiceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/unstable/config/services][%d] createServiceInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateServiceInternalServerError) String() string {
	return fmt.Sprintf("[POST /api/unstable/config/services][%d] createServiceInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateServiceInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *CreateServiceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceDefault creates a CreateServiceDefault with default headers values
func NewCreateServiceDefault(code int) *CreateServiceDefault {
	return &CreateServiceDefault{
		_statusCode: code,
	}
}

/*
CreateServiceDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type CreateServiceDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this create service default response has a 2xx status code
func (o *CreateServiceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create service default response has a 3xx status code
func (o *CreateServiceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create service default response has a 4xx status code
func (o *CreateServiceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create service default response has a 5xx status code
func (o *CreateServiceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create service default response a status code equal to that given
func (o *CreateServiceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create service default response
func (o *CreateServiceDefault) Code() int {
	return o._statusCode
}

func (o *CreateServiceDefault) Error() string {
	return fmt.Sprintf("[POST /api/unstable/config/services][%d] CreateService default  %+v", o._statusCode, o.Payload)
}

func (o *CreateServiceDefault) String() string {
	return fmt.Sprintf("[POST /api/unstable/config/services][%d] CreateService default  %+v", o._statusCode, o.Payload)
}

func (o *CreateServiceDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *CreateServiceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
