// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configunstable/models"
)

// UpdateLogParserConfigReader is a Reader for the UpdateLogParserConfig structure.
type UpdateLogParserConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLogParserConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateLogParserConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateLogParserConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateLogParserConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateLogParserConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateLogParserConfigDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateLogParserConfigOK creates a UpdateLogParserConfigOK with default headers values
func NewUpdateLogParserConfigOK() *UpdateLogParserConfigOK {
	return &UpdateLogParserConfigOK{}
}

/*
UpdateLogParserConfigOK describes a response with status code 200, with default header values.

A successful response containing the updated LogParserConfig.
*/
type UpdateLogParserConfigOK struct {
	Payload *models.ConfigunstableUpdateLogParserConfigResponse
}

// IsSuccess returns true when this update log parser config o k response has a 2xx status code
func (o *UpdateLogParserConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update log parser config o k response has a 3xx status code
func (o *UpdateLogParserConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log parser config o k response has a 4xx status code
func (o *UpdateLogParserConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update log parser config o k response has a 5xx status code
func (o *UpdateLogParserConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update log parser config o k response a status code equal to that given
func (o *UpdateLogParserConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update log parser config o k response
func (o *UpdateLogParserConfigOK) Code() int {
	return 200
}

func (o *UpdateLogParserConfigOK) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-parser-config][%d] updateLogParserConfigOK  %+v", 200, o.Payload)
}

func (o *UpdateLogParserConfigOK) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-parser-config][%d] updateLogParserConfigOK  %+v", 200, o.Payload)
}

func (o *UpdateLogParserConfigOK) GetPayload() *models.ConfigunstableUpdateLogParserConfigResponse {
	return o.Payload
}

func (o *UpdateLogParserConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigunstableUpdateLogParserConfigResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogParserConfigBadRequest creates a UpdateLogParserConfigBadRequest with default headers values
func NewUpdateLogParserConfigBadRequest() *UpdateLogParserConfigBadRequest {
	return &UpdateLogParserConfigBadRequest{}
}

/*
UpdateLogParserConfigBadRequest describes a response with status code 400, with default header values.

Cannot update the LogParserConfig because the request is invalid.
*/
type UpdateLogParserConfigBadRequest struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log parser config bad request response has a 2xx status code
func (o *UpdateLogParserConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log parser config bad request response has a 3xx status code
func (o *UpdateLogParserConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log parser config bad request response has a 4xx status code
func (o *UpdateLogParserConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update log parser config bad request response has a 5xx status code
func (o *UpdateLogParserConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update log parser config bad request response a status code equal to that given
func (o *UpdateLogParserConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update log parser config bad request response
func (o *UpdateLogParserConfigBadRequest) Code() int {
	return 400
}

func (o *UpdateLogParserConfigBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-parser-config][%d] updateLogParserConfigBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateLogParserConfigBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-parser-config][%d] updateLogParserConfigBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateLogParserConfigBadRequest) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogParserConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogParserConfigNotFound creates a UpdateLogParserConfigNotFound with default headers values
func NewUpdateLogParserConfigNotFound() *UpdateLogParserConfigNotFound {
	return &UpdateLogParserConfigNotFound{}
}

/*
UpdateLogParserConfigNotFound describes a response with status code 404, with default header values.

Cannot update the LogParserConfig because LogParserConfig has not been created.
*/
type UpdateLogParserConfigNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log parser config not found response has a 2xx status code
func (o *UpdateLogParserConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log parser config not found response has a 3xx status code
func (o *UpdateLogParserConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log parser config not found response has a 4xx status code
func (o *UpdateLogParserConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update log parser config not found response has a 5xx status code
func (o *UpdateLogParserConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update log parser config not found response a status code equal to that given
func (o *UpdateLogParserConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update log parser config not found response
func (o *UpdateLogParserConfigNotFound) Code() int {
	return 404
}

func (o *UpdateLogParserConfigNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-parser-config][%d] updateLogParserConfigNotFound  %+v", 404, o.Payload)
}

func (o *UpdateLogParserConfigNotFound) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-parser-config][%d] updateLogParserConfigNotFound  %+v", 404, o.Payload)
}

func (o *UpdateLogParserConfigNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogParserConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogParserConfigInternalServerError creates a UpdateLogParserConfigInternalServerError with default headers values
func NewUpdateLogParserConfigInternalServerError() *UpdateLogParserConfigInternalServerError {
	return &UpdateLogParserConfigInternalServerError{}
}

/*
UpdateLogParserConfigInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type UpdateLogParserConfigInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this update log parser config internal server error response has a 2xx status code
func (o *UpdateLogParserConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update log parser config internal server error response has a 3xx status code
func (o *UpdateLogParserConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update log parser config internal server error response has a 4xx status code
func (o *UpdateLogParserConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update log parser config internal server error response has a 5xx status code
func (o *UpdateLogParserConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update log parser config internal server error response a status code equal to that given
func (o *UpdateLogParserConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update log parser config internal server error response
func (o *UpdateLogParserConfigInternalServerError) Code() int {
	return 500
}

func (o *UpdateLogParserConfigInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-parser-config][%d] updateLogParserConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateLogParserConfigInternalServerError) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-parser-config][%d] updateLogParserConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateLogParserConfigInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateLogParserConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLogParserConfigDefault creates a UpdateLogParserConfigDefault with default headers values
func NewUpdateLogParserConfigDefault(code int) *UpdateLogParserConfigDefault {
	return &UpdateLogParserConfigDefault{
		_statusCode: code,
	}
}

/*
UpdateLogParserConfigDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type UpdateLogParserConfigDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this update log parser config default response has a 2xx status code
func (o *UpdateLogParserConfigDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update log parser config default response has a 3xx status code
func (o *UpdateLogParserConfigDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update log parser config default response has a 4xx status code
func (o *UpdateLogParserConfigDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update log parser config default response has a 5xx status code
func (o *UpdateLogParserConfigDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update log parser config default response a status code equal to that given
func (o *UpdateLogParserConfigDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update log parser config default response
func (o *UpdateLogParserConfigDefault) Code() int {
	return o._statusCode
}

func (o *UpdateLogParserConfigDefault) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-parser-config][%d] UpdateLogParserConfig default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateLogParserConfigDefault) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/log-parser-config][%d] UpdateLogParserConfig default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateLogParserConfigDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *UpdateLogParserConfigDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
