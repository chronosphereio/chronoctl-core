// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDashboard(params *CreateDashboardParams, opts ...ClientOption) (*CreateDashboardOK, error)

	CreateDataset(params *CreateDatasetParams, opts ...ClientOption) (*CreateDatasetOK, error)

	CreateGCPMetricsIntegration(params *CreateGCPMetricsIntegrationParams, opts ...ClientOption) (*CreateGCPMetricsIntegrationOK, error)

	CreateLinkTemplate(params *CreateLinkTemplateParams, opts ...ClientOption) (*CreateLinkTemplateOK, error)

	CreateNoopEntity(params *CreateNoopEntityParams, opts ...ClientOption) (*CreateNoopEntityOK, error)

	CreateSavedTraceSearch(params *CreateSavedTraceSearchParams, opts ...ClientOption) (*CreateSavedTraceSearchOK, error)

	CreateService(params *CreateServiceParams, opts ...ClientOption) (*CreateServiceOK, error)

	CreateTraceJaegerRemoteSamplingStrategy(params *CreateTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*CreateTraceJaegerRemoteSamplingStrategyOK, error)

	CreateTraceTailSamplingRules(params *CreateTraceTailSamplingRulesParams, opts ...ClientOption) (*CreateTraceTailSamplingRulesOK, error)

	DeleteDashboard(params *DeleteDashboardParams, opts ...ClientOption) (*DeleteDashboardOK, error)

	DeleteDataset(params *DeleteDatasetParams, opts ...ClientOption) (*DeleteDatasetOK, error)

	DeleteGCPMetricsIntegration(params *DeleteGCPMetricsIntegrationParams, opts ...ClientOption) (*DeleteGCPMetricsIntegrationOK, error)

	DeleteLinkTemplate(params *DeleteLinkTemplateParams, opts ...ClientOption) (*DeleteLinkTemplateOK, error)

	DeleteNoopEntity(params *DeleteNoopEntityParams, opts ...ClientOption) (*DeleteNoopEntityOK, error)

	DeleteSavedTraceSearch(params *DeleteSavedTraceSearchParams, opts ...ClientOption) (*DeleteSavedTraceSearchOK, error)

	DeleteService(params *DeleteServiceParams, opts ...ClientOption) (*DeleteServiceOK, error)

	DeleteTraceJaegerRemoteSamplingStrategy(params *DeleteTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*DeleteTraceJaegerRemoteSamplingStrategyOK, error)

	DeleteTraceTailSamplingRules(params *DeleteTraceTailSamplingRulesParams, opts ...ClientOption) (*DeleteTraceTailSamplingRulesOK, error)

	ListDashboards(params *ListDashboardsParams, opts ...ClientOption) (*ListDashboardsOK, error)

	ListDatasets(params *ListDatasetsParams, opts ...ClientOption) (*ListDatasetsOK, error)

	ListGCPMetricsIntegrations(params *ListGCPMetricsIntegrationsParams, opts ...ClientOption) (*ListGCPMetricsIntegrationsOK, error)

	ListLinkTemplates(params *ListLinkTemplatesParams, opts ...ClientOption) (*ListLinkTemplatesOK, error)

	ListNoopEntities(params *ListNoopEntitiesParams, opts ...ClientOption) (*ListNoopEntitiesOK, error)

	ListSavedTraceSearches(params *ListSavedTraceSearchesParams, opts ...ClientOption) (*ListSavedTraceSearchesOK, error)

	ListServices(params *ListServicesParams, opts ...ClientOption) (*ListServicesOK, error)

	ListTraceJaegerRemoteSamplingStrategies(params *ListTraceJaegerRemoteSamplingStrategiesParams, opts ...ClientOption) (*ListTraceJaegerRemoteSamplingStrategiesOK, error)

	ReadDashboard(params *ReadDashboardParams, opts ...ClientOption) (*ReadDashboardOK, error)

	ReadDataset(params *ReadDatasetParams, opts ...ClientOption) (*ReadDatasetOK, error)

	ReadGCPMetricsIntegration(params *ReadGCPMetricsIntegrationParams, opts ...ClientOption) (*ReadGCPMetricsIntegrationOK, error)

	ReadLinkTemplate(params *ReadLinkTemplateParams, opts ...ClientOption) (*ReadLinkTemplateOK, error)

	ReadNoopEntity(params *ReadNoopEntityParams, opts ...ClientOption) (*ReadNoopEntityOK, error)

	ReadSavedTraceSearch(params *ReadSavedTraceSearchParams, opts ...ClientOption) (*ReadSavedTraceSearchOK, error)

	ReadService(params *ReadServiceParams, opts ...ClientOption) (*ReadServiceOK, error)

	ReadTraceJaegerRemoteSamplingStrategy(params *ReadTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*ReadTraceJaegerRemoteSamplingStrategyOK, error)

	ReadTraceTailSamplingRules(params *ReadTraceTailSamplingRulesParams, opts ...ClientOption) (*ReadTraceTailSamplingRulesOK, error)

	SyncPrometheus(params *SyncPrometheusParams, opts ...ClientOption) (*SyncPrometheusOK, error)

	UpdateDashboard(params *UpdateDashboardParams, opts ...ClientOption) (*UpdateDashboardOK, error)

	UpdateDataset(params *UpdateDatasetParams, opts ...ClientOption) (*UpdateDatasetOK, error)

	UpdateGCPMetricsIntegration(params *UpdateGCPMetricsIntegrationParams, opts ...ClientOption) (*UpdateGCPMetricsIntegrationOK, error)

	UpdateLinkTemplate(params *UpdateLinkTemplateParams, opts ...ClientOption) (*UpdateLinkTemplateOK, error)

	UpdateNoopEntity(params *UpdateNoopEntityParams, opts ...ClientOption) (*UpdateNoopEntityOK, error)

	UpdateSavedTraceSearch(params *UpdateSavedTraceSearchParams, opts ...ClientOption) (*UpdateSavedTraceSearchOK, error)

	UpdateService(params *UpdateServiceParams, opts ...ClientOption) (*UpdateServiceOK, error)

	UpdateTraceJaegerRemoteSamplingStrategy(params *UpdateTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*UpdateTraceJaegerRemoteSamplingStrategyOK, error)

	UpdateTraceTailSamplingRules(params *UpdateTraceTailSamplingRulesParams, opts ...ClientOption) (*UpdateTraceTailSamplingRulesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateDashboard create dashboard API
*/
func (a *Client) CreateDashboard(params *CreateDashboardParams, opts ...ClientOption) (*CreateDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDashboard",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDataset create dataset API
*/
func (a *Client) CreateDataset(params *CreateDatasetParams, opts ...ClientOption) (*CreateDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataset",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/datasets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDatasetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateGCPMetricsIntegration create g c p metrics integration API
*/
func (a *Client) CreateGCPMetricsIntegration(params *CreateGCPMetricsIntegrationParams, opts ...ClientOption) (*CreateGCPMetricsIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGCPMetricsIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateGCPMetricsIntegration",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/gcp-metrics-integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGCPMetricsIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGCPMetricsIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateGCPMetricsIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateLinkTemplate create link template API
*/
func (a *Client) CreateLinkTemplate(params *CreateLinkTemplateParams, opts ...ClientOption) (*CreateLinkTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLinkTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateLinkTemplate",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/link-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLinkTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLinkTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateLinkTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateNoopEntity create noop entity API
*/
func (a *Client) CreateNoopEntity(params *CreateNoopEntityParams, opts ...ClientOption) (*CreateNoopEntityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNoopEntityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNoopEntity",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/noop-entities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNoopEntityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNoopEntityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateNoopEntityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CreateSavedTraceSearch ***

Saved Trace Searches
***
*/
func (a *Client) CreateSavedTraceSearch(params *CreateSavedTraceSearchParams, opts ...ClientOption) (*CreateSavedTraceSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSavedTraceSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSavedTraceSearch",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/saved-trace-searches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSavedTraceSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSavedTraceSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSavedTraceSearchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateService create service API
*/
func (a *Client) CreateService(params *CreateServiceParams, opts ...ClientOption) (*CreateServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateService",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateTraceJaegerRemoteSamplingStrategy create trace jaeger remote sampling strategy API
*/
func (a *Client) CreateTraceJaegerRemoteSamplingStrategy(params *CreateTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*CreateTraceJaegerRemoteSamplingStrategyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTraceJaegerRemoteSamplingStrategyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTraceJaegerRemoteSamplingStrategy",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/trace-jaeger-remote-sampling-strategies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTraceJaegerRemoteSamplingStrategyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTraceJaegerRemoteSamplingStrategyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTraceJaegerRemoteSamplingStrategyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateTraceTailSamplingRules TraceTailSamplingRules CRUD (subset for singleton objects)
*/
func (a *Client) CreateTraceTailSamplingRules(params *CreateTraceTailSamplingRulesParams, opts ...ClientOption) (*CreateTraceTailSamplingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTraceTailSamplingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTraceTailSamplingRules",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/trace-tail-sampling-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTraceTailSamplingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTraceTailSamplingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTraceTailSamplingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDashboard delete dashboard API
*/
func (a *Client) DeleteDashboard(params *DeleteDashboardParams, opts ...ClientOption) (*DeleteDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDashboard",
		Method:             "DELETE",
		PathPattern:        "/api/unstable/config/dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteDataset delete dataset API
*/
func (a *Client) DeleteDataset(params *DeleteDatasetParams, opts ...ClientOption) (*DeleteDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataset",
		Method:             "DELETE",
		PathPattern:        "/api/unstable/config/datasets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDatasetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteGCPMetricsIntegration delete g c p metrics integration API
*/
func (a *Client) DeleteGCPMetricsIntegration(params *DeleteGCPMetricsIntegrationParams, opts ...ClientOption) (*DeleteGCPMetricsIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGCPMetricsIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteGCPMetricsIntegration",
		Method:             "DELETE",
		PathPattern:        "/api/unstable/config/gcp-metrics-integrations/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGCPMetricsIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGCPMetricsIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteGCPMetricsIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteLinkTemplate delete link template API
*/
func (a *Client) DeleteLinkTemplate(params *DeleteLinkTemplateParams, opts ...ClientOption) (*DeleteLinkTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLinkTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLinkTemplate",
		Method:             "DELETE",
		PathPattern:        "/api/unstable/config/link-templates/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLinkTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLinkTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteLinkTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteNoopEntity delete noop entity API
*/
func (a *Client) DeleteNoopEntity(params *DeleteNoopEntityParams, opts ...ClientOption) (*DeleteNoopEntityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNoopEntityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNoopEntity",
		Method:             "DELETE",
		PathPattern:        "/api/unstable/config/noop-entities/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNoopEntityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNoopEntityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNoopEntityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteSavedTraceSearch delete saved trace search API
*/
func (a *Client) DeleteSavedTraceSearch(params *DeleteSavedTraceSearchParams, opts ...ClientOption) (*DeleteSavedTraceSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSavedTraceSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSavedTraceSearch",
		Method:             "DELETE",
		PathPattern:        "/api/unstable/config/saved-trace-searches/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSavedTraceSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSavedTraceSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSavedTraceSearchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteService delete service API
*/
func (a *Client) DeleteService(params *DeleteServiceParams, opts ...ClientOption) (*DeleteServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteService",
		Method:             "DELETE",
		PathPattern:        "/api/unstable/config/services/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTraceJaegerRemoteSamplingStrategy delete trace jaeger remote sampling strategy API
*/
func (a *Client) DeleteTraceJaegerRemoteSamplingStrategy(params *DeleteTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*DeleteTraceJaegerRemoteSamplingStrategyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTraceJaegerRemoteSamplingStrategyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTraceJaegerRemoteSamplingStrategy",
		Method:             "DELETE",
		PathPattern:        "/api/unstable/config/trace-jaeger-remote-sampling-strategies/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTraceJaegerRemoteSamplingStrategyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTraceJaegerRemoteSamplingStrategyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTraceJaegerRemoteSamplingStrategyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteTraceTailSamplingRules delete trace tail sampling rules API
*/
func (a *Client) DeleteTraceTailSamplingRules(params *DeleteTraceTailSamplingRulesParams, opts ...ClientOption) (*DeleteTraceTailSamplingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTraceTailSamplingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTraceTailSamplingRules",
		Method:             "DELETE",
		PathPattern:        "/api/unstable/config/trace-tail-sampling-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTraceTailSamplingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTraceTailSamplingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTraceTailSamplingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDashboards list dashboards API
*/
func (a *Client) ListDashboards(params *ListDashboardsParams, opts ...ClientOption) (*ListDashboardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDashboardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDashboards",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDashboardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDashboardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDashboardsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDatasets list datasets API
*/
func (a *Client) ListDatasets(params *ListDatasetsParams, opts ...ClientOption) (*ListDatasetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDatasetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListDatasets",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/datasets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDatasetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDatasetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDatasetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListGCPMetricsIntegrations list g c p metrics integrations API
*/
func (a *Client) ListGCPMetricsIntegrations(params *ListGCPMetricsIntegrationsParams, opts ...ClientOption) (*ListGCPMetricsIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGCPMetricsIntegrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListGCPMetricsIntegrations",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/gcp-metrics-integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListGCPMetricsIntegrationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGCPMetricsIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGCPMetricsIntegrationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListLinkTemplates list link templates API
*/
func (a *Client) ListLinkTemplates(params *ListLinkTemplatesParams, opts ...ClientOption) (*ListLinkTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLinkTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListLinkTemplates",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/link-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListLinkTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLinkTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListLinkTemplatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListNoopEntities list noop entities API
*/
func (a *Client) ListNoopEntities(params *ListNoopEntitiesParams, opts ...ClientOption) (*ListNoopEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNoopEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListNoopEntities",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/noop-entities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNoopEntitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNoopEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListNoopEntitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListSavedTraceSearches list saved trace searches API
*/
func (a *Client) ListSavedTraceSearches(params *ListSavedTraceSearchesParams, opts ...ClientOption) (*ListSavedTraceSearchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSavedTraceSearchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListSavedTraceSearches",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/saved-trace-searches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSavedTraceSearchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSavedTraceSearchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSavedTraceSearchesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListServices list services API
*/
func (a *Client) ListServices(params *ListServicesParams, opts ...ClientOption) (*ListServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListServices",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListTraceJaegerRemoteSamplingStrategies list trace jaeger remote sampling strategies API
*/
func (a *Client) ListTraceJaegerRemoteSamplingStrategies(params *ListTraceJaegerRemoteSamplingStrategiesParams, opts ...ClientOption) (*ListTraceJaegerRemoteSamplingStrategiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTraceJaegerRemoteSamplingStrategiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTraceJaegerRemoteSamplingStrategies",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/trace-jaeger-remote-sampling-strategies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTraceJaegerRemoteSamplingStrategiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTraceJaegerRemoteSamplingStrategiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTraceJaegerRemoteSamplingStrategiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadDashboard read dashboard API
*/
func (a *Client) ReadDashboard(params *ReadDashboardParams, opts ...ClientOption) (*ReadDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDashboard",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadDataset read dataset API
*/
func (a *Client) ReadDataset(params *ReadDatasetParams, opts ...ClientOption) (*ReadDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDataset",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/datasets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadDatasetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadGCPMetricsIntegration read g c p metrics integration API
*/
func (a *Client) ReadGCPMetricsIntegration(params *ReadGCPMetricsIntegrationParams, opts ...ClientOption) (*ReadGCPMetricsIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadGCPMetricsIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadGCPMetricsIntegration",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/gcp-metrics-integrations/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadGCPMetricsIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadGCPMetricsIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadGCPMetricsIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadLinkTemplate read link template API
*/
func (a *Client) ReadLinkTemplate(params *ReadLinkTemplateParams, opts ...ClientOption) (*ReadLinkTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadLinkTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadLinkTemplate",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/link-templates/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadLinkTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadLinkTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadLinkTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadNoopEntity read noop entity API
*/
func (a *Client) ReadNoopEntity(params *ReadNoopEntityParams, opts ...ClientOption) (*ReadNoopEntityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNoopEntityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadNoopEntity",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/noop-entities/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNoopEntityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNoopEntityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadNoopEntityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadSavedTraceSearch read saved trace search API
*/
func (a *Client) ReadSavedTraceSearch(params *ReadSavedTraceSearchParams, opts ...ClientOption) (*ReadSavedTraceSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadSavedTraceSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadSavedTraceSearch",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/saved-trace-searches/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadSavedTraceSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadSavedTraceSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadSavedTraceSearchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadService read service API
*/
func (a *Client) ReadService(params *ReadServiceParams, opts ...ClientOption) (*ReadServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadService",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/services/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadTraceJaegerRemoteSamplingStrategy read trace jaeger remote sampling strategy API
*/
func (a *Client) ReadTraceJaegerRemoteSamplingStrategy(params *ReadTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*ReadTraceJaegerRemoteSamplingStrategyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadTraceJaegerRemoteSamplingStrategyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadTraceJaegerRemoteSamplingStrategy",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/trace-jaeger-remote-sampling-strategies/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadTraceJaegerRemoteSamplingStrategyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadTraceJaegerRemoteSamplingStrategyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadTraceJaegerRemoteSamplingStrategyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReadTraceTailSamplingRules read trace tail sampling rules API
*/
func (a *Client) ReadTraceTailSamplingRules(params *ReadTraceTailSamplingRulesParams, opts ...ClientOption) (*ReadTraceTailSamplingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadTraceTailSamplingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadTraceTailSamplingRules",
		Method:             "GET",
		PathPattern:        "/api/unstable/config/trace-tail-sampling-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadTraceTailSamplingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadTraceTailSamplingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadTraceTailSamplingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	SyncPrometheus ***

Sync Prometheus Configuration
***
*/
func (a *Client) SyncPrometheus(params *SyncPrometheusParams, opts ...ClientOption) (*SyncPrometheusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncPrometheusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SyncPrometheus",
		Method:             "POST",
		PathPattern:        "/api/unstable/config/sync-prometheus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncPrometheusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncPrometheusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncPrometheusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDashboard update dashboard API
*/
func (a *Client) UpdateDashboard(params *UpdateDashboardParams, opts ...ClientOption) (*UpdateDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDashboard",
		Method:             "PUT",
		PathPattern:        "/api/unstable/config/dashboards/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDataset update dataset API
*/
func (a *Client) UpdateDataset(params *UpdateDatasetParams, opts ...ClientOption) (*UpdateDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDataset",
		Method:             "PUT",
		PathPattern:        "/api/unstable/config/datasets/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDatasetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDatasetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateGCPMetricsIntegration update g c p metrics integration API
*/
func (a *Client) UpdateGCPMetricsIntegration(params *UpdateGCPMetricsIntegrationParams, opts ...ClientOption) (*UpdateGCPMetricsIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGCPMetricsIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateGCPMetricsIntegration",
		Method:             "PUT",
		PathPattern:        "/api/unstable/config/gcp-metrics-integrations/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGCPMetricsIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGCPMetricsIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateGCPMetricsIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateLinkTemplate update link template API
*/
func (a *Client) UpdateLinkTemplate(params *UpdateLinkTemplateParams, opts ...ClientOption) (*UpdateLinkTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLinkTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateLinkTemplate",
		Method:             "PUT",
		PathPattern:        "/api/unstable/config/link-templates/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLinkTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLinkTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateLinkTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateNoopEntity update noop entity API
*/
func (a *Client) UpdateNoopEntity(params *UpdateNoopEntityParams, opts ...ClientOption) (*UpdateNoopEntityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNoopEntityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNoopEntity",
		Method:             "PUT",
		PathPattern:        "/api/unstable/config/noop-entities/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNoopEntityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNoopEntityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateNoopEntityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateSavedTraceSearch update saved trace search API
*/
func (a *Client) UpdateSavedTraceSearch(params *UpdateSavedTraceSearchParams, opts ...ClientOption) (*UpdateSavedTraceSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSavedTraceSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSavedTraceSearch",
		Method:             "PUT",
		PathPattern:        "/api/unstable/config/saved-trace-searches/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSavedTraceSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSavedTraceSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSavedTraceSearchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateService update service API
*/
func (a *Client) UpdateService(params *UpdateServiceParams, opts ...ClientOption) (*UpdateServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateService",
		Method:             "PUT",
		PathPattern:        "/api/unstable/config/services/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTraceJaegerRemoteSamplingStrategy update trace jaeger remote sampling strategy API
*/
func (a *Client) UpdateTraceJaegerRemoteSamplingStrategy(params *UpdateTraceJaegerRemoteSamplingStrategyParams, opts ...ClientOption) (*UpdateTraceJaegerRemoteSamplingStrategyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTraceJaegerRemoteSamplingStrategyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTraceJaegerRemoteSamplingStrategy",
		Method:             "PUT",
		PathPattern:        "/api/unstable/config/trace-jaeger-remote-sampling-strategies/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTraceJaegerRemoteSamplingStrategyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTraceJaegerRemoteSamplingStrategyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTraceJaegerRemoteSamplingStrategyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTraceTailSamplingRules update trace tail sampling rules API
*/
func (a *Client) UpdateTraceTailSamplingRules(params *UpdateTraceTailSamplingRulesParams, opts ...ClientOption) (*UpdateTraceTailSamplingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTraceTailSamplingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTraceTailSamplingRules",
		Method:             "PUT",
		PathPattern:        "/api/unstable/config/trace-tail-sampling-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTraceTailSamplingRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTraceTailSamplingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTraceTailSamplingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
