// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configunstable/models"
)

// UpdateTraceTailSamplingRulesReader is a Reader for the UpdateTraceTailSamplingRules structure.
type UpdateTraceTailSamplingRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTraceTailSamplingRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTraceTailSamplingRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpdateTraceTailSamplingRulesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateTraceTailSamplingRulesOK creates a UpdateTraceTailSamplingRulesOK with default headers values
func NewUpdateTraceTailSamplingRulesOK() *UpdateTraceTailSamplingRulesOK {
	return &UpdateTraceTailSamplingRulesOK{}
}

/*
UpdateTraceTailSamplingRulesOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateTraceTailSamplingRulesOK struct {
	Payload *models.ConfigunstableUpdateTraceTailSamplingRulesResponse
}

// IsSuccess returns true when this update trace tail sampling rules o k response has a 2xx status code
func (o *UpdateTraceTailSamplingRulesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update trace tail sampling rules o k response has a 3xx status code
func (o *UpdateTraceTailSamplingRulesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update trace tail sampling rules o k response has a 4xx status code
func (o *UpdateTraceTailSamplingRulesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update trace tail sampling rules o k response has a 5xx status code
func (o *UpdateTraceTailSamplingRulesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update trace tail sampling rules o k response a status code equal to that given
func (o *UpdateTraceTailSamplingRulesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update trace tail sampling rules o k response
func (o *UpdateTraceTailSamplingRulesOK) Code() int {
	return 200
}

func (o *UpdateTraceTailSamplingRulesOK) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/trace-tail-sampling-rules][%d] updateTraceTailSamplingRulesOK  %+v", 200, o.Payload)
}

func (o *UpdateTraceTailSamplingRulesOK) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/trace-tail-sampling-rules][%d] updateTraceTailSamplingRulesOK  %+v", 200, o.Payload)
}

func (o *UpdateTraceTailSamplingRulesOK) GetPayload() *models.ConfigunstableUpdateTraceTailSamplingRulesResponse {
	return o.Payload
}

func (o *UpdateTraceTailSamplingRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigunstableUpdateTraceTailSamplingRulesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTraceTailSamplingRulesDefault creates a UpdateTraceTailSamplingRulesDefault with default headers values
func NewUpdateTraceTailSamplingRulesDefault(code int) *UpdateTraceTailSamplingRulesDefault {
	return &UpdateTraceTailSamplingRulesDefault{
		_statusCode: code,
	}
}

/*
UpdateTraceTailSamplingRulesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type UpdateTraceTailSamplingRulesDefault struct {
	_statusCode int

	Payload *models.APIError
}

// IsSuccess returns true when this update trace tail sampling rules default response has a 2xx status code
func (o *UpdateTraceTailSamplingRulesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update trace tail sampling rules default response has a 3xx status code
func (o *UpdateTraceTailSamplingRulesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update trace tail sampling rules default response has a 4xx status code
func (o *UpdateTraceTailSamplingRulesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update trace tail sampling rules default response has a 5xx status code
func (o *UpdateTraceTailSamplingRulesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update trace tail sampling rules default response a status code equal to that given
func (o *UpdateTraceTailSamplingRulesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update trace tail sampling rules default response
func (o *UpdateTraceTailSamplingRulesDefault) Code() int {
	return o._statusCode
}

func (o *UpdateTraceTailSamplingRulesDefault) Error() string {
	return fmt.Sprintf("[PUT /api/unstable/config/trace-tail-sampling-rules][%d] UpdateTraceTailSamplingRules default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateTraceTailSamplingRulesDefault) String() string {
	return fmt.Sprintf("[PUT /api/unstable/config/trace-tail-sampling-rules][%d] UpdateTraceTailSamplingRules default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateTraceTailSamplingRulesDefault) GetPayload() *models.APIError {
	return o.Payload
}

func (o *UpdateTraceTailSamplingRulesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
