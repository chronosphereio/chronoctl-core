// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configunstable/models"
)

// ReadNoopEntityReader is a Reader for the ReadNoopEntity structure.
type ReadNoopEntityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadNoopEntityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadNoopEntityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewReadNoopEntityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadNoopEntityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReadNoopEntityDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReadNoopEntityOK creates a ReadNoopEntityOK with default headers values
func NewReadNoopEntityOK() *ReadNoopEntityOK {
	return &ReadNoopEntityOK{}
}

/*
ReadNoopEntityOK describes a response with status code 200, with default header values.

A successful response.
*/
type ReadNoopEntityOK struct {
	Payload *models.ConfigunstableReadNoopEntityResponse
}

// IsSuccess returns true when this read noop entity o k response has a 2xx status code
func (o *ReadNoopEntityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this read noop entity o k response has a 3xx status code
func (o *ReadNoopEntityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read noop entity o k response has a 4xx status code
func (o *ReadNoopEntityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this read noop entity o k response has a 5xx status code
func (o *ReadNoopEntityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this read noop entity o k response a status code equal to that given
func (o *ReadNoopEntityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the read noop entity o k response
func (o *ReadNoopEntityOK) Code() int {
	return 200
}

func (o *ReadNoopEntityOK) Error() string {
	return fmt.Sprintf("[GET /api/unstable/config/noop-entities/{slug}][%d] readNoopEntityOK  %+v", 200, o.Payload)
}

func (o *ReadNoopEntityOK) String() string {
	return fmt.Sprintf("[GET /api/unstable/config/noop-entities/{slug}][%d] readNoopEntityOK  %+v", 200, o.Payload)
}

func (o *ReadNoopEntityOK) GetPayload() *models.ConfigunstableReadNoopEntityResponse {
	return o.Payload
}

func (o *ReadNoopEntityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigunstableReadNoopEntityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadNoopEntityNotFound creates a ReadNoopEntityNotFound with default headers values
func NewReadNoopEntityNotFound() *ReadNoopEntityNotFound {
	return &ReadNoopEntityNotFound{}
}

/*
ReadNoopEntityNotFound describes a response with status code 404, with default header values.

Cannot read the NoopEntity because the slug does not exist.
*/
type ReadNoopEntityNotFound struct {
	Payload *models.APIError
}

// IsSuccess returns true when this read noop entity not found response has a 2xx status code
func (o *ReadNoopEntityNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read noop entity not found response has a 3xx status code
func (o *ReadNoopEntityNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read noop entity not found response has a 4xx status code
func (o *ReadNoopEntityNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this read noop entity not found response has a 5xx status code
func (o *ReadNoopEntityNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this read noop entity not found response a status code equal to that given
func (o *ReadNoopEntityNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the read noop entity not found response
func (o *ReadNoopEntityNotFound) Code() int {
	return 404
}

func (o *ReadNoopEntityNotFound) Error() string {
	return fmt.Sprintf("[GET /api/unstable/config/noop-entities/{slug}][%d] readNoopEntityNotFound  %+v", 404, o.Payload)
}

func (o *ReadNoopEntityNotFound) String() string {
	return fmt.Sprintf("[GET /api/unstable/config/noop-entities/{slug}][%d] readNoopEntityNotFound  %+v", 404, o.Payload)
}

func (o *ReadNoopEntityNotFound) GetPayload() *models.APIError {
	return o.Payload
}

func (o *ReadNoopEntityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadNoopEntityInternalServerError creates a ReadNoopEntityInternalServerError with default headers values
func NewReadNoopEntityInternalServerError() *ReadNoopEntityInternalServerError {
	return &ReadNoopEntityInternalServerError{}
}

/*
ReadNoopEntityInternalServerError describes a response with status code 500, with default header values.

An unexpected error response.
*/
type ReadNoopEntityInternalServerError struct {
	Payload *models.APIError
}

// IsSuccess returns true when this read noop entity internal server error response has a 2xx status code
func (o *ReadNoopEntityInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read noop entity internal server error response has a 3xx status code
func (o *ReadNoopEntityInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read noop entity internal server error response has a 4xx status code
func (o *ReadNoopEntityInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this read noop entity internal server error response has a 5xx status code
func (o *ReadNoopEntityInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this read noop entity internal server error response a status code equal to that given
func (o *ReadNoopEntityInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the read noop entity internal server error response
func (o *ReadNoopEntityInternalServerError) Code() int {
	return 500
}

func (o *ReadNoopEntityInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/unstable/config/noop-entities/{slug}][%d] readNoopEntityInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadNoopEntityInternalServerError) String() string {
	return fmt.Sprintf("[GET /api/unstable/config/noop-entities/{slug}][%d] readNoopEntityInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadNoopEntityInternalServerError) GetPayload() *models.APIError {
	return o.Payload
}

func (o *ReadNoopEntityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadNoopEntityDefault creates a ReadNoopEntityDefault with default headers values
func NewReadNoopEntityDefault(code int) *ReadNoopEntityDefault {
	return &ReadNoopEntityDefault{
		_statusCode: code,
	}
}

/*
ReadNoopEntityDefault describes a response with status code -1, with default header values.

An undefined error response.
*/
type ReadNoopEntityDefault struct {
	_statusCode int

	Payload models.GenericError
}

// IsSuccess returns true when this read noop entity default response has a 2xx status code
func (o *ReadNoopEntityDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this read noop entity default response has a 3xx status code
func (o *ReadNoopEntityDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this read noop entity default response has a 4xx status code
func (o *ReadNoopEntityDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this read noop entity default response has a 5xx status code
func (o *ReadNoopEntityDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this read noop entity default response a status code equal to that given
func (o *ReadNoopEntityDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the read noop entity default response
func (o *ReadNoopEntityDefault) Code() int {
	return o._statusCode
}

func (o *ReadNoopEntityDefault) Error() string {
	return fmt.Sprintf("[GET /api/unstable/config/noop-entities/{slug}][%d] ReadNoopEntity default  %+v", o._statusCode, o.Payload)
}

func (o *ReadNoopEntityDefault) String() string {
	return fmt.Sprintf("[GET /api/unstable/config/noop-entities/{slug}][%d] ReadNoopEntity default  %+v", o._statusCode, o.Payload)
}

func (o *ReadNoopEntityDefault) GetPayload() models.GenericError {
	return o.Payload
}

func (o *ReadNoopEntityDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
