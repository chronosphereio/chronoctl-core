// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListMonitorStatusesParams creates a new ListMonitorStatusesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListMonitorStatusesParams() *ListMonitorStatusesParams {
	return &ListMonitorStatusesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListMonitorStatusesParamsWithTimeout creates a new ListMonitorStatusesParams object
// with the ability to set a timeout on a request.
func NewListMonitorStatusesParamsWithTimeout(timeout time.Duration) *ListMonitorStatusesParams {
	return &ListMonitorStatusesParams{
		timeout: timeout,
	}
}

// NewListMonitorStatusesParamsWithContext creates a new ListMonitorStatusesParams object
// with the ability to set a context for a request.
func NewListMonitorStatusesParamsWithContext(ctx context.Context) *ListMonitorStatusesParams {
	return &ListMonitorStatusesParams{
		Context: ctx,
	}
}

// NewListMonitorStatusesParamsWithHTTPClient creates a new ListMonitorStatusesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListMonitorStatusesParamsWithHTTPClient(client *http.Client) *ListMonitorStatusesParams {
	return &ListMonitorStatusesParams{
		HTTPClient: client,
	}
}

/*
ListMonitorStatusesParams contains all the parameters to send to the API endpoint

	for the list monitor statuses operation.

	Typically these are written to a http.Request.
*/
type ListMonitorStatusesParams struct {

	/* CollectionSlugs.

	   Filter monitor state by owning collection.
	*/
	CollectionSlugs []string

	/* IncludeSeriesStatuses.

	   include_signal_statuses must be true for include_series_statuses to be true.
	*/
	IncludeSeriesStatuses *bool

	/* IncludeSignalStatuses.

	   include_signal_statuses must be true for include_series_statuses to be true.
	*/
	IncludeSignalStatuses *bool

	/* MonitorSlugs.

	     Filter by monitor slug.
	If all filters are empty, return status for all monitors.
	*/
	MonitorSlugs []string

	// SortBy.
	SortBy *string

	/* TeamSlugs.

	   Filter monitor state by owning team.
	*/
	TeamSlugs []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list monitor statuses params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListMonitorStatusesParams) WithDefaults() *ListMonitorStatusesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list monitor statuses params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListMonitorStatusesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list monitor statuses params
func (o *ListMonitorStatusesParams) WithTimeout(timeout time.Duration) *ListMonitorStatusesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list monitor statuses params
func (o *ListMonitorStatusesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list monitor statuses params
func (o *ListMonitorStatusesParams) WithContext(ctx context.Context) *ListMonitorStatusesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list monitor statuses params
func (o *ListMonitorStatusesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list monitor statuses params
func (o *ListMonitorStatusesParams) WithHTTPClient(client *http.Client) *ListMonitorStatusesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list monitor statuses params
func (o *ListMonitorStatusesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCollectionSlugs adds the collectionSlugs to the list monitor statuses params
func (o *ListMonitorStatusesParams) WithCollectionSlugs(collectionSlugs []string) *ListMonitorStatusesParams {
	o.SetCollectionSlugs(collectionSlugs)
	return o
}

// SetCollectionSlugs adds the collectionSlugs to the list monitor statuses params
func (o *ListMonitorStatusesParams) SetCollectionSlugs(collectionSlugs []string) {
	o.CollectionSlugs = collectionSlugs
}

// WithIncludeSeriesStatuses adds the includeSeriesStatuses to the list monitor statuses params
func (o *ListMonitorStatusesParams) WithIncludeSeriesStatuses(includeSeriesStatuses *bool) *ListMonitorStatusesParams {
	o.SetIncludeSeriesStatuses(includeSeriesStatuses)
	return o
}

// SetIncludeSeriesStatuses adds the includeSeriesStatuses to the list monitor statuses params
func (o *ListMonitorStatusesParams) SetIncludeSeriesStatuses(includeSeriesStatuses *bool) {
	o.IncludeSeriesStatuses = includeSeriesStatuses
}

// WithIncludeSignalStatuses adds the includeSignalStatuses to the list monitor statuses params
func (o *ListMonitorStatusesParams) WithIncludeSignalStatuses(includeSignalStatuses *bool) *ListMonitorStatusesParams {
	o.SetIncludeSignalStatuses(includeSignalStatuses)
	return o
}

// SetIncludeSignalStatuses adds the includeSignalStatuses to the list monitor statuses params
func (o *ListMonitorStatusesParams) SetIncludeSignalStatuses(includeSignalStatuses *bool) {
	o.IncludeSignalStatuses = includeSignalStatuses
}

// WithMonitorSlugs adds the monitorSlugs to the list monitor statuses params
func (o *ListMonitorStatusesParams) WithMonitorSlugs(monitorSlugs []string) *ListMonitorStatusesParams {
	o.SetMonitorSlugs(monitorSlugs)
	return o
}

// SetMonitorSlugs adds the monitorSlugs to the list monitor statuses params
func (o *ListMonitorStatusesParams) SetMonitorSlugs(monitorSlugs []string) {
	o.MonitorSlugs = monitorSlugs
}

// WithSortBy adds the sortBy to the list monitor statuses params
func (o *ListMonitorStatusesParams) WithSortBy(sortBy *string) *ListMonitorStatusesParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list monitor statuses params
func (o *ListMonitorStatusesParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithTeamSlugs adds the teamSlugs to the list monitor statuses params
func (o *ListMonitorStatusesParams) WithTeamSlugs(teamSlugs []string) *ListMonitorStatusesParams {
	o.SetTeamSlugs(teamSlugs)
	return o
}

// SetTeamSlugs adds the teamSlugs to the list monitor statuses params
func (o *ListMonitorStatusesParams) SetTeamSlugs(teamSlugs []string) {
	o.TeamSlugs = teamSlugs
}

// WriteToRequest writes these params to a swagger request
func (o *ListMonitorStatusesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CollectionSlugs != nil {

		// binding items for collection_slugs
		joinedCollectionSlugs := o.bindParamCollectionSlugs(reg)

		// query array param collection_slugs
		if err := r.SetQueryParam("collection_slugs", joinedCollectionSlugs...); err != nil {
			return err
		}
	}

	if o.IncludeSeriesStatuses != nil {

		// query param include_series_statuses
		var qrIncludeSeriesStatuses bool

		if o.IncludeSeriesStatuses != nil {
			qrIncludeSeriesStatuses = *o.IncludeSeriesStatuses
		}
		qIncludeSeriesStatuses := swag.FormatBool(qrIncludeSeriesStatuses)
		if qIncludeSeriesStatuses != "" {

			if err := r.SetQueryParam("include_series_statuses", qIncludeSeriesStatuses); err != nil {
				return err
			}
		}
	}

	if o.IncludeSignalStatuses != nil {

		// query param include_signal_statuses
		var qrIncludeSignalStatuses bool

		if o.IncludeSignalStatuses != nil {
			qrIncludeSignalStatuses = *o.IncludeSignalStatuses
		}
		qIncludeSignalStatuses := swag.FormatBool(qrIncludeSignalStatuses)
		if qIncludeSignalStatuses != "" {

			if err := r.SetQueryParam("include_signal_statuses", qIncludeSignalStatuses); err != nil {
				return err
			}
		}
	}

	if o.MonitorSlugs != nil {

		// binding items for monitor_slugs
		joinedMonitorSlugs := o.bindParamMonitorSlugs(reg)

		// query array param monitor_slugs
		if err := r.SetQueryParam("monitor_slugs", joinedMonitorSlugs...); err != nil {
			return err
		}
	}

	if o.SortBy != nil {

		// query param sort_by
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sort_by", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.TeamSlugs != nil {

		// binding items for team_slugs
		joinedTeamSlugs := o.bindParamTeamSlugs(reg)

		// query array param team_slugs
		if err := r.SetQueryParam("team_slugs", joinedTeamSlugs...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListMonitorStatuses binds the parameter collection_slugs
func (o *ListMonitorStatusesParams) bindParamCollectionSlugs(formats strfmt.Registry) []string {
	collectionSlugsIR := o.CollectionSlugs

	var collectionSlugsIC []string
	for _, collectionSlugsIIR := range collectionSlugsIR { // explode []string

		collectionSlugsIIV := collectionSlugsIIR // string as string
		collectionSlugsIC = append(collectionSlugsIC, collectionSlugsIIV)
	}

	// items.CollectionFormat: "multi"
	collectionSlugsIS := swag.JoinByFormat(collectionSlugsIC, "multi")

	return collectionSlugsIS
}

// bindParamListMonitorStatuses binds the parameter monitor_slugs
func (o *ListMonitorStatusesParams) bindParamMonitorSlugs(formats strfmt.Registry) []string {
	monitorSlugsIR := o.MonitorSlugs

	var monitorSlugsIC []string
	for _, monitorSlugsIIR := range monitorSlugsIR { // explode []string

		monitorSlugsIIV := monitorSlugsIIR // string as string
		monitorSlugsIC = append(monitorSlugsIC, monitorSlugsIIV)
	}

	// items.CollectionFormat: "multi"
	monitorSlugsIS := swag.JoinByFormat(monitorSlugsIC, "multi")

	return monitorSlugsIS
}

// bindParamListMonitorStatuses binds the parameter team_slugs
func (o *ListMonitorStatusesParams) bindParamTeamSlugs(formats strfmt.Registry) []string {
	teamSlugsIR := o.TeamSlugs

	var teamSlugsIC []string
	for _, teamSlugsIIR := range teamSlugsIR { // explode []string

		teamSlugsIIV := teamSlugsIIR // string as string
		teamSlugsIC = append(teamSlugsIC, teamSlugsIIV)
	}

	// items.CollectionFormat: "multi"
	teamSlugsIS := swag.JoinByFormat(teamSlugsIC, "multi")

	return teamSlugsIS
}
