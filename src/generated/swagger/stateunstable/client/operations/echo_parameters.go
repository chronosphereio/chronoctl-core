// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewEchoParams creates a new EchoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEchoParams() *EchoParams {
	return &EchoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEchoParamsWithTimeout creates a new EchoParams object
// with the ability to set a timeout on a request.
func NewEchoParamsWithTimeout(timeout time.Duration) *EchoParams {
	return &EchoParams{
		timeout: timeout,
	}
}

// NewEchoParamsWithContext creates a new EchoParams object
// with the ability to set a context for a request.
func NewEchoParamsWithContext(ctx context.Context) *EchoParams {
	return &EchoParams{
		Context: ctx,
	}
}

// NewEchoParamsWithHTTPClient creates a new EchoParams object
// with the ability to set a custom HTTPClient for a request.
func NewEchoParamsWithHTTPClient(client *http.Client) *EchoParams {
	return &EchoParams{
		HTTPClient: client,
	}
}

/*
EchoParams contains all the parameters to send to the API endpoint

	for the echo operation.

	Typically these are written to a http.Request.
*/
type EchoParams struct {

	// Message.
	Message *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the echo params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EchoParams) WithDefaults() *EchoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the echo params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EchoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the echo params
func (o *EchoParams) WithTimeout(timeout time.Duration) *EchoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the echo params
func (o *EchoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the echo params
func (o *EchoParams) WithContext(ctx context.Context) *EchoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the echo params
func (o *EchoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the echo params
func (o *EchoParams) WithHTTPClient(client *http.Client) *EchoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the echo params
func (o *EchoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMessage adds the message to the echo params
func (o *EchoParams) WithMessage(message *string) *EchoParams {
	o.SetMessage(message)
	return o
}

// SetMessage adds the message to the echo params
func (o *EchoParams) SetMessage(message *string) {
	o.Message = message
}

// WriteToRequest writes these params to a swagger request
func (o *EchoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Message != nil {

		// query param message
		var qrMessage string

		if o.Message != nil {
			qrMessage = *o.Message
		}
		qMessage := qrMessage
		if qMessage != "" {

			if err := r.SetQueryParam("message", qMessage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
