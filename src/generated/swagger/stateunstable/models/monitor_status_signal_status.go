// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MonitorStatusSignalStatus monitor status signal status
//
// swagger:model MonitorStatusSignalStatus
type MonitorStatusSignalStatus struct {

	// state
	State StateunstableAlertingState `json:"state,omitempty"`

	// severity
	Severity string `json:"severity,omitempty"`

	// Signal labels.
	SignalLabels []*CommonLabel `json:"signal_labels"`

	// series
	Series []*SignalStatusSeriesStatus `json:"series"`
}

// Validate validates this monitor status signal status
func (m *MonitorStatusSignalStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitorStatusSignalStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *MonitorStatusSignalStatus) validateSignalLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.SignalLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.SignalLabels); i++ {
		if swag.IsZero(m.SignalLabels[i]) { // not required
			continue
		}

		if m.SignalLabels[i] != nil {
			if err := m.SignalLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signal_labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("signal_labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MonitorStatusSignalStatus) validateSeries(formats strfmt.Registry) error {
	if swag.IsZero(m.Series) { // not required
		return nil
	}

	for i := 0; i < len(m.Series); i++ {
		if swag.IsZero(m.Series[i]) { // not required
			continue
		}

		if m.Series[i] != nil {
			if err := m.Series[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("series" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this monitor status signal status based on the context it is used
func (m *MonitorStatusSignalStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignalLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitorStatusSignalStatus) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *MonitorStatusSignalStatus) contextValidateSignalLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SignalLabels); i++ {

		if m.SignalLabels[i] != nil {

			if swag.IsZero(m.SignalLabels[i]) { // not required
				return nil
			}

			if err := m.SignalLabels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signal_labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("signal_labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MonitorStatusSignalStatus) contextValidateSeries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Series); i++ {

		if m.Series[i] != nil {

			if swag.IsZero(m.Series[i]) { // not required
				return nil
			}

			if err := m.Series[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("series" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitorStatusSignalStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitorStatusSignalStatus) UnmarshalBinary(b []byte) error {
	var res MonitorStatusSignalStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
