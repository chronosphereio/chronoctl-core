// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigunstableDatasetFilter TODO(codyg): remove; still in-use by stateunstable.
//
// swagger:model configunstableDatasetFilter
type ConfigunstableDatasetFilter struct {

	// operator
	Operator ConfigunstableDatasetFilterOperator `json:"operator,omitempty"`

	// datasets
	Datasets []*DatasetFilterDataset `json:"datasets"`
}

// Validate validates this configunstable dataset filter
func (m *ConfigunstableDatasetFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatasets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableDatasetFilter) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	if err := m.Operator.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("operator")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableDatasetFilter) validateDatasets(formats strfmt.Registry) error {
	if swag.IsZero(m.Datasets) { // not required
		return nil
	}

	for i := 0; i < len(m.Datasets); i++ {
		if swag.IsZero(m.Datasets[i]) { // not required
			continue
		}

		if m.Datasets[i] != nil {
			if err := m.Datasets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datasets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datasets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this configunstable dataset filter based on the context it is used
func (m *ConfigunstableDatasetFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatasets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigunstableDatasetFilter) contextValidateOperator(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	if err := m.Operator.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operator")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("operator")
		}
		return err
	}

	return nil
}

func (m *ConfigunstableDatasetFilter) contextValidateDatasets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Datasets); i++ {

		if m.Datasets[i] != nil {

			if swag.IsZero(m.Datasets[i]) { // not required
				return nil
			}

			if err := m.Datasets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datasets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datasets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigunstableDatasetFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigunstableDatasetFilter) UnmarshalBinary(b []byte) error {
	var res ConfigunstableDatasetFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
