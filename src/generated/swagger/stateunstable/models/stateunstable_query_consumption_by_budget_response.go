// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StateunstableQueryConsumptionByBudgetResponse stateunstable query consumption by budget response
//
// swagger:model stateunstableQueryConsumptionByBudgetResponse
type StateunstableQueryConsumptionByBudgetResponse struct {

	// Paginated list of series in ascending chronological order. Different paginated responses to this endpoint for the same
	// call can return different budget's time series; the caller is expected to concat datapoints for previously seen
	// budget series.
	Series []*StateunstableQueryConsumptionByBudgetResponseTimeSeries `json:"series"`

	// page
	Page *Configv1PageResult `json:"page,omitempty"`
}

// Validate validates this stateunstable query consumption by budget response
func (m *StateunstableQueryConsumptionByBudgetResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StateunstableQueryConsumptionByBudgetResponse) validateSeries(formats strfmt.Registry) error {
	if swag.IsZero(m.Series) { // not required
		return nil
	}

	for i := 0; i < len(m.Series); i++ {
		if swag.IsZero(m.Series[i]) { // not required
			continue
		}

		if m.Series[i] != nil {
			if err := m.Series[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("series" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateunstableQueryConsumptionByBudgetResponse) validatePage(formats strfmt.Registry) error {
	if swag.IsZero(m.Page) { // not required
		return nil
	}

	if m.Page != nil {
		if err := m.Page.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("page")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("page")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this stateunstable query consumption by budget response based on the context it is used
func (m *StateunstableQueryConsumptionByBudgetResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSeries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StateunstableQueryConsumptionByBudgetResponse) contextValidateSeries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Series); i++ {

		if m.Series[i] != nil {

			if swag.IsZero(m.Series[i]) { // not required
				return nil
			}

			if err := m.Series[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("series" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateunstableQueryConsumptionByBudgetResponse) contextValidatePage(ctx context.Context, formats strfmt.Registry) error {

	if m.Page != nil {

		if swag.IsZero(m.Page) { // not required
			return nil
		}

		if err := m.Page.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("page")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("page")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StateunstableQueryConsumptionByBudgetResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StateunstableQueryConsumptionByBudgetResponse) UnmarshalBinary(b []byte) error {
	var res StateunstableQueryConsumptionByBudgetResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
