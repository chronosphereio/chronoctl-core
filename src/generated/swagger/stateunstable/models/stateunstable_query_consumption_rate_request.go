// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StateunstableQueryConsumptionRateRequest QueryConsumptionRateRequest for querying consumption rates.
//
// swagger:model stateunstableQueryConsumptionRateRequest
type StateunstableQueryConsumptionRateRequest struct {

	// resource
	Resource ConsumptionBudgetResource `json:"resource,omitempty"`

	// start at
	// Format: date-time
	StartAt strfmt.DateTime `json:"start_at,omitempty"`

	// end at
	// Format: date-time
	EndAt strfmt.DateTime `json:"end_at,omitempty"`

	// step secs
	StepSecs int32 `json:"step_secs,omitempty"`

	// partition name path
	PartitionNamePath []string `json:"partition_name_path"`

	// group by dataset slug
	GroupByDatasetSlug string `json:"group_by_dataset_slug,omitempty"`

	// dataset filters
	DatasetFilters []*ConfigunstableDatasetFilter `json:"dataset_filters"`

	// page
	Page *Configv1PageParams `json:"page,omitempty"`
}

// Validate validates this stateunstable query consumption rate request
func (m *StateunstableQueryConsumptionRateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatasetFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StateunstableQueryConsumptionRateRequest) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if err := m.Resource.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("resource")
		}
		return err
	}

	return nil
}

func (m *StateunstableQueryConsumptionRateRequest) validateStartAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StartAt) { // not required
		return nil
	}

	if err := validate.FormatOf("start_at", "body", "date-time", m.StartAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StateunstableQueryConsumptionRateRequest) validateEndAt(formats strfmt.Registry) error {
	if swag.IsZero(m.EndAt) { // not required
		return nil
	}

	if err := validate.FormatOf("end_at", "body", "date-time", m.EndAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StateunstableQueryConsumptionRateRequest) validateDatasetFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.DatasetFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.DatasetFilters); i++ {
		if swag.IsZero(m.DatasetFilters[i]) { // not required
			continue
		}

		if m.DatasetFilters[i] != nil {
			if err := m.DatasetFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataset_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataset_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateunstableQueryConsumptionRateRequest) validatePage(formats strfmt.Registry) error {
	if swag.IsZero(m.Page) { // not required
		return nil
	}

	if m.Page != nil {
		if err := m.Page.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("page")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("page")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this stateunstable query consumption rate request based on the context it is used
func (m *StateunstableQueryConsumptionRateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatasetFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StateunstableQueryConsumptionRateRequest) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if err := m.Resource.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("resource")
		}
		return err
	}

	return nil
}

func (m *StateunstableQueryConsumptionRateRequest) contextValidateDatasetFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DatasetFilters); i++ {

		if m.DatasetFilters[i] != nil {

			if swag.IsZero(m.DatasetFilters[i]) { // not required
				return nil
			}

			if err := m.DatasetFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataset_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataset_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StateunstableQueryConsumptionRateRequest) contextValidatePage(ctx context.Context, formats strfmt.Registry) error {

	if m.Page != nil {

		if swag.IsZero(m.Page) { // not required
			return nil
		}

		if err := m.Page.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("page")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("page")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StateunstableQueryConsumptionRateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StateunstableQueryConsumptionRateRequest) UnmarshalBinary(b []byte) error {
	var res StateunstableQueryConsumptionRateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
