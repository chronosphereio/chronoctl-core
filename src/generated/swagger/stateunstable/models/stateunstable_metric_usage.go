// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StateunstableMetricUsage stateunstable metric usage
//
// swagger:model stateunstableMetricUsage
type StateunstableMetricUsage struct {

	// total references
	TotalReferences int32 `json:"total_references,omitempty"`

	// total query executions
	TotalQueryExecutions int32 `json:"total_query_executions,omitempty"`

	// total unique users
	TotalUniqueUsers int32 `json:"total_unique_users,omitempty"`

	// utility score
	UtilityScore float64 `json:"utility_score,omitempty"`

	// reference counts by type
	ReferenceCountsByType *MetricUsageReferenceCountsByType `json:"reference_counts_by_type,omitempty"`

	// query execution counts by type
	QueryExecutionCountsByType *MetricUsageQueryExecutionCountsByType `json:"query_execution_counts_by_type,omitempty"`
}

// Validate validates this stateunstable metric usage
func (m *StateunstableMetricUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReferenceCountsByType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryExecutionCountsByType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StateunstableMetricUsage) validateReferenceCountsByType(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferenceCountsByType) { // not required
		return nil
	}

	if m.ReferenceCountsByType != nil {
		if err := m.ReferenceCountsByType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference_counts_by_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference_counts_by_type")
			}
			return err
		}
	}

	return nil
}

func (m *StateunstableMetricUsage) validateQueryExecutionCountsByType(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryExecutionCountsByType) { // not required
		return nil
	}

	if m.QueryExecutionCountsByType != nil {
		if err := m.QueryExecutionCountsByType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query_execution_counts_by_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("query_execution_counts_by_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this stateunstable metric usage based on the context it is used
func (m *StateunstableMetricUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReferenceCountsByType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryExecutionCountsByType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StateunstableMetricUsage) contextValidateReferenceCountsByType(ctx context.Context, formats strfmt.Registry) error {

	if m.ReferenceCountsByType != nil {

		if swag.IsZero(m.ReferenceCountsByType) { // not required
			return nil
		}

		if err := m.ReferenceCountsByType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference_counts_by_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference_counts_by_type")
			}
			return err
		}
	}

	return nil
}

func (m *StateunstableMetricUsage) contextValidateQueryExecutionCountsByType(ctx context.Context, formats strfmt.Registry) error {

	if m.QueryExecutionCountsByType != nil {

		if swag.IsZero(m.QueryExecutionCountsByType) { // not required
			return nil
		}

		if err := m.QueryExecutionCountsByType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query_execution_counts_by_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("query_execution_counts_by_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StateunstableMetricUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StateunstableMetricUsage) UnmarshalBinary(b []byte) error {
	var res StateunstableMetricUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
