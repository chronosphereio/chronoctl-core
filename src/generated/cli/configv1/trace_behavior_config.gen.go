// Code generated by chronogen; DO NOT EDIT
package configv1

import (
	"context"
	"fmt"

	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/client"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/clienterror"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/dry"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/file"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/groups"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/output"
	config_v1 "github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/client/operations"
	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
	"github.com/chronosphereio/chronoctl-core/src/types"
	"github.com/spf13/cobra"
)

func init() { types.MustRegisterObject(TraceBehaviorConfigTypeMeta, &TraceBehaviorConfig{}) }

var _ types.Object = &TraceBehaviorConfig{}

var TraceBehaviorConfigTypeMeta = types.TypeMeta{
	APIVersion: "v1/config",
	Kind:       "TraceBehaviorConfig",
}

type TraceBehaviorConfig struct {
	types.TypeMeta `json:",inline"`
	Spec           *models.Configv1TraceBehaviorConfig `json:"spec"`
}

func NewTraceBehaviorConfig(spec *models.Configv1TraceBehaviorConfig) *TraceBehaviorConfig {
	return &TraceBehaviorConfig{
		TypeMeta: TraceBehaviorConfigTypeMeta,
		Spec:     spec,
	}
}

func (e *TraceBehaviorConfig) Description() string {
	return types.TypeDescription(e)
}

func (e *TraceBehaviorConfig) Identifier() string {
	return "TraceBehaviorConfig"
}

func CreateTraceBehaviorConfig(
	ctx context.Context,
	client config_v1.ClientService,
	entity *TraceBehaviorConfig,
	dryRun bool,
) (*TraceBehaviorConfig, error) {
	res, err := client.CreateTraceBehaviorConfig(&config_v1.CreateTraceBehaviorConfigParams{
		Context: ctx,
		Body: &models.Configv1CreateTraceBehaviorConfigRequest{
			DryRun:              dryRun,
			TraceBehaviorConfig: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewTraceBehaviorConfig(res.Payload.TraceBehaviorConfig), nil
}

func newTraceBehaviorConfigCreateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	var (
		use   string
		short string
	)
	use = "create -f <file>"
	short = "Creates a single TraceBehaviorConfig."

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			var traceBehaviorConfig *TraceBehaviorConfig
			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck
			traceBehaviorConfig, err = types.MustDecodeSingleObject[*TraceBehaviorConfig](file, permissiveParsing)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set")
			}
			fullTraceBehaviorConfig, err := CreateTraceBehaviorConfig(ctx, client, traceBehaviorConfig, dryRunFlags.DryRun)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("TraceBehaviorConfig is valid and can be created")
				return nil
			}
			stderr.Printf("TraceBehaviorConfig created successfully\n")

			if err := outputFlags.WriteObject(fullTraceBehaviorConfig, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are not rejected. Defaults to false.")

	return cmd
}

func GetTraceBehaviorConfig(
	ctx context.Context,
	client config_v1.ClientService,
) (*TraceBehaviorConfig, error) {
	res, err := client.ReadTraceBehaviorConfig(&config_v1.ReadTraceBehaviorConfigParams{
		Context: ctx,
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewTraceBehaviorConfig(res.GetPayload().TraceBehaviorConfig), nil
}

func newTraceBehaviorConfigReadCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
	var (
		short string
		use   string
		args  cobra.PositionalArgs
	)
	short = "Reads a TraceBehaviorConfig singleton"
	use = "read"

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		Args:    args,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}
			entity, err := GetTraceBehaviorConfig(ctx, client)
			if err != nil {
				return err
			}
			if err := outputFlags.WriteObject(entity, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}

	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)

	return cmd
}

func UpdateTraceBehaviorConfig(
	ctx context.Context,
	client config_v1.ClientService,
	entity *TraceBehaviorConfig,
	opts UpdateOptions,
) (*TraceBehaviorConfig, error) {
	res, err := client.UpdateTraceBehaviorConfig(&config_v1.UpdateTraceBehaviorConfigParams{
		Context: ctx,
		Body: &models.Configv1UpdateTraceBehaviorConfigRequest{
			CreateIfMissing:     opts.CreateIfMissing,
			DryRun:              opts.DryRun,
			TraceBehaviorConfig: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}

	return NewTraceBehaviorConfig(res.Payload.TraceBehaviorConfig), nil
}

func newTraceBehaviorConfigUpdateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		createIfMissing   bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	cmd := &cobra.Command{
		Use:     "update -f <filename>",
		GroupID: groups.Commands.ID,
		Short:   "Updates an existing TraceBehaviorConfig.",
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck

			traceBehaviorConfig, err := types.MustDecodeSingleObject[*TraceBehaviorConfig](file, permissiveParsing)
			if err != nil {
				return err
			}

			updateOpts := UpdateOptions{
				DryRun:          dryRunFlags.DryRun,
				CreateIfMissing: createIfMissing,
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set, update not persisted")
			}

			fullTraceBehaviorConfig, err := UpdateTraceBehaviorConfig(ctx, client, traceBehaviorConfig, updateOpts)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("TraceBehaviorConfig is valid and can be updated")
				return nil
			}
			stderr.Printf("TraceBehaviorConfig applied successfully\n")

			if err := outputFlags.WriteObject(fullTraceBehaviorConfig, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are allowed. Defaults to false.")
	cmd.Flags().BoolVar(&createIfMissing, "create-if-missing", false, "If set, creates the TraceBehaviorConfig if it does not already exist. Defaults to false.")

	return cmd
}

func DeleteTraceBehaviorConfig(
	ctx context.Context,
	client config_v1.ClientService,
) error {
	_, err := client.DeleteTraceBehaviorConfig(&config_v1.DeleteTraceBehaviorConfigParams{
		Context: ctx,
	})
	if err != nil {
		return clienterror.Wrap(err)
	}
	return nil
}

func newTraceBehaviorConfigDeleteCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())

	cmd := &cobra.Command{
		Use:     "delete",
		GroupID: groups.Commands.ID,
		Short:   "Deletes the TraceBehaviorConfig singleton",
		Args:    cobra.NoArgs,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			res, err := client.DeleteTraceBehaviorConfig(&config_v1.DeleteTraceBehaviorConfigParams{
				Context: ctx,
			})
			if err != nil {
				return clienterror.Wrap(err)
			}
			_ = res
			fmt.Fprintf(cmd.OutOrStdout(), "deleted TraceBehaviorConfig")
			return nil
		},
	}
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	return cmd
}

const TraceBehaviorConfigScaffoldYAML = `api_version: v1/config
kind: TraceBehaviorConfig
spec:
    # List of assignments for the main behavior. The referenced datasets will be
    # enrolled in behaviors. The referenced behaviors are the active behaviors for the
    # dataset when there is no active override. Only one main behavior can be assigned
    # to a dataset. See the documentation for
    # [customizing your sampling
    # strategy](https://docs.chronosphere.io/control/sampling/behaviors#customize-your-sampling-strategy)
    # for more information.
    main_behavior_assignments:
        - # The timestamp of when the trace behavior was created.
          created_at: <date-time>
          # The timestamp of when the trace behavior was updated.
          updated_at: <date-time>
          # The slug reference of a trace dataset.
          dataset_slug: <string>
          # The slug reference of a trace behavior.
          behavior_slug: <string>
          # The author or creator of the behavior assignment.
          created_by: <string>
          # A description of the behavior assignment.
          description: <string>
    # List of assignments for the override behavior. These assignments specify the
    # active behavior for a dataset over a specific time range. Only one override
    # behavior can be assigned to a dataset.
    override_behavior_assignments:
        - # The timestamp of when the override behavior assignment was created.
          created_at: <date-time>
          # The timestamp of when the override behavior assignment was updated.
          updated_at: <date-time>
          # The slug reference of a trace dataset.
          dataset_slug: <string>
          # The slug reference of a trace behavior.
          behavior_slug: <string>
          # The starting time of the override.
          start_time: <date-time>
          # The ending time of the override.
          end_time: <date-time>
          # The author or creator of the override.
          created_by: <string>
          # A description of the override.
          description: <string>
    # List of dataset priorities. This list specifies the order in which datasets are
    # considered when determining the behavior to follow for a trace. Dataset
    # priorities are used to break ties when a trace matches more than one dataset
    # with an active behavior.
    # * Each entry in this list must refer to the slug of an existing dataset.
    # * The order of the list is the order in which the datasets are considered.
    # * The list must contain all datasets referenced in either
    #   'main_behavior_assignments' or 'override_behavior_assignments'.
    # * The list can contain datasets that are not referenced in either of these
    #   assignments.
    dataset_priorities:
        - <string>
    # The baseline behavior to use for behavior assignments and base head sampling rates.
    baseline_behavior_slug: <string>
    # List of assignments for the preview behavior. The referenced behaviors are in
    # preview mode for the assigned dataset. You can assign only one preview behavior
    # to a dataset.
    preview_behavior_assignments:
        - # The timestamp of when the override behavior assignment was created.
          created_at: <date-time>
          # The timestamp of when the override behavior assignment was updated.
          updated_at: <date-time>
          # The slug reference of a trace dataset.
          dataset_slug: <string>
          # The slug reference of a trace behavior.
          behavior_slug: <string>
          # The starting time of the override.
          start_time: <date-time>
          # The ending time of the override.
          end_time: <date-time>
          # The author or creator of the override.
          created_by: <string>
          # A description of the override.
          description: <string>
`

func newTraceBehaviorConfigScaffoldCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "scaffold",
		GroupID: groups.Commands.ID,
		Short:   "Scaffolds a complete object with placeholder values",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Fprint(cmd.OutOrStdout(), TraceBehaviorConfigScaffoldYAML)
		},
	}
	return cmd
}

func NewTraceBehaviorConfigCmd() *cobra.Command {
	root := &cobra.Command{
		Use:     "trace-behavior-config",
		GroupID: groups.Config.ID,
		Short:   "All commands for TraceBehaviorConfig",
	}

	root.AddGroup(groups.Commands)
	root.AddCommand(
		newTraceBehaviorConfigCreateCmd(),
		newTraceBehaviorConfigReadCmd(),
		newTraceBehaviorConfigUpdateCmd(),
		newTraceBehaviorConfigDeleteCmd(),
		newTraceBehaviorConfigScaffoldCmd(),
	)
	return root
}
