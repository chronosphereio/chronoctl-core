// Code generated by chronogen; DO NOT EDIT
package configv1

import (
	"context"
	"fmt"

	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/client"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/clienterror"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/dry"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/file"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/groups"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/output"
	config_v1 "github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/client/operations"
	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
	"github.com/chronosphereio/chronoctl-core/src/types"
	"github.com/spf13/cobra"
)

func init() { types.MustRegisterObject(LogControlConfigTypeMeta, &LogControlConfig{}) }

var _ types.Object = &LogControlConfig{}

var LogControlConfigTypeMeta = types.TypeMeta{
	APIVersion: "v1/config",
	Kind:       "LogControlConfig",
}

type LogControlConfig struct {
	types.TypeMeta `json:",inline"`
	Spec           *models.Configv1LogControlConfig `json:"spec"`
}

func NewLogControlConfig(spec *models.Configv1LogControlConfig) *LogControlConfig {
	return &LogControlConfig{
		TypeMeta: LogControlConfigTypeMeta,
		Spec:     spec,
	}
}

func (e *LogControlConfig) Description() string {
	return types.TypeDescription(e)
}

func (e *LogControlConfig) Identifier() string {
	return "LogControlConfig"
}

func CreateLogControlConfig(
	ctx context.Context,
	client config_v1.ClientService,
	entity *LogControlConfig,
	dryRun bool,
) (*LogControlConfig, error) {
	res, err := client.CreateLogControlConfig(&config_v1.CreateLogControlConfigParams{
		Context: ctx,
		Body: &models.Configv1CreateLogControlConfigRequest{
			DryRun:           dryRun,
			LogControlConfig: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewLogControlConfig(res.Payload.LogControlConfig), nil
}

func newLogControlConfigCreateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	var (
		use   string
		short string
	)
	use = "create -f <file>"
	short = "Creates a single LogControlConfig."

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			var logControlConfig *LogControlConfig
			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck
			logControlConfig, err = types.MustDecodeSingleObject[*LogControlConfig](file, permissiveParsing)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set")
			}
			fullLogControlConfig, err := CreateLogControlConfig(ctx, client, logControlConfig, dryRunFlags.DryRun)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("LogControlConfig is valid and can be created")
				return nil
			}
			stderr.Printf("LogControlConfig created successfully\n")

			if err := outputFlags.WriteObject(fullLogControlConfig, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are not rejected. Defaults to false.")

	return cmd
}

func GetLogControlConfig(
	ctx context.Context,
	client config_v1.ClientService,
) (*LogControlConfig, error) {
	res, err := client.ReadLogControlConfig(&config_v1.ReadLogControlConfigParams{
		Context: ctx,
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewLogControlConfig(res.GetPayload().LogControlConfig), nil
}

func newLogControlConfigReadCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
	var (
		short string
		use   string
		args  cobra.PositionalArgs
	)
	short = "Reads a LogControlConfig singleton"
	use = "read"

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		Args:    args,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}
			entity, err := GetLogControlConfig(ctx, client)
			if err != nil {
				return err
			}
			if err := outputFlags.WriteObject(entity, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}

	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)

	return cmd
}

func UpdateLogControlConfig(
	ctx context.Context,
	client config_v1.ClientService,
	entity *LogControlConfig,
	opts UpdateOptions,
) (*LogControlConfig, error) {
	res, err := client.UpdateLogControlConfig(&config_v1.UpdateLogControlConfigParams{
		Context: ctx,
		Body: &models.Configv1UpdateLogControlConfigRequest{
			CreateIfMissing:  opts.CreateIfMissing,
			DryRun:           opts.DryRun,
			LogControlConfig: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}

	return NewLogControlConfig(res.Payload.LogControlConfig), nil
}

func newLogControlConfigUpdateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		createIfMissing   bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	cmd := &cobra.Command{
		Use:     "update -f <filename>",
		GroupID: groups.Commands.ID,
		Short:   "Updates an existing LogControlConfig.",
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck

			logControlConfig, err := types.MustDecodeSingleObject[*LogControlConfig](file, permissiveParsing)
			if err != nil {
				return err
			}

			updateOpts := UpdateOptions{
				DryRun:          dryRunFlags.DryRun,
				CreateIfMissing: createIfMissing,
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set, update not persisted")
			}

			fullLogControlConfig, err := UpdateLogControlConfig(ctx, client, logControlConfig, updateOpts)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("LogControlConfig is valid and can be updated")
				return nil
			}
			stderr.Printf("LogControlConfig applied successfully\n")

			if err := outputFlags.WriteObject(fullLogControlConfig, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are allowed. Defaults to false.")
	cmd.Flags().BoolVar(&createIfMissing, "create-if-missing", false, "If set, creates the LogControlConfig if it does not already exist. Defaults to false.")

	return cmd
}

func DeleteLogControlConfig(
	ctx context.Context,
	client config_v1.ClientService,
) error {
	_, err := client.DeleteLogControlConfig(&config_v1.DeleteLogControlConfigParams{
		Context: ctx,
	})
	if err != nil {
		return clienterror.Wrap(err)
	}
	return nil
}

func newLogControlConfigDeleteCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())

	cmd := &cobra.Command{
		Use:     "delete",
		GroupID: groups.Commands.ID,
		Short:   "Deletes the LogControlConfig singleton",
		Args:    cobra.NoArgs,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			res, err := client.DeleteLogControlConfig(&config_v1.DeleteLogControlConfigParams{
				Context: ctx,
			})
			if err != nil {
				return clienterror.Wrap(err)
			}
			_ = res
			fmt.Fprintf(cmd.OutOrStdout(), "deleted LogControlConfig")
			return nil
		},
	}
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	return cmd
}

const LogControlConfigScaffoldYAML = `api_version: v1/config
kind: LogControlConfig
spec:
    # Control Rules are the ordered list of control rules.
    rules:
        - # Name is the name of the control rule.
          name: <string>
          # Log query syntax to select logs. Only matching logs will have control action applied.
          filter: <string>
          # DropField is the configuration for a drop field action.
          drop_field:
            # Regular expression to match the field name(s) to drop.
            field_regex: <string>
            parent_path:
                # LogQL Selector to indicate field path. Use 'parent[child]' syntax to
                # indicate nesting.
                selector: <string>
          mode: <ENABLED|DISABLED>
          # Sample is the configuration for the sample logs action.
          sample:
            # Percentage of matching logs to keep. Must be in the range (0, 1].
            rate: <number>
          type: <DROP|SAMPLE|DROP_FIELD>
`

func newLogControlConfigScaffoldCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "scaffold",
		GroupID: groups.Commands.ID,
		Short:   "Scaffolds a complete object with placeholder values",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Fprint(cmd.OutOrStdout(), LogControlConfigScaffoldYAML)
		},
	}
	return cmd
}

func NewLogControlConfigCmd() *cobra.Command {
	root := &cobra.Command{
		Use:     "log-control-config",
		GroupID: groups.Config.ID,
		Short:   "All commands for LogControlConfig",
	}

	root.AddGroup(groups.Commands)
	root.AddCommand(
		newLogControlConfigCreateCmd(),
		newLogControlConfigReadCmd(),
		newLogControlConfigUpdateCmd(),
		newLogControlConfigDeleteCmd(),
		newLogControlConfigScaffoldCmd(),
	)
	return root
}
