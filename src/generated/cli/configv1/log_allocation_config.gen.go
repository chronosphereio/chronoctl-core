// Code generated by chronogen; DO NOT EDIT
package configv1

import (
	"context"
	"fmt"

	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/client"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/clienterror"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/dry"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/file"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/groups"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/output"
	config_v1 "github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/client/operations"
	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
	"github.com/chronosphereio/chronoctl-core/src/types"
	"github.com/spf13/cobra"
)

func init() { types.MustRegisterObject(LogAllocationConfigTypeMeta, &LogAllocationConfig{}) }

var _ types.Object = &LogAllocationConfig{}

var LogAllocationConfigTypeMeta = types.TypeMeta{
	APIVersion: "v1/config",
	Kind:       "LogAllocationConfig",
}

type LogAllocationConfig struct {
	types.TypeMeta `json:",inline"`
	Spec           *models.Configv1LogAllocationConfig `json:"spec"`
}

func NewLogAllocationConfig(spec *models.Configv1LogAllocationConfig) *LogAllocationConfig {
	return &LogAllocationConfig{
		TypeMeta: LogAllocationConfigTypeMeta,
		Spec:     spec,
	}
}

func (e *LogAllocationConfig) Description() string {
	return types.TypeDescription(e)
}

func (e *LogAllocationConfig) Identifier() string {
	return "LogAllocationConfig"
}

func CreateLogAllocationConfig(
	ctx context.Context,
	client config_v1.ClientService,
	entity *LogAllocationConfig,
	dryRun bool,
) (*LogAllocationConfig, error) {
	res, err := client.CreateLogAllocationConfig(&config_v1.CreateLogAllocationConfigParams{
		Context: ctx,
		Body: &models.Configv1CreateLogAllocationConfigRequest{
			DryRun:              dryRun,
			LogAllocationConfig: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewLogAllocationConfig(res.Payload.LogAllocationConfig), nil
}

func newLogAllocationConfigCreateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	var (
		use   string
		short string
	)
	use = "create -f <file>"
	short = "Creates a single LogAllocationConfig."

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			var logAllocationConfig *LogAllocationConfig
			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck
			logAllocationConfig, err = types.MustDecodeSingleObject[*LogAllocationConfig](file, permissiveParsing)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set")
			}
			fullLogAllocationConfig, err := CreateLogAllocationConfig(ctx, client, logAllocationConfig, dryRunFlags.DryRun)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("LogAllocationConfig is valid and can be created")
				return nil
			}
			stderr.Printf("LogAllocationConfig created successfully\n")

			if err := outputFlags.WriteObject(fullLogAllocationConfig, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are not rejected. Defaults to false.")

	return cmd
}

func GetLogAllocationConfig(
	ctx context.Context,
	client config_v1.ClientService,
) (*LogAllocationConfig, error) {
	res, err := client.ReadLogAllocationConfig(&config_v1.ReadLogAllocationConfigParams{
		Context: ctx,
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewLogAllocationConfig(res.GetPayload().LogAllocationConfig), nil
}

func newLogAllocationConfigReadCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
	var (
		short string
		use   string
		args  cobra.PositionalArgs
	)
	short = "Reads a LogAllocationConfig singleton"
	use = "read"

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		Args:    args,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}
			entity, err := GetLogAllocationConfig(ctx, client)
			if err != nil {
				return err
			}
			if err := outputFlags.WriteObject(entity, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}

	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)

	return cmd
}

func UpdateLogAllocationConfig(
	ctx context.Context,
	client config_v1.ClientService,
	entity *LogAllocationConfig,
	opts UpdateOptions,
) (*LogAllocationConfig, error) {
	res, err := client.UpdateLogAllocationConfig(&config_v1.UpdateLogAllocationConfigParams{
		Context: ctx,
		Body: &models.Configv1UpdateLogAllocationConfigRequest{
			CreateIfMissing:     opts.CreateIfMissing,
			DryRun:              opts.DryRun,
			LogAllocationConfig: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}

	return NewLogAllocationConfig(res.Payload.LogAllocationConfig), nil
}

func newLogAllocationConfigUpdateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		createIfMissing   bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	cmd := &cobra.Command{
		Use:     "update -f <filename>",
		GroupID: groups.Commands.ID,
		Short:   "Updates an existing LogAllocationConfig.",
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck

			logAllocationConfig, err := types.MustDecodeSingleObject[*LogAllocationConfig](file, permissiveParsing)
			if err != nil {
				return err
			}

			updateOpts := UpdateOptions{
				DryRun:          dryRunFlags.DryRun,
				CreateIfMissing: createIfMissing,
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set, update not persisted")
			}

			fullLogAllocationConfig, err := UpdateLogAllocationConfig(ctx, client, logAllocationConfig, updateOpts)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("LogAllocationConfig is valid and can be updated")
				return nil
			}
			stderr.Printf("LogAllocationConfig applied successfully\n")

			if err := outputFlags.WriteObject(fullLogAllocationConfig, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are allowed. Defaults to false.")
	cmd.Flags().BoolVar(&createIfMissing, "create-if-missing", false, "If set, creates the LogAllocationConfig if it does not already exist. Defaults to false.")

	return cmd
}

func DeleteLogAllocationConfig(
	ctx context.Context,
	client config_v1.ClientService,
) error {
	_, err := client.DeleteLogAllocationConfig(&config_v1.DeleteLogAllocationConfigParams{
		Context: ctx,
	})
	if err != nil {
		return clienterror.Wrap(err)
	}
	return nil
}

func newLogAllocationConfigDeleteCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())

	cmd := &cobra.Command{
		Use:     "delete",
		GroupID: groups.Commands.ID,
		Short:   "Deletes the LogAllocationConfig singleton",
		Args:    cobra.NoArgs,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			res, err := client.DeleteLogAllocationConfig(&config_v1.DeleteLogAllocationConfigParams{
				Context: ctx,
			})
			if err != nil {
				return clienterror.Wrap(err)
			}
			_ = res
			fmt.Fprintf(cmd.OutOrStdout(), "deleted LogAllocationConfig")
			return nil
		},
	}
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	return cmd
}

const LogAllocationConfigScaffoldYAML = `api_version: v1/config
kind: LogAllocationConfig
spec:
    # Defines datasets and budget allocations. Datasets are evaluated in order.
    dataset_allocations:
        - # Slug of the dataset.
          dataset_slug: <string>
          # Configuration for allocating resources to a dataset.
          allocation:
            # Sets the percentage of the license limit to allocate to the default dataset.
            percent_of_license: <number>
          # Defines explicit high and low priority match criteria to specify which logs to
          # drop first (low) and last (high). Anything not matched by either set of rules is
          # considered default priority and is dropped after low priority but before high
          # priority data.
          priorities:
            # A list of search filters defining which logs are considered high priority in
            # this dataset. Filters are combined as OR statements so only one filter needs
            # to match.
            high_priority_filters:
                - # Returns logs that match this query. The query can include only top-level
                  # operations. Nested clauses aren't supported. Only one type of 'AND' or 'OR'
                  # operator is allowed.
                  query: <string>
            # A list of search filters defining which logs are considered low priority in
            # this dataset. Filters are combined as OR statements so only one filter needs
            # to match.
            low_priority_filters:
                - # Returns logs that match this query. The query can include only top-level
                  # operations. Nested clauses aren't supported. Only one type of 'AND' or 'OR'
                  # operator is allowed.
                  query: <string>
    # Configuration for default dataset.
    default_dataset:
        # Configuration for allocating resources to a dataset.
        allocation:
            # Sets the percentage of the license limit to allocate to the default dataset.
            percent_of_license: <number>
        # Defines explicit high and low priority match criteria to specify which logs to
        # drop first (low) and last (high). Anything not matched by either set of rules is
        # considered default priority and is dropped after low priority but before high
        # priority data.
        priorities:
            # A list of search filters defining which logs are considered high priority in
            # this dataset. Filters are combined as OR statements so only one filter needs
            # to match.
            high_priority_filters:
                - # Returns logs that match this query. The query can include only top-level
                  # operations. Nested clauses aren't supported. Only one type of 'AND' or 'OR'
                  # operator is allowed.
                  query: <string>
            # A list of search filters defining which logs are considered low priority in
            # this dataset. Filters are combined as OR statements so only one filter needs
            # to match.
            low_priority_filters:
                - # Returns logs that match this query. The query can include only top-level
                  # operations. Nested clauses aren't supported. Only one type of 'AND' or 'OR'
                  # operator is allowed.
                  query: <string>
`

func newLogAllocationConfigScaffoldCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "scaffold",
		GroupID: groups.Commands.ID,
		Short:   "Scaffolds a complete object with placeholder values",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Fprint(cmd.OutOrStdout(), LogAllocationConfigScaffoldYAML)
		},
	}
	return cmd
}

func NewLogAllocationConfigCmd() *cobra.Command {
	root := &cobra.Command{
		Use:     "log-allocation-config",
		GroupID: groups.Config.ID,
		Short:   "All commands for LogAllocationConfig",
	}

	root.AddGroup(groups.Commands)
	root.AddCommand(
		newLogAllocationConfigCreateCmd(),
		newLogAllocationConfigReadCmd(),
		newLogAllocationConfigUpdateCmd(),
		newLogAllocationConfigDeleteCmd(),
		newLogAllocationConfigScaffoldCmd(),
	)
	return root
}
