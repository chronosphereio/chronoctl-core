// Code generated by chronogen; DO NOT EDIT
package configv1

import (
	"context"
	"fmt"

	"github.com/chronosphereio/chronoctl-core/src/cmd/cli"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/client"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/clienterror"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/dry"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/file"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/groups"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/output"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/pagination"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/ptr"
	config_v1 "github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/client/operations"
	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
	"github.com/chronosphereio/chronoctl-core/src/types"
	"github.com/spf13/cobra"
	flag "github.com/spf13/pflag"
)

func init() { types.MustRegisterObject(ConsumptionBudgetTypeMeta, &ConsumptionBudget{}) }

var _ types.Object = &ConsumptionBudget{}

var ConsumptionBudgetTypeMeta = types.TypeMeta{
	APIVersion: "v1/config",
	Kind:       "ConsumptionBudget",
}

type ConsumptionBudget struct {
	types.TypeMeta `json:",inline"`
	Spec           *models.Configv1ConsumptionBudget `json:"spec"`
}

func NewConsumptionBudget(spec *models.Configv1ConsumptionBudget) *ConsumptionBudget {
	return &ConsumptionBudget{
		TypeMeta: ConsumptionBudgetTypeMeta,
		Spec:     spec,
	}
}

func (e *ConsumptionBudget) Description() string {
	return types.TypeDescription(e, "name", e.Spec.Name, "slug", e.Spec.Slug)
}

func (e *ConsumptionBudget) Identifier() string {
	return e.Spec.Slug
}

func CreateConsumptionBudget(
	ctx context.Context,
	client config_v1.ClientService,
	entity *ConsumptionBudget,
	dryRun bool,
) (*ConsumptionBudget, error) {
	res, err := client.CreateConsumptionBudget(&config_v1.CreateConsumptionBudgetParams{
		Context: ctx,
		Body: &models.Configv1CreateConsumptionBudgetRequest{
			DryRun:            dryRun,
			ConsumptionBudget: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewConsumptionBudget(res.Payload.ConsumptionBudget), nil
}

func newConsumptionBudgetCreateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	var (
		use   string
		short string
	)
	use = "create -f <file>"
	short = "Creates a single ConsumptionBudget."

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			var consumptionBudget *ConsumptionBudget
			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck
			consumptionBudget, err = types.MustDecodeSingleObject[*ConsumptionBudget](file, permissiveParsing)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set")
			}
			fullConsumptionBudget, err := CreateConsumptionBudget(ctx, client, consumptionBudget, dryRunFlags.DryRun)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("ConsumptionBudget is valid and can be created")
				return nil
			}
			stderr.Printf("ConsumptionBudget with slug %q created successfully\n", fullConsumptionBudget.Spec.Slug)

			if err := outputFlags.WriteObject(fullConsumptionBudget, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are not rejected. Defaults to false.")

	return cmd
}

func GetConsumptionBudget(
	ctx context.Context,
	client config_v1.ClientService,
	slug string,
) (*ConsumptionBudget, error) {
	res, err := client.ReadConsumptionBudget(&config_v1.ReadConsumptionBudgetParams{
		Context: ctx,
		Slug:    slug,
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewConsumptionBudget(res.GetPayload().ConsumptionBudget), nil
}

func newConsumptionBudgetReadCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
	var (
		short string
		use   string
		args  cobra.PositionalArgs
	)
	short = "Reads a single ConsumptionBudget by slug"
	use = "read <slug>"
	args = cobra.ExactArgs(1)

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		Args:    args,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}
			entity, err := GetConsumptionBudget(ctx, client, args[0])
			if err != nil {
				return err
			}
			if err := outputFlags.WriteObject(entity, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}

	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)

	return cmd
}

func UpdateConsumptionBudget(
	ctx context.Context,
	client config_v1.ClientService,
	entity *ConsumptionBudget,
	opts UpdateOptions,
) (*ConsumptionBudget, error) {
	res, err := client.UpdateConsumptionBudget(&config_v1.UpdateConsumptionBudgetParams{
		Context: ctx,
		Slug:    entity.Spec.Slug,
		Body: &models.ConfigV1UpdateConsumptionBudgetBody{
			CreateIfMissing:   opts.CreateIfMissing,
			DryRun:            opts.DryRun,
			ConsumptionBudget: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}

	return NewConsumptionBudget(res.Payload.ConsumptionBudget), nil
}

func newConsumptionBudgetUpdateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		createIfMissing   bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	cmd := &cobra.Command{
		Use:     "update -f <filename>",
		GroupID: groups.Commands.ID,
		Short:   "Updates an existing ConsumptionBudget.",
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck

			consumptionBudget, err := types.MustDecodeSingleObject[*ConsumptionBudget](file, permissiveParsing)
			if err != nil {
				return err
			}

			updateOpts := UpdateOptions{
				DryRun:          dryRunFlags.DryRun,
				CreateIfMissing: createIfMissing,
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set, update not persisted")
			}

			fullConsumptionBudget, err := UpdateConsumptionBudget(ctx, client, consumptionBudget, updateOpts)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("ConsumptionBudget is valid and can be updated")
				return nil
			}
			stderr.Printf("ConsumptionBudget with slug %q applied successfully\n", fullConsumptionBudget.Spec.Slug)

			if err := outputFlags.WriteObject(fullConsumptionBudget, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are allowed. Defaults to false.")
	cmd.Flags().BoolVar(&createIfMissing, "create-if-missing", false, "If set, creates the ConsumptionBudget if it does not already exist. Defaults to false.")

	return cmd
}

func DeleteConsumptionBudget(
	ctx context.Context,
	client config_v1.ClientService,
	slug string,
) error {
	_, err := client.DeleteConsumptionBudget(&config_v1.DeleteConsumptionBudgetParams{
		Context: ctx,
		Slug:    slug,
	})
	if err != nil {
		return clienterror.Wrap(err)
	}
	return nil
}

func newConsumptionBudgetDeleteCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())

	cmd := &cobra.Command{
		Use:     "delete <slug>",
		GroupID: groups.Commands.ID,
		Short:   "Deletes a single ConsumptionBudget by slug",
		Args:    cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			res, err := client.DeleteConsumptionBudget(&config_v1.DeleteConsumptionBudgetParams{
				Context: ctx,
				Slug:    args[0],
			})
			if err != nil {
				return clienterror.Wrap(err)
			}
			_ = res
			fmt.Fprintf(cmd.OutOrStdout(), "deleted ConsumptionBudget with slug %q\n", args[0])

			return nil
		},
	}
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	return cmd
}

type ConsumptionBudgetListOpts struct {
	// Limit represents that maximum number of items we wish to return.
	Limit int
	// PageToken is the pagination token we want to start our request at.
	PageToken string
	// PageMaxSize is the maximum page size to use when making List calls.
	PageMaxSize        int
	Names              []string
	PartitionSlugPaths []string
	Resources          []string
	Slugs              []string
}

func (r *ConsumptionBudgetListOpts) registerFlags(flags *flag.FlagSet) {
	var emptyNames []string
	flags.StringSliceVar(&r.Names, "names", emptyNames, "Filters results by name, where any ConsumptionBudget with a matching name in the given list (and matches all other filters) will be returned.")
	var emptyPartitionSlugPaths []string
	flags.StringSliceVar(&r.PartitionSlugPaths, "partition-slug-paths", emptyPartitionSlugPaths, "Filters results by partition_slug_path, where any ConsumptionBudget with a matching partition_slug_path in the given list (and matches all other filters) will be returned.")
	var emptyResources []string
	flags.StringSliceVar(&r.Resources, "resources", emptyResources, "Filters results by resource, where any ConsumptionBudget with a matching resource in the given list (and matches all other filters) will be returned.")
	var emptySlugs []string
	flags.StringSliceVar(&r.Slugs, "slugs", emptySlugs, "Filters results by slug, where any ConsumptionBudget with a matching slug in the given list (and matches all other filters) will be returned.")
	flags.IntVar(&r.Limit, "limit", 0, "maximum number of items to return")
	flags.IntVar(&r.PageMaxSize, "page-max-size", 0, "maximum page size")
	flags.StringVar(&r.PageToken, "page-token", "", "begins listing items at the start of the pagination token")
}

func ListConsumptionBudgets(
	ctx context.Context,
	client config_v1.ClientService,
	streamer output.Streamer[*ConsumptionBudget],
	opts ConsumptionBudgetListOpts,
) (pagination.Token, error) {
	var (
		gotItems    = 0
		nextToken   = opts.PageToken
		pageMaxSize = opts.PageMaxSize
	)

	// Use the limit if it's set, and smaller than a set page size.
	if opts.Limit > 0 && (opts.Limit < pageMaxSize || pageMaxSize == 0) {
		pageMaxSize = opts.Limit
	}

	for {
		res, err := client.ListConsumptionBudgets(&config_v1.ListConsumptionBudgetsParams{
			Context:            ctx,
			PageToken:          &nextToken,
			PageMaxSize:        ptr.Int64(int64(pageMaxSize)),
			Names:              opts.Names,
			PartitionSlugPaths: opts.PartitionSlugPaths,
			Resources:          opts.Resources,
			Slugs:              opts.Slugs,
		})
		if err != nil {
			return pagination.Token(""), clienterror.Wrap(err)
		}

		for _, v := range res.Payload.ConsumptionBudgets {
			if err := streamer(NewConsumptionBudget(v)); err != nil {
				return pagination.Token(""), err
			}
			gotItems++
		}

		nextToken = res.Payload.Page.NextToken
		if nextToken == "" {
			return pagination.Token(""), nil
		}

		if opts.Limit > 0 && gotItems >= opts.Limit {
			return pagination.Token(nextToken), nil
		}

		pageMaxSize = pagination.CalculatePageSize(pagination.Calculation{
			GotItems:    gotItems,
			MaxItems:    opts.Limit,
			MaxPageSize: len(res.Payload.ConsumptionBudgets),
		})
	}
}

func newConsumptionBudgetListCmd() *cobra.Command {
	var listOptions ConsumptionBudgetListOpts
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags()

	cmd := &cobra.Command{
		Use:     "list",
		Short:   "Lists all ConsumptionBudgets and applies optional filters",
		GroupID: groups.Commands.ID,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}

			writer, err := outputFlags.NewWriterManager(cmd.OutOrStdout())
			if err != nil {
				return err
			}
			defer writer.Close()

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			streamer := output.NewWriteObjectStreamer[*ConsumptionBudget](writer)
			nextToken, err := ListConsumptionBudgets(ctx, client, streamer, listOptions)
			if err != nil {
				return err
			}

			if nextToken != "" {
				nextPage := pagination.Result{
					Kind:          pagination.ResultKind,
					Message:       "There are additional consumptionBudgets. To view more, use the next page token or run the full command.",
					NextPageToken: nextToken,
					FullCommand: fmt.Sprintf("%s --page-token %q",
						cli.BuildCommandString(cmd, []string{"page-token"}),
						nextToken),
				}
				if err := outputFlags.WriteObject(nextPage, cmd.OutOrStdout()); err != nil {
					return err
				}
			}

			return nil
		},
	}

	listOptions.registerFlags(cmd.Flags())
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)

	return cmd
}

const ConsumptionBudgetScaffoldYAML = `api_version: v1/config
kind: ConsumptionBudget
spec:
    # The unique identifier of the ConsumptionBudget. If a 'slug' isn't provided, one is generated based on the 'name' field. You can't modify this field after the ConsumptionBudget is created.
    slug: <string>
    # The name of the ConsumptionBudget. You can modify this value after the ConsumptionBudget is created.
    name: <string>
    # Path of the budget's partition, delimited by forward slashes ('/'), in the
    # format 'global/SLUG1/SLUG2', where 'SLUG1' is a top-level partition, and 'SLUG2'
    # is a child partition of 'SLUG1'.

    # A well-formed partition path always starts with the 'global' partition slug, and
    # has no leading or trailing forward slashes.
    partition_slug_path: <string>
    # Optional. Controls the order in which data is dropped when a drop action is
    # applied. For example, a priority of 10 is dropped first, and a priority of 1 is
    # dropped last. Priorities are evaluated in match order, and the first priority to
    # match is applied. All other priorities are ignored. If a request does not match
    # any priority, then it is assigned the 'default_priority'.
    priorities:
        - # Criteria that defines which data matches the 'priority'. Filters are
          # concatenated together as implied 'AND' operators. A request must match every
          # filter to match the 'priority'.
          filters:
            - # Optional. If set, matches data that belongs to the specified dataset. The
              # dataset type must match the budget resource. For example, if 'resource=LOG_PERSISTED_BYTES'
              # then only dataset 'type=LOGS' is allowed. You can't set a value for this
              # field if a value is set for 'log_filter'.
              dataset_slug: <string>
              log_filter:
                # Returns logs that match this query. The query can include only top-level
                # operations. Nested clauses aren't supported. Only one type of 'AND' or 'OR'
                # operator is allowed.
                query: <string>
          # Priority order that determines when to drop data. A priority of '10' is
          # dropped first, and a priority of '1' is dropped last.
          priority: <integer>
    # Optional. Defines which actions to take when a threshold is exceeded.
    thresholds:
        - action: <ALERT_WARN|ALERT_CRITICAL|DROP>
          instant_rate:
            # Value of the fixed rate threshold.
            fixed_value_per_sec: <int64>
          type: <DAILY_VOLUME|INSTANT_RATE|WEEKLY_VOLUME|MONTHLY_VOLUME|HOURLY_VOLUME>
          volume:
            # Value of the volume threshold.
            fixed_value: <int64>
    # Optional. The default priority for requests that don't match any priority in the
    # 'priorities' list. If not set, then 'priority=10' (dropped first) is used as the
    # default.
    default_priority: <integer>
    # Notification policy slug for routing alerts. Required only if 'ALERT_WARN' or
    # 'ALERT_CRITICAL' actions are configured.
    notification_policy_slug: <string>
    alert_action_config:
        # Additional annotations to set on the generated monitor. By default, the
        # monitors already contain "description", "dashboard", "resource",
        # "consumption_budget_slug", "threshold_type", and "partition" annotations.
        # Setting any of these annotations will override its default value.
        annotations:
            key_1: <string>
        # Additional labels to set on the generated monitor, which can be used for
        # notification routing. The following labels are reserved and cannot be
        # override: "resource", "partition", and "threshold_type".
        labels:
            key_1: <string>
        # How long instant rate consumption must sustain above the threshold in
        # order to fire an alert. By default, the sustain is 0: any consumption
        # over the threshold will fire an alert.
        instant_rate_sustain_secs: <integer>
    resource: <LOG_PERSISTED_BYTES|LOG_PROCESSED_BYTES>
`

func newConsumptionBudgetScaffoldCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "scaffold",
		GroupID: groups.Commands.ID,
		Short:   "Scaffolds a complete object with placeholder values",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Fprint(cmd.OutOrStdout(), ConsumptionBudgetScaffoldYAML)
		},
	}
	return cmd
}

func NewConsumptionBudgetCmd() *cobra.Command {
	root := &cobra.Command{
		Use:     "consumption-budgets",
		GroupID: groups.Config.ID,
		Short:   "All commands for ConsumptionBudgets",
	}

	root.AddGroup(groups.Commands)
	root.AddCommand(
		newConsumptionBudgetCreateCmd(),
		newConsumptionBudgetReadCmd(),
		newConsumptionBudgetUpdateCmd(),
		newConsumptionBudgetDeleteCmd(),
		newConsumptionBudgetListCmd(),
		newConsumptionBudgetScaffoldCmd(),
	)
	return root
}
