// Code generated by chronogen; DO NOT EDIT
package configv1

import (
	"context"
	"fmt"

	"github.com/chronosphereio/chronoctl-core/src/cmd/cli"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/client"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/clienterror"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/dry"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/file"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/groups"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/output"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/pagination"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/ptr"
	config_v1 "github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/client/operations"
	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
	"github.com/chronosphereio/chronoctl-core/src/types"
	"github.com/spf13/cobra"
	flag "github.com/spf13/pflag"
)

func init() { types.MustRegisterObject(NotifierTypeMeta, &Notifier{}) }

var _ types.Object = &Notifier{}

var NotifierTypeMeta = types.TypeMeta{
	APIVersion: "v1/config",
	Kind:       "Notifier",
}

type Notifier struct {
	types.TypeMeta `json:",inline"`
	Spec           *models.Configv1Notifier `json:"spec"`
}

func NewNotifier(spec *models.Configv1Notifier) *Notifier {
	return &Notifier{
		TypeMeta: NotifierTypeMeta,
		Spec:     spec,
	}
}

func (e *Notifier) Description() string {
	return types.TypeDescription(e, "name", e.Spec.Name, "slug", e.Spec.Slug)
}

func (e *Notifier) Identifier() string {
	return e.Spec.Slug
}

func CreateNotifier(
	ctx context.Context,
	client config_v1.ClientService,
	entity *Notifier,
	dryRun bool,
) (*Notifier, error) {
	res, err := client.CreateNotifier(&config_v1.CreateNotifierParams{
		Context: ctx,
		Body: &models.Configv1CreateNotifierRequest{
			DryRun:   dryRun,
			Notifier: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewNotifier(res.Payload.Notifier), nil
}

func newNotifierCreateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	var (
		use   string
		short string
	)
	use = "create -f <file>"
	short = "Creates a single Notifier."

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			var notifier *Notifier
			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck
			notifier, err = types.MustDecodeSingleObject[*Notifier](file, permissiveParsing)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set")
			}
			fullNotifier, err := CreateNotifier(ctx, client, notifier, dryRunFlags.DryRun)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("Notifier is valid and can be created")
				return nil
			}
			stderr.Printf("Notifier with slug %q created successfully\n", fullNotifier.Spec.Slug)

			if err := outputFlags.WriteObject(fullNotifier, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are not rejected. Defaults to false.")

	return cmd
}

func GetNotifier(
	ctx context.Context,
	client config_v1.ClientService,
	slug string,
) (*Notifier, error) {
	res, err := client.ReadNotifier(&config_v1.ReadNotifierParams{
		Context: ctx,
		Slug:    slug,
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewNotifier(res.GetPayload().Notifier), nil
}

func newNotifierReadCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
	var (
		short string
		use   string
		args  cobra.PositionalArgs
	)
	short = "Reads a single Notifier by slug"
	use = "read <slug>"
	args = cobra.ExactArgs(1)

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		Args:    args,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}
			entity, err := GetNotifier(ctx, client, args[0])
			if err != nil {
				return err
			}
			if err := outputFlags.WriteObject(entity, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}

	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)

	return cmd
}

func UpdateNotifier(
	ctx context.Context,
	client config_v1.ClientService,
	entity *Notifier,
	opts UpdateOptions,
) (*Notifier, error) {
	res, err := client.UpdateNotifier(&config_v1.UpdateNotifierParams{
		Context: ctx,
		Slug:    entity.Spec.Slug,
		Body: &models.ConfigV1UpdateNotifierBody{
			CreateIfMissing: opts.CreateIfMissing,
			DryRun:          opts.DryRun,
			Notifier:        entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}

	return NewNotifier(res.Payload.Notifier), nil
}

func newNotifierUpdateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		createIfMissing   bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	cmd := &cobra.Command{
		Use:     "update -f <filename>",
		GroupID: groups.Commands.ID,
		Short:   "Updates an existing Notifier.",
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck

			notifier, err := types.MustDecodeSingleObject[*Notifier](file, permissiveParsing)
			if err != nil {
				return err
			}

			updateOpts := UpdateOptions{
				DryRun:          dryRunFlags.DryRun,
				CreateIfMissing: createIfMissing,
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set, update not persisted")
			}

			fullNotifier, err := UpdateNotifier(ctx, client, notifier, updateOpts)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("Notifier is valid and can be updated")
				return nil
			}
			stderr.Printf("Notifier with slug %q applied successfully\n", fullNotifier.Spec.Slug)

			if err := outputFlags.WriteObject(fullNotifier, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are allowed. Defaults to false.")
	cmd.Flags().BoolVar(&createIfMissing, "create-if-missing", false, "If set, creates the Notifier if it does not already exist. Defaults to false.")

	return cmd
}

func DeleteNotifier(
	ctx context.Context,
	client config_v1.ClientService,
	slug string,
) error {
	_, err := client.DeleteNotifier(&config_v1.DeleteNotifierParams{
		Context: ctx,
		Slug:    slug,
	})
	if err != nil {
		return clienterror.Wrap(err)
	}
	return nil
}

func newNotifierDeleteCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())

	cmd := &cobra.Command{
		Use:     "delete <slug>",
		GroupID: groups.Commands.ID,
		Short:   "Deletes a single Notifier by slug",
		Args:    cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			res, err := client.DeleteNotifier(&config_v1.DeleteNotifierParams{
				Context: ctx,
				Slug:    args[0],
			})
			if err != nil {
				return clienterror.Wrap(err)
			}
			_ = res
			fmt.Fprintf(cmd.OutOrStdout(), "deleted Notifier with slug %q\n", args[0])

			return nil
		},
	}
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	return cmd
}

type NotifierListOpts struct {
	// Limit represents that maximum number of items we wish to return.
	Limit int
	// PageToken is the pagination token we want to start our request at.
	PageToken string
	// PageMaxSize is the maximum page size to use when making List calls.
	PageMaxSize int
	Names       []string
	Slugs       []string
}

func (r *NotifierListOpts) registerFlags(flags *flag.FlagSet) {
	var emptyNames []string
	flags.StringSliceVar(&r.Names, "names", emptyNames, "Filters results by name, where any Notifier with a matching name in the given list (and matches all other filters) is returned.")
	var emptySlugs []string
	flags.StringSliceVar(&r.Slugs, "slugs", emptySlugs, "Filters results by slug, where any Notifier with a matching slug in the given list (and matches all other filters) is returned.")
	flags.IntVar(&r.Limit, "limit", 0, "maximum number of items to return")
	flags.IntVar(&r.PageMaxSize, "page-max-size", 0, "maximum page size")
	flags.StringVar(&r.PageToken, "page-token", "", "begins listing items at the start of the pagination token")
}

func ListNotifiers(
	ctx context.Context,
	client config_v1.ClientService,
	streamer output.Streamer[*Notifier],
	opts NotifierListOpts,
) (pagination.Token, error) {
	var (
		gotItems    = 0
		nextToken   = opts.PageToken
		pageMaxSize = opts.PageMaxSize
	)

	// Use the limit if it's set, and smaller than a set page size.
	if opts.Limit > 0 && (opts.Limit < pageMaxSize || pageMaxSize == 0) {
		pageMaxSize = opts.Limit
	}

	for {
		res, err := client.ListNotifiers(&config_v1.ListNotifiersParams{
			Context:     ctx,
			PageToken:   &nextToken,
			PageMaxSize: ptr.Int64(int64(pageMaxSize)),
			Names:       opts.Names,
			Slugs:       opts.Slugs,
		})
		if err != nil {
			return pagination.Token(""), clienterror.Wrap(err)
		}

		for _, v := range res.Payload.Notifiers {
			if err := streamer(NewNotifier(v)); err != nil {
				return pagination.Token(""), err
			}
			gotItems++
		}

		nextToken = res.Payload.Page.NextToken
		if nextToken == "" {
			return pagination.Token(""), nil
		}

		if opts.Limit > 0 && gotItems >= opts.Limit {
			return pagination.Token(nextToken), nil
		}

		pageMaxSize = pagination.CalculatePageSize(pagination.Calculation{
			GotItems:    gotItems,
			MaxItems:    opts.Limit,
			MaxPageSize: len(res.Payload.Notifiers),
		})
	}
}

func newNotifierListCmd() *cobra.Command {
	var listOptions NotifierListOpts
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags()

	cmd := &cobra.Command{
		Use:     "list",
		Short:   "Lists all Notifiers and applies optional filters",
		GroupID: groups.Commands.ID,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}

			writer, err := outputFlags.NewWriterManager(cmd.OutOrStdout())
			if err != nil {
				return err
			}
			defer writer.Close()

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			streamer := output.NewWriteObjectStreamer[*Notifier](writer)
			nextToken, err := ListNotifiers(ctx, client, streamer, listOptions)
			if err != nil {
				return err
			}

			if nextToken != "" {
				nextPage := pagination.Result{
					Kind:          pagination.ResultKind,
					Message:       "There are additional notifiers. To view more, use the next page token or run the full command.",
					NextPageToken: nextToken,
					FullCommand: fmt.Sprintf("%s --page-token %q",
						cli.BuildCommandString(cmd, []string{"page-token"}),
						nextToken),
				}
				if err := outputFlags.WriteObject(nextPage, cmd.OutOrStdout()); err != nil {
					return err
				}
			}

			return nil
		},
	}

	listOptions.registerFlags(cmd.Flags())
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)

	return cmd
}

const NotifierScaffoldYAML = `api_version: v1/config
kind: Notifier
spec:
    # Unique identifier of the Notifier. If slug is not provided, one will be generated based of the name field. Cannot be modified after the Notifier is created.
    slug: <string>
    # Required name of the Notifier. May be modified after the Notifier is created.
    name: <string>
    # If true, do not notify on resolved alerts. Cannot set if discard is set.
    skip_resolved: <true|false>
    # If set, enables the "discard" integration which simply discards all
    # notifications. Cannot set if another integration is set.
    discard: <true|false>
    email:
        # Required email address to send notifications to.
        to: <string>
        # Optional HTML body of the email.
        html: <string>
        # Optional text body of the email.
        text: <string>
    ops_genie:
        # Required OpsGenie API key.
        api_key: <string>
        # Required OpsGenie API URL to send requests to, e.g.
        # "https://api.opsgenie.com/".
        api_url: <string>
        # Alert text.
        message: <string>
        # Description of the alert.
        description: <string>
        # A backlink to the sender of the notification.
        source: <string>
        # A set of arbitrary key/value pairs that provide further detail about the
        # alert.
        details:
            key_1: <string>
        # List of responders responsible for notifications.
        responders:
            - # ID of the responder. Cannot be set if name or username are set.
              id: <string>
              # Name of the responder. Cannot be set if id or username are set.
              name: <string>
              # Username of the responder. Cannot be set if id or name are set.
              username: <string>
              responder_type: <TEAM|USER|ESCALATION|SCHEDULE>
        # Comma separated list of tags attached to the notifications.
        tags: <string>
        # Additional alert note.
        note: <string>
        # Priority level of alert. Possible values are P1, P2, P3, P4, and P5.
        priority: <string>
        http_config:
            # Bearer token authentication. Cannot be set if basic_auth is set.
            bearer_token: <string>
            # Optional proxy URL.
            # DEPRECATED: Custom proxies are unsupported.
            proxy_url: <string>
            basic_auth:
                username: <string>
                password: <string>
            tls_config:
                # Disables validation of the server certificate.
                insecure_skip_verify: <true|false>
    pagerduty:
        # The Pagerduty URL to send API requests to.
        url: <string>
        # Client identification of the notification sender.
        client: <string>
        # A backlink to the sender of the notification.
        client_url: <string>
        # Description of the incident.
        description: <string>
        # Severity of the incident.
        # Valid values are 'critical', 'error', 'warning', 'info', or blank
        severity: <string>
        # The class/type of the event.
        class: <string>
        # The part or component of the affected system which is broken.
        component: <string>
        # A cluster or grouping of services.
        group: <string>
        # Set of arbitrary key/value pairs which provide further detail about the
        # incident.
        details:
            key_1: <string>
        # Images to attach to the incident.
        images:
            - src: <string>
              alt: <string>
              href: <string>
        # Links to attach to the incident.
        links:
            - href: <string>
              text: <string>
        # The PagerDuty integration key (when using PagerDuty integration type
        # "Prometheus"). Cannot be set if routing_key is set.
        service_key: <string>
        # The PagerDuty integration key (when using PagerDuty integration type
        # "Events API v2"). Cannot be set if service_key is set.
        routing_key: <string>
        http_config:
            # Bearer token authentication. Cannot be set if basic_auth is set.
            bearer_token: <string>
            # Optional proxy URL.
            # DEPRECATED: Custom proxies are unsupported.
            proxy_url: <string>
            basic_auth:
                username: <string>
                password: <string>
            tls_config:
                # Disables validation of the server certificate.
                insecure_skip_verify: <true|false>
    slack:
        # Required Slack webhook API URL.
        api_url: <string>
        # The channel to send notifications to.
        channel: <string>
        # The user to send notifications to.
        username: <string>
        color: <string>
        title: <string>
        title_link: <string>
        pretext: <string>
        text: <string>
        footer: <string>
        fallback: <string>
        callback_id: <string>
        icon_emoji: <string>
        icon_url: <string>
        image_url: <string>
        thumb_url: <string>
        short_fields: <true|false>
        link_names: <true|false>
        mrkdwn_in:
            - <string>
        fields:
            - title: <string>
              value: <string>
              short: <true|false>
        actions:
            - type: <string>
              text: <string>
              url: <string>
              style: <string>
              name: <string>
              value: <string>
              confirm_field:
                text: <string>
                title: <string>
                ok_text: <string>
                dismiss_text: <string>
        http_config:
            # Bearer token authentication. Cannot be set if basic_auth is set.
            bearer_token: <string>
            # Optional proxy URL.
            # DEPRECATED: Custom proxies are unsupported.
            proxy_url: <string>
            basic_auth:
                username: <string>
                password: <string>
            tls_config:
                # Disables validation of the server certificate.
                insecure_skip_verify: <true|false>
    victor_ops:
        # Required VictorOps API key.
        api_key: <string>
        # Required VictorOps API URL.
        api_url: <string>
        # Required VictorOps routing key.
        routing_key: <string>
        # Describes the behavior of the alert (CRITICAL, WARNING, INFO).
        message_type: <string>
        # Summary of the alerted problem.
        entity_display_name: <string>
        # Long explanation of the alerted problem.
        state_message: <string>
        # The monitoring tool the state message is from.
        monitoring_tool: <string>
        custom_fields:
            key_1: <string>
        http_config:
            # Bearer token authentication. Cannot be set if basic_auth is set.
            bearer_token: <string>
            # Optional proxy URL.
            # DEPRECATED: Custom proxies are unsupported.
            proxy_url: <string>
            basic_auth:
                username: <string>
                password: <string>
            tls_config:
                # Disables validation of the server certificate.
                insecure_skip_verify: <true|false>
    webhook:
        # Required webhook URL (will be called as a POST request).
        url: <string>
        http_config:
            # Bearer token authentication. Cannot be set if basic_auth is set.
            bearer_token: <string>
            # Optional proxy URL.
            # DEPRECATED: Custom proxies are unsupported.
            proxy_url: <string>
            basic_auth:
                username: <string>
                password: <string>
            tls_config:
                # Disables validation of the server certificate.
                insecure_skip_verify: <true|false>
`

func newNotifierScaffoldCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "scaffold",
		GroupID: groups.Commands.ID,
		Short:   "Scaffolds a complete object with placeholder values",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Fprint(cmd.OutOrStdout(), NotifierScaffoldYAML)
		},
	}
	return cmd
}

func NewNotifierCmd() *cobra.Command {
	root := &cobra.Command{
		Use:     "notifiers",
		GroupID: groups.Config.ID,
		Short:   "All commands for Notifiers",
	}

	root.AddGroup(groups.Commands)
	root.AddCommand(
		newNotifierCreateCmd(),
		newNotifierReadCmd(),
		newNotifierUpdateCmd(),
		newNotifierDeleteCmd(),
		newNotifierListCmd(),
		newNotifierScaffoldCmd(),
	)
	return root
}
