// Code generated by chronogen; DO NOT EDIT
package configv1

import (
	"context"
	"fmt"

	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/client"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/clienterror"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/dry"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/file"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/groups"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/output"
	config_v1 "github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/client/operations"
	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
	"github.com/chronosphereio/chronoctl-core/src/types"
	"github.com/spf13/cobra"
)

func init() { types.MustRegisterObject(LogIngestConfigTypeMeta, &LogIngestConfig{}) }

var _ types.Object = &LogIngestConfig{}

var LogIngestConfigTypeMeta = types.TypeMeta{
	APIVersion: "v1/config",
	Kind:       "LogIngestConfig",
}

type LogIngestConfig struct {
	types.TypeMeta `json:",inline"`
	Spec           *models.Configv1LogIngestConfig `json:"spec"`
}

func NewLogIngestConfig(spec *models.Configv1LogIngestConfig) *LogIngestConfig {
	return &LogIngestConfig{
		TypeMeta: LogIngestConfigTypeMeta,
		Spec:     spec,
	}
}

func (e *LogIngestConfig) Description() string {
	return types.TypeDescription(e)
}

func (e *LogIngestConfig) Identifier() string {
	return "LogIngestConfig"
}

func CreateLogIngestConfig(
	ctx context.Context,
	client config_v1.ClientService,
	entity *LogIngestConfig,
	dryRun bool,
) (*LogIngestConfig, error) {
	res, err := client.CreateLogIngestConfig(&config_v1.CreateLogIngestConfigParams{
		Context: ctx,
		Body: &models.Configv1CreateLogIngestConfigRequest{
			DryRun:          dryRun,
			LogIngestConfig: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewLogIngestConfig(res.Payload.LogIngestConfig), nil
}

func newLogIngestConfigCreateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	var (
		use   string
		short string
	)
	use = "create -f <file>"
	short = "Creates a single LogIngestConfig."

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			var logIngestConfig *LogIngestConfig
			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck
			logIngestConfig, err = types.MustDecodeSingleObject[*LogIngestConfig](file, permissiveParsing)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set")
			}
			fullLogIngestConfig, err := CreateLogIngestConfig(ctx, client, logIngestConfig, dryRunFlags.DryRun)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("LogIngestConfig is valid and can be created")
				return nil
			}
			stderr.Printf("LogIngestConfig created successfully\n")

			if err := outputFlags.WriteObject(fullLogIngestConfig, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are not rejected. Defaults to false.")

	return cmd
}

func GetLogIngestConfig(
	ctx context.Context,
	client config_v1.ClientService,
) (*LogIngestConfig, error) {
	res, err := client.ReadLogIngestConfig(&config_v1.ReadLogIngestConfigParams{
		Context: ctx,
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewLogIngestConfig(res.GetPayload().LogIngestConfig), nil
}

func newLogIngestConfigReadCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
	var (
		short string
		use   string
		args  cobra.PositionalArgs
	)
	short = "Reads a LogIngestConfig singleton"
	use = "read"

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		Args:    args,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}
			entity, err := GetLogIngestConfig(ctx, client)
			if err != nil {
				return err
			}
			if err := outputFlags.WriteObject(entity, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}

	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)

	return cmd
}

func UpdateLogIngestConfig(
	ctx context.Context,
	client config_v1.ClientService,
	entity *LogIngestConfig,
	opts UpdateOptions,
) (*LogIngestConfig, error) {
	res, err := client.UpdateLogIngestConfig(&config_v1.UpdateLogIngestConfigParams{
		Context: ctx,
		Body: &models.Configv1UpdateLogIngestConfigRequest{
			CreateIfMissing: opts.CreateIfMissing,
			DryRun:          opts.DryRun,
			LogIngestConfig: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}

	return NewLogIngestConfig(res.Payload.LogIngestConfig), nil
}

func newLogIngestConfigUpdateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		createIfMissing   bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	cmd := &cobra.Command{
		Use:     "update -f <filename>",
		GroupID: groups.Commands.ID,
		Short:   "Updates an existing LogIngestConfig.",
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck

			logIngestConfig, err := types.MustDecodeSingleObject[*LogIngestConfig](file, permissiveParsing)
			if err != nil {
				return err
			}

			updateOpts := UpdateOptions{
				DryRun:          dryRunFlags.DryRun,
				CreateIfMissing: createIfMissing,
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set, update not persisted")
			}

			fullLogIngestConfig, err := UpdateLogIngestConfig(ctx, client, logIngestConfig, updateOpts)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("LogIngestConfig is valid and can be updated")
				return nil
			}
			stderr.Printf("LogIngestConfig applied successfully\n")

			if err := outputFlags.WriteObject(fullLogIngestConfig, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are allowed. Defaults to false.")
	cmd.Flags().BoolVar(&createIfMissing, "create-if-missing", false, "If set, creates the LogIngestConfig if it does not already exist. Defaults to false.")

	return cmd
}

func DeleteLogIngestConfig(
	ctx context.Context,
	client config_v1.ClientService,
) error {
	_, err := client.DeleteLogIngestConfig(&config_v1.DeleteLogIngestConfigParams{
		Context: ctx,
	})
	if err != nil {
		return clienterror.Wrap(err)
	}
	return nil
}

func newLogIngestConfigDeleteCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())

	cmd := &cobra.Command{
		Use:     "delete",
		GroupID: groups.Commands.ID,
		Short:   "Deletes the LogIngestConfig singleton",
		Args:    cobra.NoArgs,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			res, err := client.DeleteLogIngestConfig(&config_v1.DeleteLogIngestConfigParams{
				Context: ctx,
			})
			if err != nil {
				return clienterror.Wrap(err)
			}
			_ = res
			fmt.Fprintf(cmd.OutOrStdout(), "deleted LogIngestConfig")
			return nil
		},
	}
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	return cmd
}

const LogIngestConfigScaffoldYAML = `api_version: v1/config
kind: LogIngestConfig
spec:
    # The parsers to apply to plaintext logs. The first parser that matches the log is used.
    plaintext_parsers:
        - # The name of the parser. Must be unique within the configuration.
          name: <string>
          # If 'true', the original log is retained after parsing and stored in the
          # key 'plaintext_log'. If 'false', the original log is dropped after parsing.
          # Default value: 'false'.
          keep_original: <true|false>
          mode: <ENABLED|DISABLED>
          parser:
            # A parser to extract key/value pairs from a string.
            # If duplicate keys are found, the first instance is used.
            key_value_parser:
                # The string for splitting each pair into its key and value.
                pair_separator: <string>
                # The string for splitting the input into key/value pairs.
                delimiter: <string>
                # Specifies the code points of any Unicode characters to trim from the
                # beginning and end of keys and values.
                trim_set: <string>
            parser_type: <JSON|REGEX|KEY_VALUE>
            regex_parser:
                # The regular expression parser pattern to apply. Must use RE2 syntax.
                # Named capturing groups become named fields in the extracted log.
                regex: <string>
    # The parsers to apply to specific fields within structured logs or plaintext logs after those logs are parsed.
    field_parsers:
        - destination:
            # The LogQL selector to indicate the field path. Use 'parent[child]' syntax to
            # indicate nesting.
            selector: <string>
          mode: <ENABLED|DISABLED>
          parser:
            # A parser to extract key/value pairs from a string.
            # If duplicate keys are found, the first instance is used.
            key_value_parser:
                # The string for splitting each pair into its key and value.
                pair_separator: <string>
                # The string for splitting the input into key/value pairs.
                delimiter: <string>
                # Specifies the code points of any Unicode characters to trim from the
                # beginning and end of keys and values.
                trim_set: <string>
            parser_type: <JSON|REGEX|KEY_VALUE>
            regex_parser:
                # The regular expression parser pattern to apply. Must use RE2 syntax.
                # Named capturing groups become named fields in the extracted log.
                regex: <string>
          source:
            # The LogQL selector to indicate the field path. Use 'parent[child]' syntax to
            # indicate nesting.
            selector: <string>
    # FieldNormalization allows you to map and normalize well-known fields from your logs.
    # These mappings run after parsing to standardize common fields like timestamp,
    # severity level, primary key name, and message across different log formats.
    field_normalization:
        # Maps additional custom fields from your logs. These will not be indexed.
        # Use these for any other fields you want to normalize, such as environment, region, or user ID.
        custom_field_normalization:
            - # The name of the target field where the normalized value will be stored.
              target: <string>
              # StringNormalization defines how to extract and transform string values from log fields.
              normalization:
                # List of field paths to check for values, in priority order.
                # The first non-empty value found will be used.
                source:
                    - # The LogQL selector to indicate the field path. Use 'parent[child]' syntax to
                      # indicate nesting.
                      selector: <string>
                # Default value to use when no source fields contain values.
                default_value: <string>
                # Optional mapping to normalize values.
                # For example: {"warn": "WARNING", "err": "ERROR"} to standardize severity levels.
                value_map:
                    key_1: <string>
                # Optional regex patterns to extract and sanitize values.
                # Each pattern must have exactly one capturing group that will be used as the result.
                # For example: "^.*level=([A-Z]+).*$" to extract log level from a string.
                sanitize_patterns:
                    - <string>
        # StringNormalization defines how to extract and transform string values from log fields.
        message:
            # List of field paths to check for values, in priority order.
            # The first non-empty value found will be used.
            source:
                - # The LogQL selector to indicate the field path. Use 'parent[child]' syntax to
                  # indicate nesting.
                  selector: <string>
            # Default value to use when no source fields contain values.
            default_value: <string>
            # Optional mapping to normalize values.
            # For example: {"warn": "WARNING", "err": "ERROR"} to standardize severity levels.
            value_map:
                key_1: <string>
            # Optional regex patterns to extract and sanitize values.
            # Each pattern must have exactly one capturing group that will be used as the result.
            # For example: "^.*level=([A-Z]+).*$" to extract log level from a string.
            sanitize_patterns:
                - <string>
        # NamedStringNormalization maps a field to a named target with optional transformations.
        primary_key:
            # The name of the target field where the normalized value will be stored.
            target: <string>
            # StringNormalization defines how to extract and transform string values from log fields.
            normalization:
                # List of field paths to check for values, in priority order.
                # The first non-empty value found will be used.
                source:
                    - # The LogQL selector to indicate the field path. Use 'parent[child]' syntax to
                      # indicate nesting.
                      selector: <string>
                # Default value to use when no source fields contain values.
                default_value: <string>
                # Optional mapping to normalize values.
                # For example: {"warn": "WARNING", "err": "ERROR"} to standardize severity levels.
                value_map:
                    key_1: <string>
                # Optional regex patterns to extract and sanitize values.
                # Each pattern must have exactly one capturing group that will be used as the result.
                # For example: "^.*level=([A-Z]+).*$" to extract log level from a string.
                sanitize_patterns:
                    - <string>
        # StringNormalization defines how to extract and transform string values from log fields.
        severity:
            # List of field paths to check for values, in priority order.
            # The first non-empty value found will be used.
            source:
                - # The LogQL selector to indicate the field path. Use 'parent[child]' syntax to
                  # indicate nesting.
                  selector: <string>
            # Default value to use when no source fields contain values.
            default_value: <string>
            # Optional mapping to normalize values.
            # For example: {"warn": "WARNING", "err": "ERROR"} to standardize severity levels.
            value_map:
                key_1: <string>
            # Optional regex patterns to extract and sanitize values.
            # Each pattern must have exactly one capturing group that will be used as the result.
            # For example: "^.*level=([A-Z]+).*$" to extract log level from a string.
            sanitize_patterns:
                - <string>
        # TimestampNormalization specifies which fields to check for timestamp values.
        timestamp:
            # List of field paths to check for timestamp values, in priority order.
            # Common fields include "timestamp", "@timestamp", "time", "datetime".
            source:
                - # The LogQL selector to indicate the field path. Use 'parent[child]' syntax to
                  # indicate nesting.
                  selector: <string>
`

func newLogIngestConfigScaffoldCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "scaffold",
		GroupID: groups.Commands.ID,
		Short:   "Scaffolds a complete object with placeholder values",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Fprint(cmd.OutOrStdout(), LogIngestConfigScaffoldYAML)
		},
	}
	return cmd
}

func NewLogIngestConfigCmd() *cobra.Command {
	root := &cobra.Command{
		Use:     "log-ingest-config",
		GroupID: groups.Config.ID,
		Short:   "All commands for LogIngestConfig",
	}

	root.AddGroup(groups.Commands)
	root.AddCommand(
		newLogIngestConfigCreateCmd(),
		newLogIngestConfigReadCmd(),
		newLogIngestConfigUpdateCmd(),
		newLogIngestConfigDeleteCmd(),
		newLogIngestConfigScaffoldCmd(),
	)
	return root
}
