// Code generated by chronogen; DO NOT EDIT
package configv1

import (
	"context"
	"fmt"

	"github.com/chronosphereio/chronoctl-core/src/cmd/cli"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/client"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/clienterror"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/dry"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/file"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/groups"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/output"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/pagination"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/ptr"
	config_v1 "github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/client/operations"
	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
	"github.com/chronosphereio/chronoctl-core/src/types"
	"github.com/spf13/cobra"
	flag "github.com/spf13/pflag"
)

func init() { types.MustRegisterObject(DerivedMetricTypeMeta, &DerivedMetric{}) }

var _ types.Object = &DerivedMetric{}

var DerivedMetricTypeMeta = types.TypeMeta{
	APIVersion: "v1/config",
	Kind:       "DerivedMetric",
}

type DerivedMetric struct {
	types.TypeMeta `json:",inline"`
	Spec           *models.Configv1DerivedMetric `json:"spec"`
}

func NewDerivedMetric(spec *models.Configv1DerivedMetric) *DerivedMetric {
	return &DerivedMetric{
		TypeMeta: DerivedMetricTypeMeta,
		Spec:     spec,
	}
}

func (e *DerivedMetric) Description() string {
	return types.TypeDescription(e, "name", e.Spec.Name, "slug", e.Spec.Slug)
}

func (e *DerivedMetric) Identifier() string {
	return e.Spec.Slug
}

func CreateDerivedMetric(
	ctx context.Context,
	client config_v1.ClientService,
	entity *DerivedMetric,
	dryRun bool,
) (*DerivedMetric, error) {
	res, err := client.CreateDerivedMetric(&config_v1.CreateDerivedMetricParams{
		Context: ctx,
		Body: &models.Configv1CreateDerivedMetricRequest{
			DryRun:        dryRun,
			DerivedMetric: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewDerivedMetric(res.Payload.DerivedMetric), nil
}

func newDerivedMetricCreateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	var (
		use   string
		short string
	)
	use = "create -f <file>"
	short = "Creates a single DerivedMetric."

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			var derivedMetric *DerivedMetric
			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck
			derivedMetric, err = types.MustDecodeSingleObject[*DerivedMetric](file, permissiveParsing)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set")
			}
			fullDerivedMetric, err := CreateDerivedMetric(ctx, client, derivedMetric, dryRunFlags.DryRun)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("DerivedMetric is valid and can be created")
				return nil
			}
			stderr.Printf("DerivedMetric with slug %q created successfully\n", fullDerivedMetric.Spec.Slug)

			if err := outputFlags.WriteObject(fullDerivedMetric, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are not rejected. Defaults to false.")

	return cmd
}

func GetDerivedMetric(
	ctx context.Context,
	client config_v1.ClientService,
	slug string,
) (*DerivedMetric, error) {
	res, err := client.ReadDerivedMetric(&config_v1.ReadDerivedMetricParams{
		Context: ctx,
		Slug:    slug,
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewDerivedMetric(res.GetPayload().DerivedMetric), nil
}

func newDerivedMetricReadCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
	var (
		short string
		use   string
		args  cobra.PositionalArgs
	)
	short = "Reads a single DerivedMetric by slug"
	use = "read <slug>"
	args = cobra.ExactArgs(1)

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		Args:    args,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}
			entity, err := GetDerivedMetric(ctx, client, args[0])
			if err != nil {
				return err
			}
			if err := outputFlags.WriteObject(entity, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}

	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)

	return cmd
}

func UpdateDerivedMetric(
	ctx context.Context,
	client config_v1.ClientService,
	entity *DerivedMetric,
	opts UpdateOptions,
) (*DerivedMetric, error) {
	res, err := client.UpdateDerivedMetric(&config_v1.UpdateDerivedMetricParams{
		Context: ctx,
		Slug:    entity.Spec.Slug,
		Body: config_v1.UpdateDerivedMetricBody{
			CreateIfMissing: opts.CreateIfMissing,
			DryRun:          opts.DryRun,
			DerivedMetric:   entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}

	return NewDerivedMetric(res.Payload.DerivedMetric), nil
}

func newDerivedMetricUpdateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		createIfMissing   bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	cmd := &cobra.Command{
		Use:     "update -f <filename>",
		GroupID: groups.Commands.ID,
		Short:   "Updates an existing DerivedMetric.",
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck

			derivedMetric, err := types.MustDecodeSingleObject[*DerivedMetric](file, permissiveParsing)
			if err != nil {
				return err
			}

			updateOpts := UpdateOptions{
				DryRun:          dryRunFlags.DryRun,
				CreateIfMissing: createIfMissing,
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set, update not persisted")
			}

			fullDerivedMetric, err := UpdateDerivedMetric(ctx, client, derivedMetric, updateOpts)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("DerivedMetric is valid and can be updated")
				return nil
			}
			stderr.Printf("DerivedMetric with slug %q applied successfully\n", fullDerivedMetric.Spec.Slug)

			if err := outputFlags.WriteObject(fullDerivedMetric, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are allowed. Defaults to false.")
	cmd.Flags().BoolVar(&createIfMissing, "create-if-missing", false, "If set, creates the DerivedMetric if it does not already exist. Defaults to false.")

	return cmd
}

func DeleteDerivedMetric(
	ctx context.Context,
	client config_v1.ClientService,
	slug string,
) error {
	_, err := client.DeleteDerivedMetric(&config_v1.DeleteDerivedMetricParams{
		Context: ctx,
		Slug:    slug,
	})
	if err != nil {
		return clienterror.Wrap(err)
	}
	return nil
}

func newDerivedMetricDeleteCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())

	cmd := &cobra.Command{
		Use:     "delete <slug>",
		GroupID: groups.Commands.ID,
		Short:   "Deletes a single DerivedMetric by slug",
		Args:    cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			res, err := client.DeleteDerivedMetric(&config_v1.DeleteDerivedMetricParams{
				Context: ctx,
				Slug:    args[0],
			})
			if err != nil {
				return clienterror.Wrap(err)
			}
			_ = res
			fmt.Fprintf(cmd.OutOrStdout(), "deleted DerivedMetric with slug %q\n", args[0])

			return nil
		},
	}
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	return cmd
}

type DerivedMetricListOpts struct {
	// Limit represents that maximum number of items we wish to return.
	Limit int
	// PageToken is the pagination token we want to start our request at.
	PageToken string
	// PageMaxSize is the maximum page size to use when making List calls.
	PageMaxSize int
	Names       []string
	Slugs       []string
}

func (r *DerivedMetricListOpts) registerFlags(flags *flag.FlagSet) {
	var emptyNames []string
	flags.StringSliceVar(&r.Names, "names", emptyNames, "Filters results by name, where any DerivedMetric with a matching name in the given list (and matches all other filters) is returned.")
	var emptySlugs []string
	flags.StringSliceVar(&r.Slugs, "slugs", emptySlugs, "Filters results by slug, where any DerivedMetric with a matching slug in the given list (and matches all other filters) is returned.")
	flags.IntVar(&r.Limit, "limit", 0, "maximum number of items to return")
	flags.IntVar(&r.PageMaxSize, "page-max-size", 0, "maximum page size")
	flags.StringVar(&r.PageToken, "page-token", "", "begins listing items at the start of the pagination token")
}

func ListDerivedMetrics(
	ctx context.Context,
	client config_v1.ClientService,
	streamer output.Streamer[*DerivedMetric],
	opts DerivedMetricListOpts,
) (pagination.Token, error) {
	var (
		gotItems    = 0
		nextToken   = opts.PageToken
		pageMaxSize = opts.PageMaxSize
	)

	// Use the limit if it's set, and smaller than a set page size.
	if opts.Limit > 0 && (opts.Limit < pageMaxSize || pageMaxSize == 0) {
		pageMaxSize = opts.Limit
	}

	for {
		res, err := client.ListDerivedMetrics(&config_v1.ListDerivedMetricsParams{
			Context:     ctx,
			PageToken:   &nextToken,
			PageMaxSize: ptr.Int64(int64(pageMaxSize)),
			Names:       opts.Names,
			Slugs:       opts.Slugs,
		})
		if err != nil {
			return pagination.Token(""), clienterror.Wrap(err)
		}

		for _, v := range res.Payload.DerivedMetrics {
			if err := streamer(NewDerivedMetric(v)); err != nil {
				return pagination.Token(""), err
			}
			gotItems++
		}

		nextToken = res.Payload.Page.NextToken
		if nextToken == "" {
			return pagination.Token(""), nil
		}

		if opts.Limit > 0 && gotItems >= opts.Limit {
			return pagination.Token(nextToken), nil
		}

		pageMaxSize = pagination.CalculatePageSize(pagination.Calculation{
			GotItems:    gotItems,
			MaxItems:    opts.Limit,
			MaxPageSize: len(res.Payload.DerivedMetrics),
		})
	}
}

func newDerivedMetricListCmd() *cobra.Command {
	var listOptions DerivedMetricListOpts
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags()

	cmd := &cobra.Command{
		Use:     "list",
		Short:   "Lists all DerivedMetrics and applies optional filters",
		GroupID: groups.Commands.ID,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}

			writer, err := outputFlags.NewWriterManager(cmd.OutOrStdout())
			if err != nil {
				return err
			}
			defer writer.Close()

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			streamer := output.NewWriteObjectStreamer[*DerivedMetric](writer)
			nextToken, err := ListDerivedMetrics(ctx, client, streamer, listOptions)
			if err != nil {
				return err
			}

			if nextToken != "" {
				nextPage := pagination.Result{
					Kind:          pagination.ResultKind,
					Message:       "There are additional derivedMetrics. To view more, use the next page token or run the full command.",
					NextPageToken: nextToken,
					FullCommand: fmt.Sprintf("%s --page-token %q",
						cli.BuildCommandString(cmd, []string{"page-token"}),
						nextToken),
				}
				if err := outputFlags.WriteObject(nextPage, cmd.OutOrStdout()); err != nil {
					return err
				}
			}

			return nil
		},
	}

	listOptions.registerFlags(cmd.Flags())
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)

	return cmd
}

const DerivedMetricScaffoldYAML = `api_version: v1/config
kind: DerivedMetric
spec:
    # Required name of the DerivedMetric. May be modified after the DerivedMetric is created.
    name: <string>
    # Unique identifier of the DerivedMetric. If slug is not provided, one will be generated based of the name field. Cannot be modified after the DerivedMetric is created.
    slug: <string>
    # Required metric name of the derived metric, which must be unique across the system.
    metric_name: <string>
    # Optional description of the derived metric.
    description: <string>
    # Required queries that the derived metric can map to.
    queries:
        - query:
            # Required PromQL expression which the derived metric executes. Should
            # include all configured variables.
            prometheus_expr: <string>
            # Optional variables which may be used in the derived metric as label
            # selectors.
            variables:
                - # Required name of the variable.
                  name: <string>
                  # Required PromQL label selector which must match the given variable name.
                  # If the variable is not specified in the derived metric usage, then this
                  # default selector is used.
                  default_prometheus_selector: <string>
          selector:
            # Labels which must match in the derived metric usage for the selector to
            # match.
            labels:
                - # name always matches against an exact label name.
                  name: <string>
                  # value matches against a label value based on the configured type.
                  value: <string>
                  type: <EXACT>
`

func newDerivedMetricScaffoldCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "scaffold",
		GroupID: groups.Commands.ID,
		Short:   "Scaffolds a complete object with placeholder values",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Fprint(cmd.OutOrStdout(), DerivedMetricScaffoldYAML)
		},
	}
	return cmd
}

func NewDerivedMetricCmd() *cobra.Command {
	root := &cobra.Command{
		Use:     "derived-metrics",
		GroupID: groups.Config.ID,
		Short:   "All commands for DerivedMetrics",
	}

	root.AddGroup(groups.Commands)
	root.AddCommand(
		newDerivedMetricCreateCmd(),
		newDerivedMetricReadCmd(),
		newDerivedMetricUpdateCmd(),
		newDerivedMetricDeleteCmd(),
		newDerivedMetricListCmd(),
		newDerivedMetricScaffoldCmd(),
	)
	return root
}
