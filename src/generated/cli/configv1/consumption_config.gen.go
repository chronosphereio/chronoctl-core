// Code generated by chronogen; DO NOT EDIT
package configv1

import (
	"context"
	"fmt"

	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/client"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/clienterror"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/dry"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/file"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/groups"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/output"
	config_v1 "github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/client/operations"
	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/configv1/models"
	"github.com/chronosphereio/chronoctl-core/src/types"
	"github.com/spf13/cobra"
)

func init() { types.MustRegisterObject(ConsumptionConfigTypeMeta, &ConsumptionConfig{}) }

var _ types.Object = &ConsumptionConfig{}

var ConsumptionConfigTypeMeta = types.TypeMeta{
	APIVersion: "v1/config",
	Kind:       "ConsumptionConfig",
}

type ConsumptionConfig struct {
	types.TypeMeta `json:",inline"`
	Spec           *models.Configv1ConsumptionConfig `json:"spec"`
}

func NewConsumptionConfig(spec *models.Configv1ConsumptionConfig) *ConsumptionConfig {
	return &ConsumptionConfig{
		TypeMeta: ConsumptionConfigTypeMeta,
		Spec:     spec,
	}
}

func (e *ConsumptionConfig) Description() string {
	return types.TypeDescription(e)
}

func (e *ConsumptionConfig) Identifier() string {
	return "ConsumptionConfig"
}

func CreateConsumptionConfig(
	ctx context.Context,
	client config_v1.ClientService,
	entity *ConsumptionConfig,
	dryRun bool,
) (*ConsumptionConfig, error) {
	res, err := client.CreateConsumptionConfig(&config_v1.CreateConsumptionConfigParams{
		Context: ctx,
		Body: &models.Configv1CreateConsumptionConfigRequest{
			DryRun:            dryRun,
			ConsumptionConfig: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewConsumptionConfig(res.Payload.ConsumptionConfig), nil
}

func newConsumptionConfigCreateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	var (
		use   string
		short string
	)
	use = "create -f <file>"
	short = "Creates a single ConsumptionConfig."

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			var consumptionConfig *ConsumptionConfig
			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck
			consumptionConfig, err = types.MustDecodeSingleObject[*ConsumptionConfig](file, permissiveParsing)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set")
			}
			fullConsumptionConfig, err := CreateConsumptionConfig(ctx, client, consumptionConfig, dryRunFlags.DryRun)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("ConsumptionConfig is valid and can be created")
				return nil
			}
			stderr.Printf("ConsumptionConfig created successfully\n")

			if err := outputFlags.WriteObject(fullConsumptionConfig, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are not rejected. Defaults to false.")

	return cmd
}

func GetConsumptionConfig(
	ctx context.Context,
	client config_v1.ClientService,
) (*ConsumptionConfig, error) {
	res, err := client.ReadConsumptionConfig(&config_v1.ReadConsumptionConfigParams{
		Context: ctx,
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}
	return NewConsumptionConfig(res.GetPayload().ConsumptionConfig), nil
}

func newConsumptionConfigReadCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
	var (
		short string
		use   string
		args  cobra.PositionalArgs
	)
	short = "Reads a ConsumptionConfig singleton"
	use = "read"

	cmd := &cobra.Command{
		Use:     use,
		GroupID: groups.Commands.ID,
		Short:   short,
		Args:    args,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}
			entity, err := GetConsumptionConfig(ctx, client)
			if err != nil {
				return err
			}
			if err := outputFlags.WriteObject(entity, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}

	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)

	return cmd
}

func UpdateConsumptionConfig(
	ctx context.Context,
	client config_v1.ClientService,
	entity *ConsumptionConfig,
	opts UpdateOptions,
) (*ConsumptionConfig, error) {
	res, err := client.UpdateConsumptionConfig(&config_v1.UpdateConsumptionConfigParams{
		Context: ctx,
		Body: &models.Configv1UpdateConsumptionConfigRequest{
			CreateIfMissing:   opts.CreateIfMissing,
			DryRun:            opts.DryRun,
			ConsumptionConfig: entity.Spec,
		},
	})
	if err != nil {
		return nil, clienterror.Wrap(err)
	}

	return NewConsumptionConfig(res.Payload.ConsumptionConfig), nil
}

func newConsumptionConfigUpdateCmd() *cobra.Command {
	var (
		permissiveParsing bool
		createIfMissing   bool
		dryRunFlags       = dry.NewFlags()
		clientFlags       = client.NewClientFlags()
		outputFlags       = output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())
		fileFlags         = file.NewFlags(true /* required */)
	)

	cmd := &cobra.Command{
		Use:     "update -f <filename>",
		GroupID: groups.Commands.ID,
		Short:   "Updates an existing ConsumptionConfig.",
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())
			stderr := output.NewStderrPrinter(cmd)

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			file, err := fileFlags.File()
			if err != nil {
				return err
			}
			defer file.Close() //nolint:errcheck

			consumptionConfig, err := types.MustDecodeSingleObject[*ConsumptionConfig](file, permissiveParsing)
			if err != nil {
				return err
			}

			updateOpts := UpdateOptions{
				DryRun:          dryRunFlags.DryRun,
				CreateIfMissing: createIfMissing,
			}

			if dryRunFlags.DryRun {
				stderr.Println("--dry-run is set, update not persisted")
			}

			fullConsumptionConfig, err := UpdateConsumptionConfig(ctx, client, consumptionConfig, updateOpts)
			if err != nil {
				return err
			}

			if dryRunFlags.DryRun {
				stderr.Println("ConsumptionConfig is valid and can be updated")
				return nil
			}
			stderr.Printf("ConsumptionConfig applied successfully\n")

			if err := outputFlags.WriteObject(fullConsumptionConfig, cmd.OutOrStdout()); err != nil {
				return err
			}
			return nil
		},
	}
	dryRunFlags.AddFlags(cmd)
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	fileFlags.AddFlags(cmd)
	cmd.Flags().BoolVar(&permissiveParsing, "no-strict", false, "If set, manifests with unknown fields are allowed. Defaults to false.")
	cmd.Flags().BoolVar(&createIfMissing, "create-if-missing", false, "If set, creates the ConsumptionConfig if it does not already exist. Defaults to false.")

	return cmd
}

func DeleteConsumptionConfig(
	ctx context.Context,
	client config_v1.ClientService,
) error {
	_, err := client.DeleteConsumptionConfig(&config_v1.DeleteConsumptionConfigParams{
		Context: ctx,
	})
	if err != nil {
		return clienterror.Wrap(err)
	}
	return nil
}

func newConsumptionConfigDeleteCmd() *cobra.Command {
	clientFlags := client.NewClientFlags()
	outputFlags := output.NewFlags(output.WithoutOutputDirectory(), output.WithoutCreateFilePerObject())

	cmd := &cobra.Command{
		Use:     "delete",
		GroupID: groups.Commands.ID,
		Short:   "Deletes the ConsumptionConfig singleton",
		Args:    cobra.NoArgs,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, cancel := context.WithTimeout(cmd.Context(), clientFlags.Timeout())
			defer cancel()
			if err := outputFlags.Validate(); err != nil {
				return err
			}
			defer outputFlags.Close(cmd.OutOrStdout())

			client, err := clientFlags.ConfigV1Client()
			if err != nil {
				return err
			}

			res, err := client.DeleteConsumptionConfig(&config_v1.DeleteConsumptionConfigParams{
				Context: ctx,
			})
			if err != nil {
				return clienterror.Wrap(err)
			}
			_ = res
			fmt.Fprintf(cmd.OutOrStdout(), "deleted ConsumptionConfig")
			return nil
		},
	}
	clientFlags.AddFlags(cmd)
	outputFlags.AddFlags(cmd)
	return cmd
}

const ConsumptionConfigScaffoldYAML = `api_version: v1/config
kind: ConsumptionConfig
spec:
    # partitions define non-overlapping groupings of telemetry. Partitions are
    # defined in order of precedence, where incoming requests are allocated to
    # the first partition that matches. Requests that don't match any
    # partition fall back to an omnipresent default partition.
    partitions:
        - # name is a human-readable name of the partition. Must be unique within the
          # parent partition. You can modify this value after the partition is created.
          name: <string>
          # filters define what data matches the partition. The filters are AND'd
          # together; a request must match every filter in order to match the
          # partition. Must not be empty.
          filters:
            - # conditions are the conditions to match.
              conditions:
                - # If set, matches data which belongs to the given dataset. Cannot set if
                  # log_filter is set.
                  dataset_slug: <string>
                  log_filter:
                    # Returns logs that match this query. The query can include only top-level
                    # operations. Nested clauses aren't supported. Only one type of 'AND' or 'OR'
                    # operator is allowed.
                    query: <string>
              operator: <IN|NOT_IN>
          # partitions are the optional child partitions of this partition. If set,
          # requests which match the current partition will be allocated to the
          # first child partition that matches. Requests that don't match any child
          # partition fall back to an omnipresent default child partition.
          partitions: []
          # slug is the immutable identifier of the partition. Must be unique within
          # the parent partition. You can not modify this value after the partition
          # is created.
          slug: <string>
`

func newConsumptionConfigScaffoldCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "scaffold",
		GroupID: groups.Commands.ID,
		Short:   "Scaffolds a complete object with placeholder values",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Fprint(cmd.OutOrStdout(), ConsumptionConfigScaffoldYAML)
		},
	}
	return cmd
}

func NewConsumptionConfigCmd() *cobra.Command {
	root := &cobra.Command{
		Use:     "consumption-config",
		GroupID: groups.Config.ID,
		Short:   "All commands for ConsumptionConfig",
	}

	root.AddGroup(groups.Commands)
	root.AddCommand(
		newConsumptionConfigCreateCmd(),
		newConsumptionConfigReadCmd(),
		newConsumptionConfigUpdateCmd(),
		newConsumptionConfigDeleteCmd(),
		newConsumptionConfigScaffoldCmd(),
	)
	return root
}
