// Code generated by chronogen; DO NOT EDIT
package configv1

import (
	"context"

	"github.com/spf13/cobra"

	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/client"
	"github.com/chronosphereio/chronoctl-core/src/types"
)

// AddCommandsTo adds all entity subcommands to the given root command.
func AddCommandsTo(root *cobra.Command) {
	root.AddCommand(NewMonitorCmd())
	root.AddCommand(NewTeamCmd())
}

func ApplyMappings() map[types.TypeMeta]func(context.Context, client.Clients, types.Object, bool) error {
	return map[types.TypeMeta]func(context.Context, client.Clients, types.Object, bool) error {
		MonitorTypeMeta: func(ctx context.Context, clients client.Clients, obj types.Object, dryRun bool) error {
			entity, ok := obj.(*Monitor)
			if !ok {
				return types.WrongObjectErr((&Monitor{}), obj)
			}

			updateOpts := UpdateOptions{
				DryRun: dryRun,
				CreateIfMissing: true,
			}
			_, err := UpdateMonitor(ctx, clients.ConfigV1, entity, updateOpts)
			if err != nil {
				return err
			}
			return nil
		},
		TeamTypeMeta: func(ctx context.Context, clients client.Clients, obj types.Object, dryRun bool) error {
			entity, ok := obj.(*Team)
			if !ok {
				return types.WrongObjectErr((&Team{}), obj)
			}

			updateOpts := UpdateOptions{
				DryRun: dryRun,
				CreateIfMissing: true,
			}
			_, err := UpdateTeam(ctx, clients.ConfigV1, entity, updateOpts)
			if err != nil {
				return err
			}
			return nil
		},
	}
}

// UpdateOptions represents the request level options for update.
type UpdateOptions struct {
	DryRun bool
	CreateIfMissing bool
}

