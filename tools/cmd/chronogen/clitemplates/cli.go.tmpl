// Code generated by chronogen; DO NOT EDIT
package {{ .PkgName }}

import (
	"context"

	"github.com/spf13/cobra"

	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/client"
	"github.com/chronosphereio/chronoctl-core/src/types"
)

// AddCommandsTo adds all entity subcommands to the given root command.
func AddCommandsTo(root *cobra.Command) {
{{- range .Entities }}
	root.AddCommand(New{{ .Name }}Cmd())
{{- end }}
}

func ApplyMappings() map[types.TypeMeta]func(context.Context, client.Clients, types.Object, bool) error {
	return map[types.TypeMeta]func(context.Context, client.Clients, types.Object, bool) error {
{{- range .Entities }}
{{- if .Entity.Update }}
		{{ .Name }}TypeMeta: func(ctx context.Context, clients client.Clients, obj types.Object, dryRun bool) error {
			entity, ok := obj.(*{{ .Name }})
			if !ok {
				return types.WrongObjectErr((&{{ .Name }}{}), obj)
			}

			updateOpts := UpdateOptions{
				DryRun: dryRun,
				CreateIfMissing: true,
			}
			_, err := Update{{ .Name }}(ctx, clients.{{ .Pkg.Swagger }}, entity, updateOpts)
			if err != nil {
				return err
			}
			return nil
		},
{{- end }}
{{- end }}
	}
}

// UpdateOptions represents the request level options for update.
type UpdateOptions struct {
	DryRun bool
	CreateIfMissing bool
}
