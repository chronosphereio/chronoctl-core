// Code generated by chronogen; DO NOT EDIT
package {{ .PkgName }}

	import (
	"context"
	"fmt"

	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/client"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/clienterror"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/dry"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/file"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/groups"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/output"
	{{- if .SupportsShorthandCreate }}
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/shorthand"
	{{- end }}
	"github.com/chronosphereio/chronoctl-core/src/types"
	{{ .Pkg.Client }} "github.com/chronosphereio/chronoctl-core/src/generated/swagger/{{ .Pkg.Package }}/client/operations"
	"github.com/chronosphereio/chronoctl-core/src/generated/swagger/{{ .Pkg.Package }}/models"
	"github.com/spf13/cobra"

	{{- if .Entity.IsNotSingleton }}
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/pagination"
	"github.com/chronosphereio/chronoctl-core/src/cmd/cli"
	"github.com/chronosphereio/chronoctl-core/src/cmd/pkg/ptr"
	flag "github.com/spf13/pflag"
	{{- end }}
)

func init() { types.MustRegisterObject({{ .Name }}TypeMeta, &{{ .Name }}{}) }

var _ types.Object = &{{ .Name }}{}

var {{ .Name }}TypeMeta = types.TypeMeta{
	APIVersion: "{{ .Entity.Type.APIVersion }}",
	Kind: "{{ .Name }}",
}

type {{ .Name }} struct {
	types.TypeMeta `json:",inline"`
	Spec *models.{{ .ModelName }} `json:"spec"`
}

func New{{ .Name }}(spec *models.{{ .ModelName }}) *{{ .Name }} {
	return &{{ .Name }}{
		TypeMeta: {{ .Name }}TypeMeta,
		Spec: spec,
	}
}

func (e *{{ .Name }}) Description() string {
	{{- if .Entity.IsNotSingleton }}
	return types.TypeDescription(e, "name", e.Spec.Name, "slug", e.Spec.Slug)
	{{ else }}
	return types.TypeDescription(e)
	{{- end }}
}

func (e *{{ .Name }}) Identifier() string {
	{{- if .Entity.IsNotSingleton }}
	return e.Spec.Slug
	{{ else }}
	return "{{ .Name }}"
	{{- end }}
}
{{ if .Entity.Create }}
{{- template "create" . }}
{{- end }}
{{- if .Entity.Get }}
{{- template "read" . }}
{{- end }}
{{- if .Entity.Update }}
{{- template "update" . }}
{{- end }}
{{- if .Entity.Delete }}
{{- template "delete" . }}
{{- end }}
{{- if .Entity.List }}
{{- template "list" . }}
{{- end }}
{{- template "scaffold" . }}

func New{{ .Name }}Cmd() *cobra.Command {
	root := &cobra.Command{
		Use: "{{ .Entity.Name }}",
    GroupID: groups.Config.ID,
    Short: "All commands for {{ .NameP }}",
	}

	root.AddGroup(groups.Commands)
	root.AddCommand(
		{{- if .Entity.Create }}
		new{{ .Name }}CreateCmd(),
		{{- end }}
		{{- if .Entity.Get }}
		new{{ .Name }}ReadCmd(),
		{{- end }}
		{{- if .Entity.Update }}
		new{{ .Name }}UpdateCmd(),
		{{- end }}
		{{- if .Entity.Delete }}
		new{{ .Name }}DeleteCmd(),
		{{- end }}
		{{- if .Entity.List }}
		new{{ .Name }}ListCmd(),
		{{- end }}
		new{{.Name}}ScaffoldCmd(),
	)
	return root
}
