run:
  # default concurrency is a available CPU number
  # concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 10m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  build-tags: []

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #     vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs:
    - generated
    - thirdparty
    - instrument
    - scripts

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|release|vendor
  modules-download-mode: readonly

  # Define the Go version limit.
  # Mainly related to generics support in go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
  go: "1.18"

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is
  # "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

# all available settings of specific linters
linters-settings:
  govet:
    # report about shadowed variables
    check-shadowing: true
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10
  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  depguard:
    list-type: blacklist
    include-go-root: false
    packages:
      - hash/fnv
      - github.com/sirupsen/logrus
      - github.com/tj/assert
      - github.com/golang/protobuf/jsonpb
    packages-with-error-messages:
      # specify an error message to output when a blacklisted package is used
      hash/fnv: "use github.com/cespare/xxhash/v2"
      github.com/sirupsen/logrus: "logging is allowed only by logutils.Log"
      github.com/tj/assert: "use github.com/stretchr/testify/assert"
      github.com/golang/protobuf/jsonpb: "replace with github.com/gogo/protobuf/jsonpb"
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to
    # 'color'.
    locale: US
    ignore-words:
      - someword
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the
    # tab-width option
    line-length: 120
    # tab width in spaces. Default to 1.
    tab-width: 1
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    # By default list of stable checks is used.

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint` run to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - performance

    settings: # settings passed to gocritic
      captLocal: # must be valid enabled check name
        paramsOnly: true
      rangeValCopy:
        sizeThreshold: 32
  errcheck:
    check-type-assertions: true

  thelper:
    # Enable all checks except tb.Name: https://github.com/kulti/thelper/issues/27
    test:
      first: true
      name: true
      begin: true
    benchmark:
      first: true
      name: true
      begin: true
    tb:
      first: true
      name: false
      begin: true

  exhaustive:
    # Indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    # switch.
    default-signifies-exhaustive: true

  revive:
    rules:
      name: exported
      arguments: ['sayRepetitiveInsteadOfStutters']


linters:
  enable:
    - depguard
    - errcheck
    - exportloopref
    - gosimple
    - govet
    - goimports
    - ineffassign
    - megacheck
    - revive
    - staticcheck
    - typecheck
    - unused
  enable-all: false
  fast: false

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
    # Exclude table-driven tests from exportloopref (https://github.com/golangci/golangci-lint/issues/281).
    - "Using the variable on range scope `tt` in function literal"
    - "Using the variable on range scope `test` in function literal"
    # It's common to shadow `err` and rarely indicates a problems. See
    # https://github.com/golang/go/issues/19490 for further details.
    - 'shadow: declaration of "err" shadows declaration'
    # We commonly expose profiling information on /debug/pprof so we need to disable the gosec
    # lint for it.
    - "Profiling endpoint is automatically exposed on /debug/pprof"
    # We only use md5 for non-cryptographic purposes (e.g. generating ID's where we don't assume
    # the ID's are cryptographicly secure).
    - "Blacklisted import `crypto/md5`: weak cryptographic primitive"
    # The logger is often our last option to communicate that an error occurred so if it returns
    # an error we don't have an alternative to use. Since it's already unlikely that `Log` will
    # return an error anyway we often skip checking the error for brevity.
    - "Error return value of `\\(github.com\\/go-kit\\/kit\\/log.Logger\\).Log` is not checked"
    # The caller is responsible for closing the Body of an `http.Response`. However, this step
    # is usually performed in a defer function after the response has already been processed and
    # so errors, which are already rare, can usually be safely ignored.
    - "Error return value of `[a-zA-Z.]+.Body.Close` is not checked"
    # The errcheck linter already checks for unhandled errors so we can disable the equivalent
    # lint by gosec.
    - "G104: Errors unhandled"
    # It's not worth renaming the package since we can always alias the package import if we
    # need to use the delete builtin.
    - "package name delete has same name as predeclared identifier"

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "
    # Exclude goconst in test files since so many strings are repeated for
    # test cases.
    - linters:
        - goconst
      path: _test\.go
    # Exclude some linters from running on tests files.
    # - path: _test\.go
    #   linters:
    #     - gocyclo
    #     - errcheck
    #     - dupl
    #     - gosec

    - linters:
        - errcheck
        - revive
        - govet
      path: src/pkg/prometheus/
    - linters:
        - errcheck
        - revive
        - govet
      path: src/pkg/alertmanager/

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  new: false
